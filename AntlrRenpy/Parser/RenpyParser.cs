//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/markd/Documents/GitHub/Ryngine/AntlrRenpy/Parser/RenpyParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RenpyParser : RenpyParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, LABEL=3, JUMP=4, EXPRESSION=5, CALL=6, FROM=7, IF=8, 
		ELIF=9, ELSE=10, WHILE=11, PASS=12, WITH=13, RETURN=14, TRUE=15, FALSE=16, 
		NONE=17, MENU=18, SET=19, DEFINE=20, DEFAULT=21, WINDOW=22, SHOW=23, HIDE=24, 
		SCREEN=25, PAUSE=26, SCENE=27, BEHIND=28, ONLAYER=29, ZORDER=30, NOPREDICT=31, 
		AS=32, AT=33, PLAY=34, STOP=35, FADEIN=36, FADEOUT=37, INIT=38, PYTHON=39, 
		LPAR=40, LSQB=41, LBRACE=42, RPAR=43, RSQB=44, RBRACE=45, PLUS=46, MINUS=47, 
		ARROW=48, SLASH=49, EQEQUAL=50, NOTEQUAL=51, LESSEQUAL=52, LESS=53, GREATEREQUAL=54, 
		GREATER=55, NOT=56, IN=57, IS=58, AND=59, OR=60, PLUSEQUAL=61, MINEQUAL=62, 
		STAREQUAL=63, SLASHEQUAL=64, PERCENTEQUAL=65, AMPEREQUAL=66, VBAREQUAL=67, 
		CIRCUMFLEXEQUAL=68, LEFTSHIFTEQUAL=69, RIGHTSHIFTEQUAL=70, DOUBLESTAREQUAL=71, 
		DOUBLESLASHEQUAL=72, DOT=73, COLON=74, EQUALS=75, COMMA=76, STAR=77, DOUBLESTAR=78, 
		COLONEQUAL=79, DOLLAR=80, NAME=81, STRING=82, NUMBER=83, NEWLINE=84, COMMENT=85, 
		WS=86, EXPLICIT_LINE_JOINING=87, ERRORTOKEN=88;
	public const int
		RULE_entire_tree = 0, RULE_statements = 1, RULE_atl_statements = 2, RULE_python_statements = 3, 
		RULE_statement = 4, RULE_atl_statement = 5, RULE_python_statement = 6, 
		RULE_block_statements = 7, RULE_init_python_block = 8, RULE_python = 9, 
		RULE_simple_statements = 10, RULE_atl_simple_statements = 11, RULE_python_simple_statements = 12, 
		RULE_expression_as_statement = 13, RULE_window = 14, RULE_scene = 15, 
		RULE_scene_atl = 16, RULE_show = 17, RULE_show_atl = 18, RULE_hide = 19, 
		RULE_with = 20, RULE_play = 21, RULE_stop = 22, RULE_pause = 23, RULE_define = 24, 
		RULE_default = 25, RULE_python_one_line = 26, RULE_block = 27, RULE_atl_block = 28, 
		RULE_python_block = 29, RULE_menu = 30, RULE_menu_item = 31, RULE_pass_statement = 32, 
		RULE_label = 33, RULE_label_name = 34, RULE_jump = 35, RULE_call = 36, 
		RULE_call_screen = 37, RULE_show_screen = 38, RULE_return = 39, RULE_return_simple = 40, 
		RULE_say = 41, RULE_assignment = 42, RULE_augassign = 43, RULE_parameters = 44, 
		RULE_kwds = 45, RULE_param_no_default = 46, RULE_param_with_default = 47, 
		RULE_param = 48, RULE_annotation = 49, RULE_default_assignment = 50, RULE_type_comment = 51, 
		RULE_if_stmt = 52, RULE_elif_stmt = 53, RULE_else_block = 54, RULE_while_stmt = 55, 
		RULE_list = 56, RULE_tuple = 57, RULE_set = 58, RULE_dict = 59, RULE_double_starred_kvpairs = 60, 
		RULE_double_starred_kvpair = 61, RULE_kvpair = 62, RULE_star_expression = 63, 
		RULE_expression = 64, RULE_disjunction = 65, RULE_conjunction = 66, RULE_inversion = 67, 
		RULE_comparison = 68, RULE_comparison_operator = 69, RULE_bitwise_or = 70, 
		RULE_sum = 71, RULE_primary = 72, RULE_atom = 73, RULE_name = 74, RULE_strings = 75, 
		RULE_single_target = 76, RULE_single_subscript_attribute_target = 77, 
		RULE_t_primary = 78, RULE_genexp = 79, RULE_arguments = 80, RULE_args = 81, 
		RULE_kwargs = 82, RULE_starred_expression = 83, RULE_kwarg_or_double_starred = 84, 
		RULE_kwarg_or_starred = 85, RULE_slices = 86, RULE_star_named_expressions = 87, 
		RULE_star_named_expression = 88, RULE_assignment_expression = 89, RULE_named_expression = 90;
	public static readonly string[] ruleNames = {
		"entire_tree", "statements", "atl_statements", "python_statements", "statement", 
		"atl_statement", "python_statement", "block_statements", "init_python_block", 
		"python", "simple_statements", "atl_simple_statements", "python_simple_statements", 
		"expression_as_statement", "window", "scene", "scene_atl", "show", "show_atl", 
		"hide", "with", "play", "stop", "pause", "define", "default", "python_one_line", 
		"block", "atl_block", "python_block", "menu", "menu_item", "pass_statement", 
		"label", "label_name", "jump", "call", "call_screen", "show_screen", "return", 
		"return_simple", "say", "assignment", "augassign", "parameters", "kwds", 
		"param_no_default", "param_with_default", "param", "annotation", "default_assignment", 
		"type_comment", "if_stmt", "elif_stmt", "else_block", "while_stmt", "list", 
		"tuple", "set", "dict", "double_starred_kvpairs", "double_starred_kvpair", 
		"kvpair", "star_expression", "expression", "disjunction", "conjunction", 
		"inversion", "comparison", "comparison_operator", "bitwise_or", "sum", 
		"primary", "atom", "name", "strings", "single_target", "single_subscript_attribute_target", 
		"t_primary", "genexp", "arguments", "args", "kwargs", "starred_expression", 
		"kwarg_or_double_starred", "kwarg_or_starred", "slices", "star_named_expressions", 
		"star_named_expression", "assignment_expression", "named_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'label'", "'jump'", "'expression'", "'call'", "'from'", 
		"'if'", "'elif'", "'else'", "'while'", "'pass'", "'with'", "'return'", 
		"'True'", "'False'", "'None'", "'menu'", "'set'", "'define'", "'default'", 
		"'window'", "'show'", "'hide'", "'screen'", "'pause'", "'scene'", "'behind'", 
		"'onlayer'", "'zorder'", "'nopredict'", "'as'", "'at'", "'play'", "'stop'", 
		"'fadein'", "'fadeout'", "'init'", "'python'", "'('", "'['", "'{'", "')'", 
		"']'", "'}'", "'+'", "'-'", "'->'", "'/'", "'=='", "'!='", "'<='", "'<'", 
		"'>='", "'>'", "'not'", "'in'", "'is'", "'and'", "'or'", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", 
		"'//='", "'.'", "':'", "'='", "','", "'*'", "'**'", "':='", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "LABEL", "JUMP", "EXPRESSION", "CALL", "FROM", 
		"IF", "ELIF", "ELSE", "WHILE", "PASS", "WITH", "RETURN", "TRUE", "FALSE", 
		"NONE", "MENU", "SET", "DEFINE", "DEFAULT", "WINDOW", "SHOW", "HIDE", 
		"SCREEN", "PAUSE", "SCENE", "BEHIND", "ONLAYER", "ZORDER", "NOPREDICT", 
		"AS", "AT", "PLAY", "STOP", "FADEIN", "FADEOUT", "INIT", "PYTHON", "LPAR", 
		"LSQB", "LBRACE", "RPAR", "RSQB", "RBRACE", "PLUS", "MINUS", "ARROW", 
		"SLASH", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", "LESS", "GREATEREQUAL", "GREATER", 
		"NOT", "IN", "IS", "AND", "OR", "PLUSEQUAL", "MINEQUAL", "STAREQUAL", 
		"SLASHEQUAL", "PERCENTEQUAL", "AMPEREQUAL", "VBAREQUAL", "CIRCUMFLEXEQUAL", 
		"LEFTSHIFTEQUAL", "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", "DOUBLESLASHEQUAL", 
		"DOT", "COLON", "EQUALS", "COMMA", "STAR", "DOUBLESTAR", "COLONEQUAL", 
		"DOLLAR", "NAME", "STRING", "NUMBER", "NEWLINE", "COMMENT", "WS", "EXPLICIT_LINE_JOINING", 
		"ERRORTOKEN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RenpyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RenpyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RenpyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RenpyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Entire_treeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RenpyParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RenpyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RenpyParser.NEWLINE, i);
		}
		public Entire_treeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entire_tree; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterEntire_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitEntire_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntire_tree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entire_treeContext entire_tree() {
		Entire_treeContext _localctx = new Entire_treeContext(Context, State);
		EnterRule(_localctx, 0, RULE_entire_tree);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 876407454040L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 7L) != 0)) {
				{
				State = 182;
				statements();
				}
			}

			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 185;
				Match(NEWLINE);
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 191;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 193;
				statement();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 876407454040L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 7L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atl_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Atl_statementContext[] atl_statement() {
			return GetRuleContexts<Atl_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Atl_statementContext atl_statement(int i) {
			return GetRuleContext<Atl_statementContext>(i);
		}
		public Atl_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atl_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAtl_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAtl_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtl_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atl_statementsContext atl_statements() {
		Atl_statementsContext _localctx = new Atl_statementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_atl_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 198;
				atl_statement();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Python_statementContext[] python_statement() {
			return GetRuleContexts<Python_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Python_statementContext python_statement(int i) {
			return GetRuleContext<Python_statementContext>(i);
		}
		public Python_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPython_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPython_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPython_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Python_statementsContext python_statements() {
		Python_statementsContext _localctx = new Python_statementsContext(Context, State);
		EnterRule(_localctx, 6, RULE_python_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 203;
				python_statement();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72066387983454328L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 7L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_statementsContext simple_statements() {
			return GetRuleContext<Simple_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementsContext block_statements() {
			return GetRuleContext<Block_statementsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				simple_statements();
				State = 209;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				block_statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atl_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Atl_simple_statementsContext atl_simple_statements() {
			return GetRuleContext<Atl_simple_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		public Atl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atl_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAtl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAtl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtl_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atl_statementContext atl_statement() {
		Atl_statementContext _localctx = new Atl_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_atl_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			atl_simple_statements();
			State = 215;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Python_simple_statementsContext python_simple_statements() {
			return GetRuleContext<Python_simple_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		public Python_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPython_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPython_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPython_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Python_statementContext python_statement() {
		Python_statementContext _localctx = new Python_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_python_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			python_simple_statements();
			State = 218;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MenuContext menu() {
			return GetRuleContext<MenuContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Init_python_blockContext init_python_block() {
			return GetRuleContext<Init_python_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PythonContext python() {
			return GetRuleContext<PythonContext>(0);
		}
		public Block_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementsContext block_statements() {
		Block_statementsContext _localctx = new Block_statementsContext(Context, State);
		EnterRule(_localctx, 14, RULE_block_statements);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MENU:
				EnterOuterAlt(_localctx, 1);
				{
				State = 220;
				menu();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				if_stmt();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 222;
				while_stmt();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223;
				label();
				State = 224;
				Match(COLON);
				State = 225;
				block();
				}
				break;
			case INIT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 227;
				init_python_block();
				}
				break;
			case PYTHON:
				EnterOuterAlt(_localctx, 6);
				{
				State = 228;
				python();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_python_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(RenpyParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PythonContext python() {
			return GetRuleContext<PythonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RenpyParser.NUMBER, 0); }
		public Init_python_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_python_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterInit_python_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitInit_python_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit_python_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Init_python_blockContext init_python_block() {
		Init_python_blockContext _localctx = new Init_python_blockContext(Context, State);
		EnterRule(_localctx, 16, RULE_init_python_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(INIT);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBER) {
				{
				State = 232;
				Match(NUMBER);
				}
			}

			State = 235;
			python();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PythonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PYTHON() { return GetToken(RenpyParser.PYTHON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Python_blockContext python_block() {
			return GetRuleContext<Python_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDE() { return GetToken(RenpyParser.HIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(RenpyParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		public PythonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPython(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPython(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPython(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PythonContext python() {
		PythonContext _localctx = new PythonContext(Context, State);
		EnterRule(_localctx, 18, RULE_python);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(PYTHON);
			State = 241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HIDE:
				{
				State = 238;
				Match(HIDE);
				}
				break;
			case IN:
				{
				State = 239;
				Match(IN);
				State = 240;
				Match(NAME);
				}
				break;
			case COLON:
				break;
			default:
				break;
			}
			State = 243;
			Match(COLON);
			State = 244;
			python_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pass_statementContext pass_statement() {
			return GetRuleContext<Pass_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpContext jump() {
			return GetRuleContext<JumpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SayContext say() {
			return GetRuleContext<SayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Python_one_lineContext python_one_line() {
			return GetRuleContext<Python_one_lineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowContext window() {
			return GetRuleContext<WindowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SceneContext scene() {
			return GetRuleContext<SceneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PauseContext pause() {
			return GetRuleContext<PauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlayContext play() {
			return GetRuleContext<PlayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopContext stop() {
			return GetRuleContext<StopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowContext show() {
			return GetRuleContext<ShowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HideContext hide() {
			return GetRuleContext<HideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineContext define() {
			return GetRuleContext<DefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultContext @default() {
			return GetRuleContext<DefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithContext with() {
			return GetRuleContext<WithContext>(0);
		}
		public Simple_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSimple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSimple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_statementsContext simple_statements() {
		Simple_statementsContext _localctx = new Simple_statementsContext(Context, State);
		EnterRule(_localctx, 20, RULE_simple_statements);
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PASS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				pass_statement();
				}
				break;
			case JUMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				jump();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 248;
				label();
				}
				break;
			case CALL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 249;
				call();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 250;
				@return();
				}
				break;
			case NAME:
			case STRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 251;
				say();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 252;
				python_one_line();
				}
				break;
			case WINDOW:
				EnterOuterAlt(_localctx, 8);
				{
				State = 253;
				window();
				}
				break;
			case SCENE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 254;
				scene();
				}
				break;
			case PAUSE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 255;
				pause();
				}
				break;
			case PLAY:
				EnterOuterAlt(_localctx, 11);
				{
				State = 256;
				play();
				}
				break;
			case STOP:
				EnterOuterAlt(_localctx, 12);
				{
				State = 257;
				stop();
				}
				break;
			case SHOW:
				EnterOuterAlt(_localctx, 13);
				{
				State = 258;
				show();
				}
				break;
			case HIDE:
				EnterOuterAlt(_localctx, 14);
				{
				State = 259;
				hide();
				}
				break;
			case DEFINE:
				EnterOuterAlt(_localctx, 15);
				{
				State = 260;
				define();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 16);
				{
				State = 261;
				@default();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 17);
				{
				State = 262;
				with();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atl_simple_statementsContext : ParserRuleContext {
		public Atl_simple_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atl_simple_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAtl_simple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAtl_simple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtl_simple_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atl_simple_statementsContext atl_simple_statements() {
		Atl_simple_statementsContext _localctx = new Atl_simple_statementsContext(Context, State);
		EnterRule(_localctx, 22, RULE_atl_simple_statements);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_simple_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pass_statementContext pass_statement() {
			return GetRuleContext<Pass_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_as_statementContext expression_as_statement() {
			return GetRuleContext<Expression_as_statementContext>(0);
		}
		public Python_simple_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_simple_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPython_simple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPython_simple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPython_simple_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Python_simple_statementsContext python_simple_statements() {
		Python_simple_statementsContext _localctx = new Python_simple_statementsContext(Context, State);
		EnterRule(_localctx, 24, RULE_python_simple_statements);
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 269;
				pass_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270;
				@return();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 271;
				assignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 272;
				expression_as_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_as_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_as_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_as_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterExpression_as_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitExpression_as_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_as_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_as_statementContext expression_as_statement() {
		Expression_as_statementContext _localctx = new Expression_as_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression_as_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(RenpyParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(RenpyParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDE() { return GetToken(RenpyParser.HIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WindowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterWindow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitWindow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowContext window() {
		WindowContext _localctx = new WindowContext(Context, State);
		EnterRule(_localctx, 28, RULE_window);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(WINDOW);
			State = 278;
			_la = TokenStream.LA(1);
			if ( !(_la==SHOW || _la==HIDE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72065288471806072L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 7L) != 0)) {
				{
				State = 279;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SceneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCENE() { return GetToken(RenpyParser.SCENE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(RenpyParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		public SceneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scene; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterScene(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitScene(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScene(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SceneContext scene() {
		SceneContext _localctx = new SceneContext(Context, State);
		EnterRule(_localctx, 30, RULE_scene);
		int _la;
		try {
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282;
				Match(SCENE);
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 283;
					name();
					}
					}
					State = 286;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1097363882104L) != 0) || _la==NAME );
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 288;
					Match(WITH);
					State = 289;
					expression();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				Match(SCENE);
				State = 293;
				Match(EXPRESSION);
				State = 294;
				expression();
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 295;
					Match(WITH);
					State = 296;
					expression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scene_atlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCENE() { return GetToken(RenpyParser.SCENE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Atl_blockContext atl_block() {
			return GetRuleContext<Atl_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Scene_atlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scene_atl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterScene_atl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitScene_atl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScene_atl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scene_atlContext scene_atl() {
		Scene_atlContext _localctx = new Scene_atlContext(Context, State);
		EnterRule(_localctx, 32, RULE_scene_atl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(SCENE);
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 302;
				name();
				}
				}
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1097363882104L) != 0) || _la==NAME );
			State = 307;
			Match(COLON);
			State = 308;
			atl_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(RenpyParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(RenpyParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		public ShowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_show; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterShow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitShow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowContext show() {
		ShowContext _localctx = new ShowContext(Context, State);
		EnterRule(_localctx, 34, RULE_show);
		int _la;
		try {
			State = 327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 310;
				Match(SHOW);
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 311;
					name();
					}
					}
					State = 314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1097363882104L) != 0) || _la==NAME );
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 316;
					Match(WITH);
					State = 317;
					expression();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320;
				Match(SHOW);
				State = 321;
				Match(EXPRESSION);
				State = 322;
				expression();
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 323;
					Match(WITH);
					State = 324;
					expression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Show_atlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(RenpyParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Atl_blockContext atl_block() {
			return GetRuleContext<Atl_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Show_atlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_show_atl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterShow_atl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitShow_atl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShow_atl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Show_atlContext show_atl() {
		Show_atlContext _localctx = new Show_atlContext(Context, State);
		EnterRule(_localctx, 36, RULE_show_atl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(SHOW);
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 330;
				name();
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1097363882104L) != 0) || _la==NAME );
			State = 335;
			Match(COLON);
			State = 336;
			atl_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDE() { return GetToken(RenpyParser.HIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(RenpyParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		public HideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterHide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitHide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HideContext hide() {
		HideContext _localctx = new HideContext(Context, State);
		EnterRule(_localctx, 38, RULE_hide);
		int _la;
		try {
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338;
				Match(HIDE);
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 339;
					name();
					}
					}
					State = 342;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1097363882104L) != 0) || _la==NAME );
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 344;
					Match(WITH);
					State = 345;
					expression();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348;
				Match(HIDE);
				State = 349;
				Match(EXPRESSION);
				State = 350;
				expression();
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 351;
					Match(WITH);
					State = 352;
					expression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(RenpyParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterWith(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitWith(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithContext with() {
		WithContext _localctx = new WithContext(Context, State);
		EnterRule(_localctx, 40, RULE_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(WITH);
			State = 358;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAY() { return GetToken(RenpyParser.PLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FADEIN() { return GetToken(RenpyParser.FADEIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(RenpyParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(RenpyParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FADEOUT() { return GetToken(RenpyParser.FADEOUT, 0); }
		public PlayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_play; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPlay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPlay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayContext play() {
		PlayContext _localctx = new PlayContext(Context, State);
		EnterRule(_localctx, 42, RULE_play);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(PLAY);
			State = 361;
			name();
			State = 362;
			expression();
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FADEIN) {
				{
				State = 363;
				Match(FADEIN);
				State = 364;
				Match(NUMBER);
				}
			}

			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FADEOUT) {
				{
				State = 367;
				Match(FADEOUT);
				State = 368;
				Match(NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(RenpyParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FADEOUT() { return GetToken(RenpyParser.FADEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RenpyParser.NUMBER, 0); }
		public StopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopContext stop() {
		StopContext _localctx = new StopContext(Context, State);
		EnterRule(_localctx, 44, RULE_stop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(STOP);
			State = 372;
			name();
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FADEOUT) {
				{
				State = 373;
				Match(FADEOUT);
				State = 374;
				Match(NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAUSE() { return GetToken(RenpyParser.PAUSE, 0); }
		public PauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PauseContext pause() {
		PauseContext _localctx = new PauseContext(Context, State);
		EnterRule(_localctx, 46, RULE_pause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(PAUSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(RenpyParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineContext define() {
		DefineContext _localctx = new DefineContext(Context, State);
		EnterRule(_localctx, 48, RULE_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(DEFINE);
			State = 380;
			single_target();
			State = 381;
			Match(EQUALS);
			State = 382;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(RenpyParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultContext @default() {
		DefaultContext _localctx = new DefaultContext(Context, State);
		EnterRule(_localctx, 50, RULE_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			Match(DEFAULT);
			State = 385;
			single_target();
			State = 386;
			Match(EQUALS);
			State = 387;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_one_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(RenpyParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Python_simple_statementsContext python_simple_statements() {
			return GetRuleContext<Python_simple_statementsContext>(0);
		}
		public Python_one_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_one_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPython_one_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPython_one_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPython_one_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Python_one_lineContext python_one_line() {
		Python_one_lineContext _localctx = new Python_one_lineContext(Context, State);
		EnterRule(_localctx, 52, RULE_python_one_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(DOLLAR);
			State = 390;
			python_simple_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(NEWLINE);
			State = 393;
			Match(INDENT);
			State = 394;
			statements();
			State = 395;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atl_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Atl_statementsContext atl_statements() {
			return GetRuleContext<Atl_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		public Atl_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atl_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAtl_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAtl_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtl_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atl_blockContext atl_block() {
		Atl_blockContext _localctx = new Atl_blockContext(Context, State);
		EnterRule(_localctx, 56, RULE_atl_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			Match(NEWLINE);
			State = 398;
			Match(INDENT);
			State = 399;
			atl_statements();
			State = 400;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Python_statementsContext python_statements() {
			return GetRuleContext<Python_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		public Python_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPython_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPython_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPython_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Python_blockContext python_block() {
		Python_blockContext _localctx = new Python_blockContext(Context, State);
		EnterRule(_localctx, 58, RULE_python_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			Match(NEWLINE);
			State = 403;
			Match(INDENT);
			State = 404;
			python_statements();
			State = 405;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENU() { return GetToken(RenpyParser.MENU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RenpyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RenpyParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(RenpyParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SayContext say() {
			return GetRuleContext<SayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext[] menu_item() {
			return GetRuleContexts<Menu_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext menu_item(int i) {
			return GetRuleContext<Menu_itemContext>(i);
		}
		public MenuContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterMenu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitMenu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuContext menu() {
		MenuContext _localctx = new MenuContext(Context, State);
		EnterRule(_localctx, 60, RULE_menu);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(MENU);
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT || _la==NAME) {
				{
				State = 408;
				label_name();
				}
			}

			State = 411;
			Match(COLON);
			State = 412;
			Match(NEWLINE);
			State = 413;
			Match(INDENT);
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET) {
				{
				State = 414;
				Match(SET);
				State = 415;
				expression();
				State = 416;
				Match(NEWLINE);
				}
			}

			State = 423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 420;
				say();
				State = 421;
				Match(NEWLINE);
				}
				break;
			}
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 425;
				menu_item();
				}
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			State = 430;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(RenpyParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Menu_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterMenu_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitMenu_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_itemContext menu_item() {
		Menu_itemContext _localctx = new Menu_itemContext(Context, State);
		EnterRule(_localctx, 62, RULE_menu_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			Match(STRING);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 433;
				Match(LPAR);
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72065288471806072L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 115L) != 0)) {
					{
					State = 434;
					arguments();
					}
				}

				State = 437;
				Match(RPAR);
				}
			}

			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 440;
				Match(IF);
				State = 441;
				expression();
				}
			}

			State = 444;
			Match(COLON);
			State = 445;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pass_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(RenpyParser.PASS, 0); }
		public Pass_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pass_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPass_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPass_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPass_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pass_statementContext pass_statement() {
		Pass_statementContext _localctx = new Pass_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_pass_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(PASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(RenpyParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 66, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(LABEL);
			State = 450;
			label_name();
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 451;
				Match(LPAR);
				{
				State = 452;
				parameters();
				}
				State = 453;
				Match(RPAR);
				}
			}

			State = 458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 457;
				Match(COLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		public Label_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterLabel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitLabel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_nameContext label_name() {
		Label_nameContext _localctx = new Label_nameContext(Context, State);
		EnterRule(_localctx, 68, RULE_label_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 460;
				Match(DOT);
				}
			}

			State = 463;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(RenpyParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpContext jump() {
		JumpContext _localctx = new JumpContext(Context, State);
		EnterRule(_localctx, 70, RULE_jump);
		try {
			State = 470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465;
				Match(JUMP);
				State = 466;
				label_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 467;
				Match(JUMP);
				State = 468;
				Match(EXPRESSION);
				State = 469;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(RenpyParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext[] label_name() {
			return GetRuleContexts<Label_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name(int i) {
			return GetRuleContext<Label_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(RenpyParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 72, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			Match(CALL);
			State = 473;
			label_name();
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 474;
				Match(LPAR);
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72065288471806072L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 115L) != 0)) {
					{
					State = 475;
					arguments();
					}
				}

				State = 478;
				Match(RPAR);
				}
			}

			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 481;
				Match(FROM);
				State = 482;
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_screenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(RenpyParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCREEN() { return GetToken(RenpyParser.SCREEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(RenpyParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(RenpyParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(RenpyParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLAYER() { return GetToken(RenpyParser.ONLAYER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(RenpyParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(RenpyParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZORDER() { return GetToken(RenpyParser.ZORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOPREDICT() { return GetToken(RenpyParser.NOPREDICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(RenpyParser.WITH, 0); }
		public Call_screenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_screen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterCall_screen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitCall_screen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_screen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_screenContext call_screen() {
		Call_screenContext _localctx = new Call_screenContext(Context, State);
		EnterRule(_localctx, 74, RULE_call_screen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(CALL);
			State = 486;
			Match(SCREEN);
			State = 490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 487;
				Match(NAME);
				}
				break;
			case EXPRESSION:
				{
				State = 488;
				Match(EXPRESSION);
				State = 489;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 492;
				Match(AS);
				State = 493;
				Match(NAME);
				}
			}

			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONLAYER) {
				{
				State = 496;
				Match(ONLAYER);
				State = 497;
				Match(NUMBER);
				}
			}

			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ZORDER) {
				{
				State = 500;
				Match(ZORDER);
				State = 501;
				Match(NUMBER);
				}
			}

			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOPREDICT) {
				{
				State = 504;
				Match(NOPREDICT);
				}
			}

			State = 509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 507;
				Match(WITH);
				State = 508;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Show_screenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(RenpyParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCREEN() { return GetToken(RenpyParser.SCREEN, 0); }
		public Show_screenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_show_screen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterShow_screen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitShow_screen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShow_screen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Show_screenContext show_screen() {
		Show_screenContext _localctx = new Show_screenContext(Context, State);
		EnterRule(_localctx, 76, RULE_show_screen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(SHOW);
			State = 512;
			Match(SCREEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_simpleContext return_simple() {
			return GetRuleContext<Return_simpleContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 78, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			return_simple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_simpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(RenpyParser.RETURN, 0); }
		public Return_simpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_simple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterReturn_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitReturn_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_simple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_simpleContext return_simple() {
		Return_simpleContext _localctx = new Return_simpleContext(Context, State);
		EnterRule(_localctx, 80, RULE_return_simple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		public SayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_say; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SayContext say() {
		SayContext _localctx = new SayContext(Context, State);
		EnterRule(_localctx, 82, RULE_say);
		try {
			State = 521;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 518;
				Match(NAME);
				State = 519;
				Match(STRING);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 520;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AugassignContext augassign() {
			return GetRuleContext<AugassignContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 84, RULE_assignment);
		try {
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 523;
				single_target();
				State = 524;
				Match(EQUALS);
				State = 525;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527;
				single_target();
				State = 528;
				augassign();
				State = 529;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AugassignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUAL() { return GetToken(RenpyParser.PLUSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINEQUAL() { return GetToken(RenpyParser.MINEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAREQUAL() { return GetToken(RenpyParser.STAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASHEQUAL() { return GetToken(RenpyParser.SLASHEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTEQUAL() { return GetToken(RenpyParser.PERCENTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPEREQUAL() { return GetToken(RenpyParser.AMPEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAREQUAL() { return GetToken(RenpyParser.VBAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIRCUMFLEXEQUAL() { return GetToken(RenpyParser.CIRCUMFLEXEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTSHIFTEQUAL() { return GetToken(RenpyParser.LEFTSHIFTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTSHIFTEQUAL() { return GetToken(RenpyParser.RIGHTSHIFTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAREQUAL() { return GetToken(RenpyParser.DOUBLESTAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESLASHEQUAL() { return GetToken(RenpyParser.DOUBLESLASHEQUAL, 0); }
		public AugassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_augassign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAugassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAugassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAugassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AugassignContext augassign() {
		AugassignContext _localctx = new AugassignContext(Context, State);
		EnterRule(_localctx, 86, RULE_augassign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 4095L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext[] param_with_default() {
			return GetRuleContexts<Param_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext param_with_default(int i) {
			return GetRuleContext<Param_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwdsContext kwds() {
			return GetRuleContext<KwdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(RenpyParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext[] param_no_default() {
			return GetRuleContexts<Param_no_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default(int i) {
			return GetRuleContext<Param_no_defaultContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 88, RULE_parameters);
		int _la;
		try {
			int _alt;
			State = 669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 562;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 557;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
					case 1:
						{
						{
						State = 536;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 535;
								param_no_default();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 538;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 543;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NAME) {
							{
							{
							State = 540;
							param_with_default();
							}
							}
							State = 545;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						break;
					case 2:
						{
						{
						State = 549;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 546;
								param_no_default();
								}
								} 
							}
							State = 551;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
						}
						State = 553;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 552;
							param_with_default();
							}
							}
							State = 555;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==NAME );
						}
						}
						break;
					}
					{
					State = 559;
					Match(SLASH);
					State = 560;
					Match(COMMA);
					}
					}
					break;
				}
				State = 567;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 564;
						param_with_default();
						}
						} 
					}
					State = 569;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				}
				State = 579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 572;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 570;
						Match(STAR);
						State = 571;
						Match(COMMA);
						}
					}

					State = 575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 574;
						param_with_default();
						}
						}
						State = 577;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					}
				}

				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 581;
					kwds();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 592;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 585;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 584;
						param_no_default();
						}
						}
						State = 587;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					{
					State = 589;
					Match(SLASH);
					State = 590;
					Match(COMMA);
					}
					}
					break;
				}
				State = 597;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 594;
						param_no_default();
						}
						} 
					}
					State = 599;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
				}
				State = 603;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 600;
						param_with_default();
						}
						} 
					}
					State = 605;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				}
				State = 615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 608;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 606;
						Match(STAR);
						State = 607;
						Match(COMMA);
						}
					}

					State = 611;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 610;
						param_with_default();
						}
						}
						State = 613;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					}
				}

				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 617;
					kwds();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 628;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 621;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 620;
						param_no_default();
						}
						}
						State = 623;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					{
					State = 625;
					Match(SLASH);
					State = 626;
					Match(COMMA);
					}
					}
					break;
				}
				State = 633;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 630;
						param_no_default();
						}
						} 
					}
					State = 635;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
				}
				State = 664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 638;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 636;
						Match(STAR);
						State = 637;
						Match(COMMA);
						}
					}

					State = 662;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
					case 1:
						{
						{
						State = 641;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 640;
								param_no_default();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 643;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 648;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NAME) {
							{
							{
							State = 645;
							param_with_default();
							}
							}
							State = 650;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						break;
					case 2:
						{
						{
						State = 654;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 651;
								param_no_default();
								}
								} 
							}
							State = 656;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
						}
						State = 658;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 657;
							param_with_default();
							}
							}
							State = 660;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==NAME );
						}
						}
						break;
					}
					}
				}

				State = 667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 666;
					kwds();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default() {
			return GetRuleContext<Param_no_defaultContext>(0);
		}
		public KwdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwdsContext kwds() {
		KwdsContext _localctx = new KwdsContext(Context, State);
		EnterRule(_localctx, 90, RULE_kwds);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(DOUBLESTAR);
			State = 672;
			param_no_default();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_no_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_commentContext type_comment() {
			return GetRuleContext<Type_commentContext>(0);
		}
		public Param_no_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_no_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_no_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_no_defaultContext param_no_default() {
		Param_no_defaultContext _localctx = new Param_no_defaultContext(Context, State);
		EnterRule(_localctx, 92, RULE_param_no_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			param();
			State = 676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 675;
				Match(COMMA);
				}
			}

			State = 679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 678;
				type_comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_assignmentContext default_assignment() {
			return GetRuleContext<Default_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_commentContext type_comment() {
			return GetRuleContext<Type_commentContext>(0);
		}
		public Param_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_with_defaultContext param_with_default() {
		Param_with_defaultContext _localctx = new Param_with_defaultContext(Context, State);
		EnterRule(_localctx, 94, RULE_param_with_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			param();
			State = 682;
			default_assignment();
			State = 684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 683;
				Match(COMMA);
				}
			}

			State = 687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 686;
				type_comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 96, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			Match(NAME);
			State = 691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 690;
				annotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 98, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			Match(COLON);
			State = 694;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_assignmentContext default_assignment() {
		Default_assignmentContext _localctx = new Default_assignmentContext(Context, State);
		EnterRule(_localctx, 100, RULE_default_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(EQUALS);
			State = 697;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(RenpyParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Type_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterType_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitType_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_commentContext type_comment() {
		Type_commentContext _localctx = new Type_commentContext(Context, State);
		EnterRule(_localctx, 102, RULE_type_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(ARROW);
			State = 700;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(RenpyParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_stmtContext elif_stmt() {
			return GetRuleContext<Elif_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			Match(IF);
			State = 703;
			named_expression();
			State = 704;
			Match(COLON);
			State = 705;
			block();
			State = 710;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELIF:
				{
				State = 706;
				elif_stmt();
				}
				break;
			case Eof:
			case DEDENT:
			case LABEL:
			case JUMP:
			case CALL:
			case IF:
			case ELSE:
			case WHILE:
			case PASS:
			case WITH:
			case RETURN:
			case MENU:
			case DEFINE:
			case DEFAULT:
			case WINDOW:
			case SHOW:
			case HIDE:
			case PAUSE:
			case SCENE:
			case PLAY:
			case STOP:
			case INIT:
			case PYTHON:
			case DOLLAR:
			case NAME:
			case STRING:
			case NEWLINE:
				{
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 707;
					else_block();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(RenpyParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_stmtContext elif_stmt() {
			return GetRuleContext<Elif_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public Elif_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterElif_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitElif_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_stmtContext elif_stmt() {
		Elif_stmtContext _localctx = new Elif_stmtContext(Context, State);
		EnterRule(_localctx, 106, RULE_elif_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			Match(ELIF);
			State = 713;
			named_expression();
			State = 714;
			Match(COLON);
			State = 715;
			block();
			State = 720;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELIF:
				{
				State = 716;
				elif_stmt();
				}
				break;
			case Eof:
			case DEDENT:
			case LABEL:
			case JUMP:
			case CALL:
			case IF:
			case ELSE:
			case WHILE:
			case PASS:
			case WITH:
			case RETURN:
			case MENU:
			case DEFINE:
			case DEFAULT:
			case WINDOW:
			case SHOW:
			case HIDE:
			case PAUSE:
			case SCENE:
			case PLAY:
			case STOP:
			case INIT:
			case PYTHON:
			case DOLLAR:
			case NAME:
			case STRING:
			case NEWLINE:
				{
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 717;
					else_block();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(RenpyParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 108, RULE_else_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			Match(ELSE);
			State = 723;
			Match(COLON);
			State = 724;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(RenpyParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public While_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_stmtContext while_stmt() {
		While_stmtContext _localctx = new While_stmtContext(Context, State);
		EnterRule(_localctx, 110, RULE_while_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			Match(WHILE);
			State = 727;
			named_expression();
			State = 728;
			Match(COLON);
			State = 729;
			block();
			State = 731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 730;
				else_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 112, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			Match(LSQB);
			State = 735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72065288471806072L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 113L) != 0)) {
				{
				State = 734;
				star_named_expressions();
				}
			}

			State = 737;
			Match(RSQB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression() {
			return GetRuleContext<Star_named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 114, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			Match(LPAR);
			State = 745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72065288471806072L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 113L) != 0)) {
				{
				State = 740;
				star_named_expression();
				State = 741;
				Match(COMMA);
				State = 743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72065288471806072L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 113L) != 0)) {
					{
					State = 742;
					star_named_expressions();
					}
				}

				}
			}

			State = 747;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(RenpyParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(RenpyParser.RBRACE, 0); }
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 116, RULE_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			Match(LBRACE);
			State = 750;
			star_named_expressions();
			State = 751;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(RenpyParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(RenpyParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairsContext double_starred_kvpairs() {
			return GetRuleContext<Double_starred_kvpairsContext>(0);
		}
		public DictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDict(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictContext dict() {
		DictContext _localctx = new DictContext(Context, State);
		EnterRule(_localctx, 118, RULE_dict);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			Match(LBRACE);
			State = 755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72065288471806072L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 57L) != 0)) {
				{
				State = 754;
				double_starred_kvpairs();
				}
			}

			State = 757;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_starred_kvpairsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairContext[] double_starred_kvpair() {
			return GetRuleContexts<Double_starred_kvpairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairContext double_starred_kvpair(int i) {
			return GetRuleContext<Double_starred_kvpairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		public Double_starred_kvpairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_starred_kvpairs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDouble_starred_kvpairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDouble_starred_kvpairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_starred_kvpairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_starred_kvpairsContext double_starred_kvpairs() {
		Double_starred_kvpairsContext _localctx = new Double_starred_kvpairsContext(Context, State);
		EnterRule(_localctx, 120, RULE_double_starred_kvpairs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			double_starred_kvpair();
			State = 764;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 760;
					Match(COMMA);
					State = 761;
					double_starred_kvpair();
					}
					} 
				}
				State = 766;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			}
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 767;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_starred_kvpairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpairContext kvpair() {
			return GetRuleContext<KvpairContext>(0);
		}
		public Double_starred_kvpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_starred_kvpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDouble_starred_kvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDouble_starred_kvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_starred_kvpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_starred_kvpairContext double_starred_kvpair() {
		Double_starred_kvpairContext _localctx = new Double_starred_kvpairContext(Context, State);
		EnterRule(_localctx, 122, RULE_double_starred_kvpair);
		try {
			State = 773;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 770;
				Match(DOUBLESTAR);
				State = 771;
				sum(0);
				}
				break;
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case TRUE:
			case FALSE:
			case NONE:
			case MENU:
			case SET:
			case DEFINE:
			case DEFAULT:
			case WINDOW:
			case SHOW:
			case HIDE:
			case SCREEN:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case ZORDER:
			case AS:
			case AT:
			case PLAY:
			case STOP:
			case FADEIN:
			case FADEOUT:
			case INIT:
			case PYTHON:
			case LSQB:
			case LBRACE:
			case NOT:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 772;
				kvpair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		public KvpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpairContext kvpair() {
		KvpairContext _localctx = new KvpairContext(Context, State);
		EnterRule(_localctx, 124, RULE_kvpair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			expression();
			State = 776;
			Match(COLON);
			State = 777;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Star_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_expressionContext star_expression() {
		Star_expressionContext _localctx = new Star_expressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_star_expression);
		try {
			State = 782;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 779;
				Match(STAR);
				State = 780;
				sum(0);
				}
				break;
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case TRUE:
			case FALSE:
			case NONE:
			case MENU:
			case SET:
			case DEFINE:
			case DEFAULT:
			case WINDOW:
			case SHOW:
			case HIDE:
			case SCREEN:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case ZORDER:
			case AS:
			case AT:
			case PLAY:
			case STOP:
			case FADEIN:
			case FADEOUT:
			case INIT:
			case PYTHON:
			case LSQB:
			case LBRACE:
			case NOT:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 781;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			disjunction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext conjunction() {
			return GetRuleContext<ConjunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(RenpyParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(Context, State);
		EnterRule(_localctx, 130, RULE_disjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			conjunction();
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 787;
				Match(OR);
				State = 788;
				disjunction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InversionContext inversion() {
			return GetRuleContext<InversionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(RenpyParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext conjunction() {
			return GetRuleContext<ConjunctionContext>(0);
		}
		public ConjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterConjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitConjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConjunctionContext conjunction() {
		ConjunctionContext _localctx = new ConjunctionContext(Context, State);
		EnterRule(_localctx, 132, RULE_conjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			inversion();
			State = 794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 792;
				Match(AND);
				State = 793;
				conjunction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InversionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RenpyParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InversionContext inversion() {
			return GetRuleContext<InversionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public InversionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inversion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterInversion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitInversion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInversion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InversionContext inversion() {
		InversionContext _localctx = new InversionContext(Context, State);
		EnterRule(_localctx, 134, RULE_inversion);
		try {
			State = 799;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 796;
				Match(NOT);
				State = 797;
				inversion();
				}
				break;
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case TRUE:
			case FALSE:
			case NONE:
			case MENU:
			case SET:
			case DEFINE:
			case DEFAULT:
			case WINDOW:
			case SHOW:
			case HIDE:
			case SCREEN:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case ZORDER:
			case AS:
			case AT:
			case PLAY:
			case STOP:
			case FADEIN:
			case FADEOUT:
			case INIT:
			case PYTHON:
			case LSQB:
			case LBRACE:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 798;
				comparison();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 136, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			bitwise_or();
			State = 805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 575334852396580864L) != 0)) {
				{
				State = 802;
				comparison_operator();
				State = 803;
				comparison();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQUAL() { return GetToken(RenpyParser.EQEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(RenpyParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL() { return GetToken(RenpyParser.LESSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(RenpyParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(RenpyParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(RenpyParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(RenpyParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RenpyParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(RenpyParser.IS, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 138, RULE_comparison_operator);
		int _la;
		try {
			State = 821;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQEQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 807;
				Match(EQEQUAL);
				}
				break;
			case NOTEQUAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 808;
				Match(NOTEQUAL);
				}
				break;
			case LESSEQUAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 809;
				Match(LESSEQUAL);
				}
				break;
			case LESS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 810;
				Match(LESS);
				}
				break;
			case GREATEREQUAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 811;
				Match(GREATEREQUAL);
				}
				break;
			case GREATER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 812;
				Match(GREATER);
				}
				break;
			case NOT:
			case IN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 813;
					Match(NOT);
					}
				}

				State = 816;
				Match(IN);
				}
				break;
			case IS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 817;
				Match(IS);
				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 818;
					Match(NOT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public Bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_orContext bitwise_or() {
		Bitwise_orContext _localctx = new Bitwise_orContext(Context, State);
		EnterRule(_localctx, 140, RULE_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			sum(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RenpyParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RenpyParser.MINUS, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		return sum(0);
	}

	private SumContext sum(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumContext _localctx = new SumContext(Context, _parentState);
		SumContext _prevctx = _localctx;
		int _startState = 142;
		EnterRecursionRule(_localctx, 142, RULE_sum, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 826;
			primary(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 833;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sum);
					State = 828;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 829;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 830;
					primary(0);
					}
					} 
				}
				State = 835;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		return primary(0);
	}

	private PrimaryContext primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryContext _localctx = new PrimaryContext(Context, _parentState);
		PrimaryContext _prevctx = _localctx;
		int _startState = 144;
		EnterRecursionRule(_localctx, 144, RULE_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 837;
			atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 855;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primary);
					State = 839;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 851;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
						{
						State = 840;
						Match(DOT);
						State = 841;
						name();
						}
						break;
					case LPAR:
						{
						State = 842;
						Match(LPAR);
						State = 844;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72065288471806072L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 115L) != 0)) {
							{
							State = 843;
							arguments();
							}
						}

						State = 846;
						Match(RPAR);
						}
						break;
					case LSQB:
						{
						State = 847;
						Match(LSQB);
						State = 848;
						slices();
						State = 849;
						Match(RSQB);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 857;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictContext dict() {
			return GetRuleContext<DictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(RenpyParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(RenpyParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(RenpyParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RenpyParser.NUMBER, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 146, RULE_atom);
		try {
			State = 866;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 858;
				strings();
				}
				break;
			case LSQB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 859;
				list();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 860;
				dict();
				}
				break;
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case MENU:
			case SET:
			case DEFINE:
			case DEFAULT:
			case WINDOW:
			case SHOW:
			case HIDE:
			case SCREEN:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case ZORDER:
			case AS:
			case AT:
			case PLAY:
			case STOP:
			case FADEIN:
			case FADEOUT:
			case INIT:
			case PYTHON:
			case NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 861;
				name();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 862;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 863;
				Match(FALSE);
				}
				break;
			case NONE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 864;
				Match(NONE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 8);
				{
				State = 865;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAUSE() { return GetToken(RenpyParser.PAUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENU() { return GetToken(RenpyParser.MENU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(RenpyParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(RenpyParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDE() { return GetToken(RenpyParser.HIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(RenpyParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(RenpyParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(RenpyParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCENE() { return GetToken(RenpyParser.SCENE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEHIND() { return GetToken(RenpyParser.BEHIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLAYER() { return GetToken(RenpyParser.ONLAYER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(RenpyParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(RenpyParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INIT() { return GetToken(RenpyParser.INIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PYTHON() { return GetToken(RenpyParser.PYTHON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(RenpyParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(RenpyParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(RenpyParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAY() { return GetToken(RenpyParser.PLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(RenpyParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FADEIN() { return GetToken(RenpyParser.FADEIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FADEOUT() { return GetToken(RenpyParser.FADEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCREEN() { return GetToken(RenpyParser.SCREEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZORDER() { return GetToken(RenpyParser.ZORDER, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 148, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1097363882104L) != 0) || _la==NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RenpyParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RenpyParser.STRING, i);
		}
		public StringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringsContext strings() {
		StringsContext _localctx = new StringsContext(Context, State);
		EnterRule(_localctx, 150, RULE_strings);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 870;
					Match(STRING);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 873;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
			return GetRuleContext<Single_subscript_attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		public Single_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_targetContext single_target() {
		Single_targetContext _localctx = new Single_targetContext(Context, State);
		EnterRule(_localctx, 152, RULE_single_target);
		try {
			State = 881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 875;
				single_subscript_attribute_target();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 876;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 877;
				Match(LPAR);
				State = 878;
				single_target();
				State = 879;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_subscript_attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		public Single_subscript_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_subscript_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_subscript_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
		Single_subscript_attribute_targetContext _localctx = new Single_subscript_attribute_targetContext(Context, State);
		EnterRule(_localctx, 154, RULE_single_subscript_attribute_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			t_primary(0);
			State = 890;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				{
				State = 884;
				Match(DOT);
				State = 885;
				name();
				}
				break;
			case LSQB:
				{
				State = 886;
				Match(LSQB);
				State = 887;
				slices();
				State = 888;
				Match(RSQB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class T_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenexpContext genexp() {
			return GetRuleContext<GenexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public T_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitT_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public T_primaryContext t_primary() {
		return t_primary(0);
	}

	private T_primaryContext t_primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		T_primaryContext _localctx = new T_primaryContext(Context, _parentState);
		T_primaryContext _prevctx = _localctx;
		int _startState = 156;
		EnterRecursionRule(_localctx, 156, RULE_t_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 893;
			name();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 912;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new T_primaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_t_primary);
					State = 895;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 908;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
					case 1:
						{
						State = 896;
						Match(DOT);
						State = 897;
						name();
						}
						break;
					case 2:
						{
						State = 898;
						genexp();
						}
						break;
					case 3:
						{
						State = 899;
						Match(LPAR);
						State = 901;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72065288471806072L) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 115L) != 0)) {
							{
							State = 900;
							arguments();
							}
						}

						State = 903;
						Match(RPAR);
						}
						break;
					case 4:
						{
						State = 904;
						Match(LSQB);
						State = 905;
						slices();
						State = 906;
						Match(RSQB);
						}
						break;
					}
					}
					} 
				}
				State = 914;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GenexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GenexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenexpContext genexp() {
		GenexpContext _localctx = new GenexpContext(Context, State);
		EnterRule(_localctx, 158, RULE_genexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 915;
			Match(LPAR);
			State = 918;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 916;
				assignment_expression();
				}
				break;
			case 2:
				{
				State = 917;
				expression();
				}
				break;
			}
			State = 920;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 160, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			args();
			State = 924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 923;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext[] starred_expression() {
			return GetRuleContexts<Starred_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression(int i) {
			return GetRuleContext<Starred_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwargsContext kwargs() {
			return GetRuleContext<KwargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext[] assignment_expression() {
			return GetRuleContexts<Assignment_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression(int i) {
			return GetRuleContext<Assignment_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 162, RULE_args);
		try {
			int _alt;
			State = 951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 931;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 926;
					starred_expression();
					}
					break;
				case LABEL:
				case JUMP:
				case EXPRESSION:
				case CALL:
				case TRUE:
				case FALSE:
				case NONE:
				case MENU:
				case SET:
				case DEFINE:
				case DEFAULT:
				case WINDOW:
				case SHOW:
				case HIDE:
				case SCREEN:
				case PAUSE:
				case SCENE:
				case BEHIND:
				case ONLAYER:
				case ZORDER:
				case AS:
				case AT:
				case PLAY:
				case STOP:
				case FADEIN:
				case FADEOUT:
				case INIT:
				case PYTHON:
				case LSQB:
				case LBRACE:
				case NOT:
				case NAME:
				case STRING:
				case NUMBER:
					{
					State = 929;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
					case 1:
						{
						State = 927;
						assignment_expression();
						}
						break;
					case 2:
						{
						State = 928;
						expression();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 943;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 933;
						Match(COMMA);
						State = 939;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STAR:
							{
							State = 934;
							starred_expression();
							}
							break;
						case LABEL:
						case JUMP:
						case EXPRESSION:
						case CALL:
						case TRUE:
						case FALSE:
						case NONE:
						case MENU:
						case SET:
						case DEFINE:
						case DEFAULT:
						case WINDOW:
						case SHOW:
						case HIDE:
						case SCREEN:
						case PAUSE:
						case SCENE:
						case BEHIND:
						case ONLAYER:
						case ZORDER:
						case AS:
						case AT:
						case PLAY:
						case STOP:
						case FADEIN:
						case FADEOUT:
						case INIT:
						case PYTHON:
						case LSQB:
						case LBRACE:
						case NOT:
						case NAME:
						case STRING:
						case NUMBER:
							{
							State = 937;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
							case 1:
								{
								State = 935;
								assignment_expression();
								}
								break;
							case 2:
								{
								State = 936;
								expression();
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 945;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
				}
				State = 948;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
				case 1:
					{
					State = 946;
					Match(COMMA);
					State = 947;
					kwargs();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 950;
				kwargs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext[] kwarg_or_starred() {
			return GetRuleContexts<Kwarg_or_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext kwarg_or_starred(int i) {
			return GetRuleContext<Kwarg_or_starredContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext[] kwarg_or_double_starred() {
			return GetRuleContexts<Kwarg_or_double_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext kwarg_or_double_starred(int i) {
			return GetRuleContext<Kwarg_or_double_starredContext>(i);
		}
		public KwargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwargsContext kwargs() {
		KwargsContext _localctx = new KwargsContext(Context, State);
		EnterRule(_localctx, 164, RULE_kwargs);
		try {
			int _alt;
			State = 980;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 953;
				kwarg_or_starred();
				State = 958;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 954;
						Match(COMMA);
						State = 955;
						kwarg_or_starred();
						}
						} 
					}
					State = 960;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
				}
				State = 970;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
				case 1:
					{
					State = 961;
					Match(COMMA);
					State = 962;
					kwarg_or_double_starred();
					State = 967;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 963;
							Match(COMMA);
							State = 964;
							kwarg_or_double_starred();
							}
							} 
						}
						State = 969;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 972;
				kwarg_or_double_starred();
				State = 977;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 973;
						Match(COMMA);
						State = 974;
						kwarg_or_double_starred();
						}
						} 
					}
					State = 979;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Starred_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Starred_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_starred_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStarred_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Starred_expressionContext starred_expression() {
		Starred_expressionContext _localctx = new Starred_expressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_starred_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982;
			Match(STAR);
			State = 983;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_double_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		public Kwarg_or_double_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_double_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_double_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_double_starredContext kwarg_or_double_starred() {
		Kwarg_or_double_starredContext _localctx = new Kwarg_or_double_starredContext(Context, State);
		EnterRule(_localctx, 168, RULE_kwarg_or_double_starred);
		try {
			State = 991;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case MENU:
			case SET:
			case DEFINE:
			case DEFAULT:
			case WINDOW:
			case SHOW:
			case HIDE:
			case SCREEN:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case ZORDER:
			case AS:
			case AT:
			case PLAY:
			case STOP:
			case FADEIN:
			case FADEOUT:
			case INIT:
			case PYTHON:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 985;
				name();
				State = 986;
				Match(EQUALS);
				State = 987;
				expression();
				}
				break;
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 989;
				Match(DOUBLESTAR);
				State = 990;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression() {
			return GetRuleContext<Starred_expressionContext>(0);
		}
		public Kwarg_or_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_starredContext kwarg_or_starred() {
		Kwarg_or_starredContext _localctx = new Kwarg_or_starredContext(Context, State);
		EnterRule(_localctx, 170, RULE_kwarg_or_starred);
		try {
			State = 998;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case MENU:
			case SET:
			case DEFINE:
			case DEFAULT:
			case WINDOW:
			case SHOW:
			case HIDE:
			case SCREEN:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case ZORDER:
			case AS:
			case AT:
			case PLAY:
			case STOP:
			case FADEIN:
			case FADEOUT:
			case INIT:
			case PYTHON:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 993;
				name();
				State = 994;
				Match(EQUALS);
				State = 995;
				expression();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 997;
				starred_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public SlicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlicesContext slices() {
		SlicesContext _localctx = new SlicesContext(Context, State);
		EnterRule(_localctx, 172, RULE_slices);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000;
			named_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext[] star_named_expression() {
			return GetRuleContexts<Star_named_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression(int i) {
			return GetRuleContext<Star_named_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		public Star_named_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionsContext star_named_expressions() {
		Star_named_expressionsContext _localctx = new Star_named_expressionsContext(Context, State);
		EnterRule(_localctx, 174, RULE_star_named_expressions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			star_named_expression();
			State = 1007;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1003;
					Match(COMMA);
					State = 1004;
					star_named_expression();
					}
					} 
				}
				State = 1009;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			}
			State = 1011;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1010;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public Star_named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionContext star_named_expression() {
		Star_named_expressionContext _localctx = new Star_named_expressionContext(Context, State);
		EnterRule(_localctx, 176, RULE_star_named_expression);
		try {
			State = 1016;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1013;
				Match(STAR);
				State = 1014;
				sum(0);
				}
				break;
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case TRUE:
			case FALSE:
			case NONE:
			case MENU:
			case SET:
			case DEFINE:
			case DEFAULT:
			case WINDOW:
			case SHOW:
			case HIDE:
			case SCREEN:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case ZORDER:
			case AS:
			case AT:
			case PLAY:
			case STOP:
			case FADEIN:
			case FADEOUT:
			case INIT:
			case PYTHON:
			case LSQB:
			case LBRACE:
			case NOT:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1015;
				named_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONEQUAL() { return GetToken(RenpyParser.COLONEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 178, RULE_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018;
			name();
			State = 1019;
			Match(COLONEQUAL);
			State = 1020;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_expressionContext named_expression() {
		Named_expressionContext _localctx = new Named_expressionContext(Context, State);
		EnterRule(_localctx, 180, RULE_named_expression);
		try {
			State = 1024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1022;
				assignment_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1023;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 71: return sum_sempred((SumContext)_localctx, predIndex);
		case 72: return primary_sempred((PrimaryContext)_localctx, predIndex);
		case 78: return t_primary_sempred((T_primaryContext)_localctx, predIndex);
		}
		return true;
	}
	private bool sum_sempred(SumContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool t_primary_sempred(T_primaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,88,1027,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,3,0,184,
		8,0,1,0,5,0,187,8,0,10,0,12,0,190,9,0,1,0,1,0,1,1,4,1,195,8,1,11,1,12,
		1,196,1,2,4,2,200,8,2,11,2,12,2,201,1,3,4,3,205,8,3,11,3,12,3,206,1,4,
		1,4,1,4,1,4,3,4,213,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,3,7,230,8,7,1,8,1,8,3,8,234,8,8,1,8,1,8,1,9,1,9,1,9,1,9,
		3,9,242,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,264,8,10,1,11,1,11,3,11,268,
		8,11,1,12,1,12,1,12,1,12,3,12,274,8,12,1,13,1,13,1,14,1,14,1,14,3,14,281,
		8,14,1,15,1,15,4,15,285,8,15,11,15,12,15,286,1,15,1,15,3,15,291,8,15,1,
		15,1,15,1,15,1,15,1,15,3,15,298,8,15,3,15,300,8,15,1,16,1,16,4,16,304,
		8,16,11,16,12,16,305,1,16,1,16,1,16,1,17,1,17,4,17,313,8,17,11,17,12,17,
		314,1,17,1,17,3,17,319,8,17,1,17,1,17,1,17,1,17,1,17,3,17,326,8,17,3,17,
		328,8,17,1,18,1,18,4,18,332,8,18,11,18,12,18,333,1,18,1,18,1,18,1,19,1,
		19,4,19,341,8,19,11,19,12,19,342,1,19,1,19,3,19,347,8,19,1,19,1,19,1,19,
		1,19,1,19,3,19,354,8,19,3,19,356,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,
		21,1,21,3,21,366,8,21,1,21,1,21,3,21,370,8,21,1,22,1,22,1,22,1,22,3,22,
		376,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,
		26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,
		29,1,29,1,29,1,29,1,30,1,30,3,30,410,8,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,3,30,419,8,30,1,30,1,30,1,30,3,30,424,8,30,1,30,4,30,427,8,30,11,
		30,12,30,428,1,30,1,30,1,31,1,31,1,31,3,31,436,8,31,1,31,3,31,439,8,31,
		1,31,1,31,3,31,443,8,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,
		33,1,33,3,33,456,8,33,1,33,3,33,459,8,33,1,34,3,34,462,8,34,1,34,1,34,
		1,35,1,35,1,35,1,35,1,35,3,35,471,8,35,1,36,1,36,1,36,1,36,3,36,477,8,
		36,1,36,3,36,480,8,36,1,36,1,36,3,36,484,8,36,1,37,1,37,1,37,1,37,1,37,
		3,37,491,8,37,1,37,1,37,3,37,495,8,37,1,37,1,37,3,37,499,8,37,1,37,1,37,
		3,37,503,8,37,1,37,3,37,506,8,37,1,37,1,37,3,37,510,8,37,1,38,1,38,1,38,
		1,39,1,39,1,40,1,40,1,41,1,41,1,41,3,41,522,8,41,1,42,1,42,1,42,1,42,1,
		42,1,42,1,42,1,42,3,42,532,8,42,1,43,1,43,1,44,4,44,537,8,44,11,44,12,
		44,538,1,44,5,44,542,8,44,10,44,12,44,545,9,44,1,44,5,44,548,8,44,10,44,
		12,44,551,9,44,1,44,4,44,554,8,44,11,44,12,44,555,3,44,558,8,44,1,44,1,
		44,1,44,3,44,563,8,44,1,44,5,44,566,8,44,10,44,12,44,569,9,44,1,44,1,44,
		3,44,573,8,44,1,44,4,44,576,8,44,11,44,12,44,577,3,44,580,8,44,1,44,3,
		44,583,8,44,1,44,4,44,586,8,44,11,44,12,44,587,1,44,1,44,1,44,3,44,593,
		8,44,1,44,5,44,596,8,44,10,44,12,44,599,9,44,1,44,5,44,602,8,44,10,44,
		12,44,605,9,44,1,44,1,44,3,44,609,8,44,1,44,4,44,612,8,44,11,44,12,44,
		613,3,44,616,8,44,1,44,3,44,619,8,44,1,44,4,44,622,8,44,11,44,12,44,623,
		1,44,1,44,1,44,3,44,629,8,44,1,44,5,44,632,8,44,10,44,12,44,635,9,44,1,
		44,1,44,3,44,639,8,44,1,44,4,44,642,8,44,11,44,12,44,643,1,44,5,44,647,
		8,44,10,44,12,44,650,9,44,1,44,5,44,653,8,44,10,44,12,44,656,9,44,1,44,
		4,44,659,8,44,11,44,12,44,660,3,44,663,8,44,3,44,665,8,44,1,44,3,44,668,
		8,44,3,44,670,8,44,1,45,1,45,1,45,1,46,1,46,3,46,677,8,46,1,46,3,46,680,
		8,46,1,47,1,47,1,47,3,47,685,8,47,1,47,3,47,688,8,47,1,48,1,48,3,48,692,
		8,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,
		1,52,1,52,3,52,709,8,52,3,52,711,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,
		53,719,8,53,3,53,721,8,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,
		3,55,732,8,55,1,56,1,56,3,56,736,8,56,1,56,1,56,1,57,1,57,1,57,1,57,3,
		57,744,8,57,3,57,746,8,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,3,59,
		756,8,59,1,59,1,59,1,60,1,60,1,60,5,60,763,8,60,10,60,12,60,766,9,60,1,
		60,3,60,769,8,60,1,61,1,61,1,61,3,61,774,8,61,1,62,1,62,1,62,1,62,1,63,
		1,63,1,63,3,63,783,8,63,1,64,1,64,1,65,1,65,1,65,3,65,790,8,65,1,66,1,
		66,1,66,3,66,795,8,66,1,67,1,67,1,67,3,67,800,8,67,1,68,1,68,1,68,1,68,
		3,68,806,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,815,8,69,1,69,1,
		69,1,69,3,69,820,8,69,3,69,822,8,69,1,70,1,70,1,71,1,71,1,71,1,71,1,71,
		1,71,5,71,832,8,71,10,71,12,71,835,9,71,1,72,1,72,1,72,1,72,1,72,1,72,
		1,72,1,72,3,72,845,8,72,1,72,1,72,1,72,1,72,1,72,3,72,852,8,72,5,72,854,
		8,72,10,72,12,72,857,9,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,
		867,8,73,1,74,1,74,1,75,4,75,872,8,75,11,75,12,75,873,1,76,1,76,1,76,1,
		76,1,76,1,76,3,76,882,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,891,
		8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,902,8,78,1,78,1,
		78,1,78,1,78,1,78,3,78,909,8,78,5,78,911,8,78,10,78,12,78,914,9,78,1,79,
		1,79,1,79,3,79,919,8,79,1,79,1,79,1,80,1,80,3,80,925,8,80,1,81,1,81,1,
		81,3,81,930,8,81,3,81,932,8,81,1,81,1,81,1,81,1,81,3,81,938,8,81,3,81,
		940,8,81,5,81,942,8,81,10,81,12,81,945,9,81,1,81,1,81,3,81,949,8,81,1,
		81,3,81,952,8,81,1,82,1,82,1,82,5,82,957,8,82,10,82,12,82,960,9,82,1,82,
		1,82,1,82,1,82,5,82,966,8,82,10,82,12,82,969,9,82,3,82,971,8,82,1,82,1,
		82,1,82,5,82,976,8,82,10,82,12,82,979,9,82,3,82,981,8,82,1,83,1,83,1,83,
		1,84,1,84,1,84,1,84,1,84,1,84,3,84,992,8,84,1,85,1,85,1,85,1,85,1,85,3,
		85,999,8,85,1,86,1,86,1,87,1,87,1,87,5,87,1006,8,87,10,87,12,87,1009,9,
		87,1,87,3,87,1012,8,87,1,88,1,88,1,88,3,88,1017,8,88,1,89,1,89,1,89,1,
		89,1,90,1,90,3,90,1025,8,90,1,90,0,3,142,144,156,91,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
		64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
		144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
		180,0,4,1,0,23,24,1,0,61,72,1,0,46,47,4,0,3,6,18,30,32,39,81,81,1113,0,
		183,1,0,0,0,2,194,1,0,0,0,4,199,1,0,0,0,6,204,1,0,0,0,8,212,1,0,0,0,10,
		214,1,0,0,0,12,217,1,0,0,0,14,229,1,0,0,0,16,231,1,0,0,0,18,237,1,0,0,
		0,20,263,1,0,0,0,22,267,1,0,0,0,24,273,1,0,0,0,26,275,1,0,0,0,28,277,1,
		0,0,0,30,299,1,0,0,0,32,301,1,0,0,0,34,327,1,0,0,0,36,329,1,0,0,0,38,355,
		1,0,0,0,40,357,1,0,0,0,42,360,1,0,0,0,44,371,1,0,0,0,46,377,1,0,0,0,48,
		379,1,0,0,0,50,384,1,0,0,0,52,389,1,0,0,0,54,392,1,0,0,0,56,397,1,0,0,
		0,58,402,1,0,0,0,60,407,1,0,0,0,62,432,1,0,0,0,64,447,1,0,0,0,66,449,1,
		0,0,0,68,461,1,0,0,0,70,470,1,0,0,0,72,472,1,0,0,0,74,485,1,0,0,0,76,511,
		1,0,0,0,78,514,1,0,0,0,80,516,1,0,0,0,82,521,1,0,0,0,84,531,1,0,0,0,86,
		533,1,0,0,0,88,669,1,0,0,0,90,671,1,0,0,0,92,674,1,0,0,0,94,681,1,0,0,
		0,96,689,1,0,0,0,98,693,1,0,0,0,100,696,1,0,0,0,102,699,1,0,0,0,104,702,
		1,0,0,0,106,712,1,0,0,0,108,722,1,0,0,0,110,726,1,0,0,0,112,733,1,0,0,
		0,114,739,1,0,0,0,116,749,1,0,0,0,118,753,1,0,0,0,120,759,1,0,0,0,122,
		773,1,0,0,0,124,775,1,0,0,0,126,782,1,0,0,0,128,784,1,0,0,0,130,786,1,
		0,0,0,132,791,1,0,0,0,134,799,1,0,0,0,136,801,1,0,0,0,138,821,1,0,0,0,
		140,823,1,0,0,0,142,825,1,0,0,0,144,836,1,0,0,0,146,866,1,0,0,0,148,868,
		1,0,0,0,150,871,1,0,0,0,152,881,1,0,0,0,154,883,1,0,0,0,156,892,1,0,0,
		0,158,915,1,0,0,0,160,922,1,0,0,0,162,951,1,0,0,0,164,980,1,0,0,0,166,
		982,1,0,0,0,168,991,1,0,0,0,170,998,1,0,0,0,172,1000,1,0,0,0,174,1002,
		1,0,0,0,176,1016,1,0,0,0,178,1018,1,0,0,0,180,1024,1,0,0,0,182,184,3,2,
		1,0,183,182,1,0,0,0,183,184,1,0,0,0,184,188,1,0,0,0,185,187,5,84,0,0,186,
		185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,191,1,
		0,0,0,190,188,1,0,0,0,191,192,5,0,0,1,192,1,1,0,0,0,193,195,3,8,4,0,194,
		193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,3,1,0,
		0,0,198,200,3,10,5,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,
		202,1,0,0,0,202,5,1,0,0,0,203,205,3,12,6,0,204,203,1,0,0,0,205,206,1,0,
		0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,7,1,0,0,0,208,209,3,20,10,0,209,
		210,5,84,0,0,210,213,1,0,0,0,211,213,3,14,7,0,212,208,1,0,0,0,212,211,
		1,0,0,0,213,9,1,0,0,0,214,215,3,22,11,0,215,216,5,84,0,0,216,11,1,0,0,
		0,217,218,3,24,12,0,218,219,5,84,0,0,219,13,1,0,0,0,220,230,3,60,30,0,
		221,230,3,104,52,0,222,230,3,110,55,0,223,224,3,66,33,0,224,225,5,74,0,
		0,225,226,3,54,27,0,226,230,1,0,0,0,227,230,3,16,8,0,228,230,3,18,9,0,
		229,220,1,0,0,0,229,221,1,0,0,0,229,222,1,0,0,0,229,223,1,0,0,0,229,227,
		1,0,0,0,229,228,1,0,0,0,230,15,1,0,0,0,231,233,5,38,0,0,232,234,5,83,0,
		0,233,232,1,0,0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,236,3,18,9,0,236,
		17,1,0,0,0,237,241,5,39,0,0,238,242,5,24,0,0,239,240,5,57,0,0,240,242,
		5,81,0,0,241,238,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,
		0,243,244,5,74,0,0,244,245,3,58,29,0,245,19,1,0,0,0,246,264,3,64,32,0,
		247,264,3,70,35,0,248,264,3,66,33,0,249,264,3,72,36,0,250,264,3,78,39,
		0,251,264,3,82,41,0,252,264,3,52,26,0,253,264,3,28,14,0,254,264,3,30,15,
		0,255,264,3,46,23,0,256,264,3,42,21,0,257,264,3,44,22,0,258,264,3,34,17,
		0,259,264,3,38,19,0,260,264,3,48,24,0,261,264,3,50,25,0,262,264,3,40,20,
		0,263,246,1,0,0,0,263,247,1,0,0,0,263,248,1,0,0,0,263,249,1,0,0,0,263,
		250,1,0,0,0,263,251,1,0,0,0,263,252,1,0,0,0,263,253,1,0,0,0,263,254,1,
		0,0,0,263,255,1,0,0,0,263,256,1,0,0,0,263,257,1,0,0,0,263,258,1,0,0,0,
		263,259,1,0,0,0,263,260,1,0,0,0,263,261,1,0,0,0,263,262,1,0,0,0,264,21,
		1,0,0,0,265,268,1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,267,266,1,0,0,
		0,268,23,1,0,0,0,269,274,3,64,32,0,270,274,3,78,39,0,271,274,3,84,42,0,
		272,274,3,26,13,0,273,269,1,0,0,0,273,270,1,0,0,0,273,271,1,0,0,0,273,
		272,1,0,0,0,274,25,1,0,0,0,275,276,3,128,64,0,276,27,1,0,0,0,277,278,5,
		22,0,0,278,280,7,0,0,0,279,281,3,128,64,0,280,279,1,0,0,0,280,281,1,0,
		0,0,281,29,1,0,0,0,282,284,5,27,0,0,283,285,3,148,74,0,284,283,1,0,0,0,
		285,286,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,290,1,0,0,0,288,289,
		5,13,0,0,289,291,3,128,64,0,290,288,1,0,0,0,290,291,1,0,0,0,291,300,1,
		0,0,0,292,293,5,27,0,0,293,294,5,5,0,0,294,297,3,128,64,0,295,296,5,13,
		0,0,296,298,3,128,64,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,
		299,282,1,0,0,0,299,292,1,0,0,0,300,31,1,0,0,0,301,303,5,27,0,0,302,304,
		3,148,74,0,303,302,1,0,0,0,304,305,1,0,0,0,305,303,1,0,0,0,305,306,1,0,
		0,0,306,307,1,0,0,0,307,308,5,74,0,0,308,309,3,56,28,0,309,33,1,0,0,0,
		310,312,5,23,0,0,311,313,3,148,74,0,312,311,1,0,0,0,313,314,1,0,0,0,314,
		312,1,0,0,0,314,315,1,0,0,0,315,318,1,0,0,0,316,317,5,13,0,0,317,319,3,
		128,64,0,318,316,1,0,0,0,318,319,1,0,0,0,319,328,1,0,0,0,320,321,5,23,
		0,0,321,322,5,5,0,0,322,325,3,128,64,0,323,324,5,13,0,0,324,326,3,128,
		64,0,325,323,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,310,1,0,0,0,327,
		320,1,0,0,0,328,35,1,0,0,0,329,331,5,23,0,0,330,332,3,148,74,0,331,330,
		1,0,0,0,332,333,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,
		0,335,336,5,74,0,0,336,337,3,56,28,0,337,37,1,0,0,0,338,340,5,24,0,0,339,
		341,3,148,74,0,340,339,1,0,0,0,341,342,1,0,0,0,342,340,1,0,0,0,342,343,
		1,0,0,0,343,346,1,0,0,0,344,345,5,13,0,0,345,347,3,128,64,0,346,344,1,
		0,0,0,346,347,1,0,0,0,347,356,1,0,0,0,348,349,5,24,0,0,349,350,5,5,0,0,
		350,353,3,128,64,0,351,352,5,13,0,0,352,354,3,128,64,0,353,351,1,0,0,0,
		353,354,1,0,0,0,354,356,1,0,0,0,355,338,1,0,0,0,355,348,1,0,0,0,356,39,
		1,0,0,0,357,358,5,13,0,0,358,359,3,128,64,0,359,41,1,0,0,0,360,361,5,34,
		0,0,361,362,3,148,74,0,362,365,3,128,64,0,363,364,5,36,0,0,364,366,5,83,
		0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,369,1,0,0,0,367,368,5,37,0,0,368,
		370,5,83,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,43,1,0,0,0,371,372,5,
		35,0,0,372,375,3,148,74,0,373,374,5,37,0,0,374,376,5,83,0,0,375,373,1,
		0,0,0,375,376,1,0,0,0,376,45,1,0,0,0,377,378,5,26,0,0,378,47,1,0,0,0,379,
		380,5,20,0,0,380,381,3,152,76,0,381,382,5,75,0,0,382,383,3,128,64,0,383,
		49,1,0,0,0,384,385,5,21,0,0,385,386,3,152,76,0,386,387,5,75,0,0,387,388,
		3,128,64,0,388,51,1,0,0,0,389,390,5,80,0,0,390,391,3,24,12,0,391,53,1,
		0,0,0,392,393,5,84,0,0,393,394,5,1,0,0,394,395,3,2,1,0,395,396,5,2,0,0,
		396,55,1,0,0,0,397,398,5,84,0,0,398,399,5,1,0,0,399,400,3,4,2,0,400,401,
		5,2,0,0,401,57,1,0,0,0,402,403,5,84,0,0,403,404,5,1,0,0,404,405,3,6,3,
		0,405,406,5,2,0,0,406,59,1,0,0,0,407,409,5,18,0,0,408,410,3,68,34,0,409,
		408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,5,74,0,0,412,413,5,
		84,0,0,413,418,5,1,0,0,414,415,5,19,0,0,415,416,3,128,64,0,416,417,5,84,
		0,0,417,419,1,0,0,0,418,414,1,0,0,0,418,419,1,0,0,0,419,423,1,0,0,0,420,
		421,3,82,41,0,421,422,5,84,0,0,422,424,1,0,0,0,423,420,1,0,0,0,423,424,
		1,0,0,0,424,426,1,0,0,0,425,427,3,62,31,0,426,425,1,0,0,0,427,428,1,0,
		0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,431,5,2,0,0,431,
		61,1,0,0,0,432,438,5,82,0,0,433,435,5,40,0,0,434,436,3,160,80,0,435,434,
		1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,439,5,43,0,0,438,433,1,0,0,
		0,438,439,1,0,0,0,439,442,1,0,0,0,440,441,5,8,0,0,441,443,3,128,64,0,442,
		440,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,445,5,74,0,0,445,446,3,
		54,27,0,446,63,1,0,0,0,447,448,5,12,0,0,448,65,1,0,0,0,449,450,5,3,0,0,
		450,455,3,68,34,0,451,452,5,40,0,0,452,453,3,88,44,0,453,454,5,43,0,0,
		454,456,1,0,0,0,455,451,1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,459,
		5,74,0,0,458,457,1,0,0,0,458,459,1,0,0,0,459,67,1,0,0,0,460,462,5,73,0,
		0,461,460,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,464,5,81,0,0,464,
		69,1,0,0,0,465,466,5,4,0,0,466,471,3,68,34,0,467,468,5,4,0,0,468,469,5,
		5,0,0,469,471,3,128,64,0,470,465,1,0,0,0,470,467,1,0,0,0,471,71,1,0,0,
		0,472,473,5,6,0,0,473,479,3,68,34,0,474,476,5,40,0,0,475,477,3,160,80,
		0,476,475,1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,480,5,43,0,0,479,
		474,1,0,0,0,479,480,1,0,0,0,480,483,1,0,0,0,481,482,5,7,0,0,482,484,3,
		68,34,0,483,481,1,0,0,0,483,484,1,0,0,0,484,73,1,0,0,0,485,486,5,6,0,0,
		486,490,5,25,0,0,487,491,5,81,0,0,488,489,5,5,0,0,489,491,3,128,64,0,490,
		487,1,0,0,0,490,488,1,0,0,0,491,494,1,0,0,0,492,493,5,32,0,0,493,495,5,
		81,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,498,1,0,0,0,496,497,5,29,0,
		0,497,499,5,83,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,502,1,0,0,0,500,
		501,5,30,0,0,501,503,5,83,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,505,
		1,0,0,0,504,506,5,31,0,0,505,504,1,0,0,0,505,506,1,0,0,0,506,509,1,0,0,
		0,507,508,5,13,0,0,508,510,3,128,64,0,509,507,1,0,0,0,509,510,1,0,0,0,
		510,75,1,0,0,0,511,512,5,23,0,0,512,513,5,25,0,0,513,77,1,0,0,0,514,515,
		3,80,40,0,515,79,1,0,0,0,516,517,5,14,0,0,517,81,1,0,0,0,518,519,5,81,
		0,0,519,522,5,82,0,0,520,522,5,82,0,0,521,518,1,0,0,0,521,520,1,0,0,0,
		522,83,1,0,0,0,523,524,3,152,76,0,524,525,5,75,0,0,525,526,3,128,64,0,
		526,532,1,0,0,0,527,528,3,152,76,0,528,529,3,86,43,0,529,530,3,128,64,
		0,530,532,1,0,0,0,531,523,1,0,0,0,531,527,1,0,0,0,532,85,1,0,0,0,533,534,
		7,1,0,0,534,87,1,0,0,0,535,537,3,92,46,0,536,535,1,0,0,0,537,538,1,0,0,
		0,538,536,1,0,0,0,538,539,1,0,0,0,539,543,1,0,0,0,540,542,3,94,47,0,541,
		540,1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,558,1,
		0,0,0,545,543,1,0,0,0,546,548,3,92,46,0,547,546,1,0,0,0,548,551,1,0,0,
		0,549,547,1,0,0,0,549,550,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,552,
		554,3,94,47,0,553,552,1,0,0,0,554,555,1,0,0,0,555,553,1,0,0,0,555,556,
		1,0,0,0,556,558,1,0,0,0,557,536,1,0,0,0,557,549,1,0,0,0,558,559,1,0,0,
		0,559,560,5,49,0,0,560,561,5,76,0,0,561,563,1,0,0,0,562,557,1,0,0,0,562,
		563,1,0,0,0,563,567,1,0,0,0,564,566,3,94,47,0,565,564,1,0,0,0,566,569,
		1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,579,1,0,0,0,569,567,1,0,0,
		0,570,571,5,77,0,0,571,573,5,76,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,
		575,1,0,0,0,574,576,3,94,47,0,575,574,1,0,0,0,576,577,1,0,0,0,577,575,
		1,0,0,0,577,578,1,0,0,0,578,580,1,0,0,0,579,572,1,0,0,0,579,580,1,0,0,
		0,580,582,1,0,0,0,581,583,3,90,45,0,582,581,1,0,0,0,582,583,1,0,0,0,583,
		670,1,0,0,0,584,586,3,92,46,0,585,584,1,0,0,0,586,587,1,0,0,0,587,585,
		1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,590,5,49,0,0,590,591,5,76,
		0,0,591,593,1,0,0,0,592,585,1,0,0,0,592,593,1,0,0,0,593,597,1,0,0,0,594,
		596,3,92,46,0,595,594,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,
		1,0,0,0,598,603,1,0,0,0,599,597,1,0,0,0,600,602,3,94,47,0,601,600,1,0,
		0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,615,1,0,0,0,605,
		603,1,0,0,0,606,607,5,77,0,0,607,609,5,76,0,0,608,606,1,0,0,0,608,609,
		1,0,0,0,609,611,1,0,0,0,610,612,3,94,47,0,611,610,1,0,0,0,612,613,1,0,
		0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,616,1,0,0,0,615,608,1,0,0,0,615,
		616,1,0,0,0,616,618,1,0,0,0,617,619,3,90,45,0,618,617,1,0,0,0,618,619,
		1,0,0,0,619,670,1,0,0,0,620,622,3,92,46,0,621,620,1,0,0,0,622,623,1,0,
		0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,625,1,0,0,0,625,626,5,49,0,0,626,
		627,5,76,0,0,627,629,1,0,0,0,628,621,1,0,0,0,628,629,1,0,0,0,629,633,1,
		0,0,0,630,632,3,92,46,0,631,630,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,
		0,633,634,1,0,0,0,634,664,1,0,0,0,635,633,1,0,0,0,636,637,5,77,0,0,637,
		639,5,76,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,662,1,0,0,0,640,642,3,
		92,46,0,641,640,1,0,0,0,642,643,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,
		0,644,648,1,0,0,0,645,647,3,94,47,0,646,645,1,0,0,0,647,650,1,0,0,0,648,
		646,1,0,0,0,648,649,1,0,0,0,649,663,1,0,0,0,650,648,1,0,0,0,651,653,3,
		92,46,0,652,651,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,
		0,655,658,1,0,0,0,656,654,1,0,0,0,657,659,3,94,47,0,658,657,1,0,0,0,659,
		660,1,0,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,663,1,0,0,0,662,641,1,
		0,0,0,662,654,1,0,0,0,663,665,1,0,0,0,664,638,1,0,0,0,664,665,1,0,0,0,
		665,667,1,0,0,0,666,668,3,90,45,0,667,666,1,0,0,0,667,668,1,0,0,0,668,
		670,1,0,0,0,669,562,1,0,0,0,669,592,1,0,0,0,669,628,1,0,0,0,670,89,1,0,
		0,0,671,672,5,78,0,0,672,673,3,92,46,0,673,91,1,0,0,0,674,676,3,96,48,
		0,675,677,5,76,0,0,676,675,1,0,0,0,676,677,1,0,0,0,677,679,1,0,0,0,678,
		680,3,102,51,0,679,678,1,0,0,0,679,680,1,0,0,0,680,93,1,0,0,0,681,682,
		3,96,48,0,682,684,3,100,50,0,683,685,5,76,0,0,684,683,1,0,0,0,684,685,
		1,0,0,0,685,687,1,0,0,0,686,688,3,102,51,0,687,686,1,0,0,0,687,688,1,0,
		0,0,688,95,1,0,0,0,689,691,5,81,0,0,690,692,3,98,49,0,691,690,1,0,0,0,
		691,692,1,0,0,0,692,97,1,0,0,0,693,694,5,74,0,0,694,695,3,128,64,0,695,
		99,1,0,0,0,696,697,5,75,0,0,697,698,3,128,64,0,698,101,1,0,0,0,699,700,
		5,48,0,0,700,701,3,128,64,0,701,103,1,0,0,0,702,703,5,8,0,0,703,704,3,
		180,90,0,704,705,5,74,0,0,705,710,3,54,27,0,706,711,3,106,53,0,707,709,
		3,108,54,0,708,707,1,0,0,0,708,709,1,0,0,0,709,711,1,0,0,0,710,706,1,0,
		0,0,710,708,1,0,0,0,711,105,1,0,0,0,712,713,5,9,0,0,713,714,3,180,90,0,
		714,715,5,74,0,0,715,720,3,54,27,0,716,721,3,106,53,0,717,719,3,108,54,
		0,718,717,1,0,0,0,718,719,1,0,0,0,719,721,1,0,0,0,720,716,1,0,0,0,720,
		718,1,0,0,0,721,107,1,0,0,0,722,723,5,10,0,0,723,724,5,74,0,0,724,725,
		3,54,27,0,725,109,1,0,0,0,726,727,5,11,0,0,727,728,3,180,90,0,728,729,
		5,74,0,0,729,731,3,54,27,0,730,732,3,108,54,0,731,730,1,0,0,0,731,732,
		1,0,0,0,732,111,1,0,0,0,733,735,5,41,0,0,734,736,3,174,87,0,735,734,1,
		0,0,0,735,736,1,0,0,0,736,737,1,0,0,0,737,738,5,44,0,0,738,113,1,0,0,0,
		739,745,5,40,0,0,740,741,3,176,88,0,741,743,5,76,0,0,742,744,3,174,87,
		0,743,742,1,0,0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,740,1,0,0,0,745,
		746,1,0,0,0,746,747,1,0,0,0,747,748,5,43,0,0,748,115,1,0,0,0,749,750,5,
		42,0,0,750,751,3,174,87,0,751,752,5,45,0,0,752,117,1,0,0,0,753,755,5,42,
		0,0,754,756,3,120,60,0,755,754,1,0,0,0,755,756,1,0,0,0,756,757,1,0,0,0,
		757,758,5,45,0,0,758,119,1,0,0,0,759,764,3,122,61,0,760,761,5,76,0,0,761,
		763,3,122,61,0,762,760,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,764,765,
		1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,767,769,5,76,0,0,768,767,1,0,0,
		0,768,769,1,0,0,0,769,121,1,0,0,0,770,771,5,78,0,0,771,774,3,142,71,0,
		772,774,3,124,62,0,773,770,1,0,0,0,773,772,1,0,0,0,774,123,1,0,0,0,775,
		776,3,128,64,0,776,777,5,74,0,0,777,778,3,128,64,0,778,125,1,0,0,0,779,
		780,5,77,0,0,780,783,3,142,71,0,781,783,3,128,64,0,782,779,1,0,0,0,782,
		781,1,0,0,0,783,127,1,0,0,0,784,785,3,130,65,0,785,129,1,0,0,0,786,789,
		3,132,66,0,787,788,5,60,0,0,788,790,3,130,65,0,789,787,1,0,0,0,789,790,
		1,0,0,0,790,131,1,0,0,0,791,794,3,134,67,0,792,793,5,59,0,0,793,795,3,
		132,66,0,794,792,1,0,0,0,794,795,1,0,0,0,795,133,1,0,0,0,796,797,5,56,
		0,0,797,800,3,134,67,0,798,800,3,136,68,0,799,796,1,0,0,0,799,798,1,0,
		0,0,800,135,1,0,0,0,801,805,3,140,70,0,802,803,3,138,69,0,803,804,3,136,
		68,0,804,806,1,0,0,0,805,802,1,0,0,0,805,806,1,0,0,0,806,137,1,0,0,0,807,
		822,5,50,0,0,808,822,5,51,0,0,809,822,5,52,0,0,810,822,5,53,0,0,811,822,
		5,54,0,0,812,822,5,55,0,0,813,815,5,56,0,0,814,813,1,0,0,0,814,815,1,0,
		0,0,815,816,1,0,0,0,816,822,5,57,0,0,817,819,5,58,0,0,818,820,5,56,0,0,
		819,818,1,0,0,0,819,820,1,0,0,0,820,822,1,0,0,0,821,807,1,0,0,0,821,808,
		1,0,0,0,821,809,1,0,0,0,821,810,1,0,0,0,821,811,1,0,0,0,821,812,1,0,0,
		0,821,814,1,0,0,0,821,817,1,0,0,0,822,139,1,0,0,0,823,824,3,142,71,0,824,
		141,1,0,0,0,825,826,6,71,-1,0,826,827,3,144,72,0,827,833,1,0,0,0,828,829,
		10,2,0,0,829,830,7,2,0,0,830,832,3,144,72,0,831,828,1,0,0,0,832,835,1,
		0,0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,143,1,0,0,0,835,833,1,0,0,0,
		836,837,6,72,-1,0,837,838,3,146,73,0,838,855,1,0,0,0,839,851,10,2,0,0,
		840,841,5,73,0,0,841,852,3,148,74,0,842,844,5,40,0,0,843,845,3,160,80,
		0,844,843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,852,5,43,0,0,847,
		848,5,41,0,0,848,849,3,172,86,0,849,850,5,44,0,0,850,852,1,0,0,0,851,840,
		1,0,0,0,851,842,1,0,0,0,851,847,1,0,0,0,852,854,1,0,0,0,853,839,1,0,0,
		0,854,857,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,145,1,0,0,0,857,
		855,1,0,0,0,858,867,3,150,75,0,859,867,3,112,56,0,860,867,3,118,59,0,861,
		867,3,148,74,0,862,867,5,15,0,0,863,867,5,16,0,0,864,867,5,17,0,0,865,
		867,5,83,0,0,866,858,1,0,0,0,866,859,1,0,0,0,866,860,1,0,0,0,866,861,1,
		0,0,0,866,862,1,0,0,0,866,863,1,0,0,0,866,864,1,0,0,0,866,865,1,0,0,0,
		867,147,1,0,0,0,868,869,7,3,0,0,869,149,1,0,0,0,870,872,5,82,0,0,871,870,
		1,0,0,0,872,873,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,151,1,0,0,
		0,875,882,3,154,77,0,876,882,3,148,74,0,877,878,5,40,0,0,878,879,3,152,
		76,0,879,880,5,43,0,0,880,882,1,0,0,0,881,875,1,0,0,0,881,876,1,0,0,0,
		881,877,1,0,0,0,882,153,1,0,0,0,883,890,3,156,78,0,884,885,5,73,0,0,885,
		891,3,148,74,0,886,887,5,41,0,0,887,888,3,172,86,0,888,889,5,44,0,0,889,
		891,1,0,0,0,890,884,1,0,0,0,890,886,1,0,0,0,891,155,1,0,0,0,892,893,6,
		78,-1,0,893,894,3,148,74,0,894,912,1,0,0,0,895,908,10,2,0,0,896,897,5,
		73,0,0,897,909,3,148,74,0,898,909,3,158,79,0,899,901,5,40,0,0,900,902,
		3,160,80,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,909,5,43,
		0,0,904,905,5,41,0,0,905,906,3,172,86,0,906,907,5,44,0,0,907,909,1,0,0,
		0,908,896,1,0,0,0,908,898,1,0,0,0,908,899,1,0,0,0,908,904,1,0,0,0,909,
		911,1,0,0,0,910,895,1,0,0,0,911,914,1,0,0,0,912,910,1,0,0,0,912,913,1,
		0,0,0,913,157,1,0,0,0,914,912,1,0,0,0,915,918,5,40,0,0,916,919,3,178,89,
		0,917,919,3,128,64,0,918,916,1,0,0,0,918,917,1,0,0,0,919,920,1,0,0,0,920,
		921,5,43,0,0,921,159,1,0,0,0,922,924,3,162,81,0,923,925,5,76,0,0,924,923,
		1,0,0,0,924,925,1,0,0,0,925,161,1,0,0,0,926,932,3,166,83,0,927,930,3,178,
		89,0,928,930,3,128,64,0,929,927,1,0,0,0,929,928,1,0,0,0,930,932,1,0,0,
		0,931,926,1,0,0,0,931,929,1,0,0,0,932,943,1,0,0,0,933,939,5,76,0,0,934,
		940,3,166,83,0,935,938,3,178,89,0,936,938,3,128,64,0,937,935,1,0,0,0,937,
		936,1,0,0,0,938,940,1,0,0,0,939,934,1,0,0,0,939,937,1,0,0,0,940,942,1,
		0,0,0,941,933,1,0,0,0,942,945,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,
		944,948,1,0,0,0,945,943,1,0,0,0,946,947,5,76,0,0,947,949,3,164,82,0,948,
		946,1,0,0,0,948,949,1,0,0,0,949,952,1,0,0,0,950,952,3,164,82,0,951,931,
		1,0,0,0,951,950,1,0,0,0,952,163,1,0,0,0,953,958,3,170,85,0,954,955,5,76,
		0,0,955,957,3,170,85,0,956,954,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,
		958,959,1,0,0,0,959,970,1,0,0,0,960,958,1,0,0,0,961,962,5,76,0,0,962,967,
		3,168,84,0,963,964,5,76,0,0,964,966,3,168,84,0,965,963,1,0,0,0,966,969,
		1,0,0,0,967,965,1,0,0,0,967,968,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,
		0,970,961,1,0,0,0,970,971,1,0,0,0,971,981,1,0,0,0,972,977,3,168,84,0,973,
		974,5,76,0,0,974,976,3,168,84,0,975,973,1,0,0,0,976,979,1,0,0,0,977,975,
		1,0,0,0,977,978,1,0,0,0,978,981,1,0,0,0,979,977,1,0,0,0,980,953,1,0,0,
		0,980,972,1,0,0,0,981,165,1,0,0,0,982,983,5,77,0,0,983,984,3,128,64,0,
		984,167,1,0,0,0,985,986,3,148,74,0,986,987,5,75,0,0,987,988,3,128,64,0,
		988,992,1,0,0,0,989,990,5,78,0,0,990,992,3,128,64,0,991,985,1,0,0,0,991,
		989,1,0,0,0,992,169,1,0,0,0,993,994,3,148,74,0,994,995,5,75,0,0,995,996,
		3,128,64,0,996,999,1,0,0,0,997,999,3,166,83,0,998,993,1,0,0,0,998,997,
		1,0,0,0,999,171,1,0,0,0,1000,1001,3,180,90,0,1001,173,1,0,0,0,1002,1007,
		3,176,88,0,1003,1004,5,76,0,0,1004,1006,3,176,88,0,1005,1003,1,0,0,0,1006,
		1009,1,0,0,0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,1011,1,0,0,0,1009,
		1007,1,0,0,0,1010,1012,5,76,0,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,
		175,1,0,0,0,1013,1014,5,77,0,0,1014,1017,3,142,71,0,1015,1017,3,180,90,
		0,1016,1013,1,0,0,0,1016,1015,1,0,0,0,1017,177,1,0,0,0,1018,1019,3,148,
		74,0,1019,1020,5,79,0,0,1020,1021,3,128,64,0,1021,179,1,0,0,0,1022,1025,
		3,178,89,0,1023,1025,3,128,64,0,1024,1022,1,0,0,0,1024,1023,1,0,0,0,1025,
		181,1,0,0,0,139,183,188,196,201,206,212,229,233,241,263,267,273,280,286,
		290,297,299,305,314,318,325,327,333,342,346,353,355,365,369,375,409,418,
		423,428,435,438,442,455,458,461,470,476,479,483,490,494,498,502,505,509,
		521,531,538,543,549,555,557,562,567,572,577,579,582,587,592,597,603,608,
		613,615,618,623,628,633,638,643,648,654,660,662,664,667,669,676,679,684,
		687,691,708,710,718,720,731,735,743,745,755,764,768,773,782,789,794,799,
		805,814,819,821,833,844,851,855,866,873,881,890,901,908,912,918,924,929,
		931,937,939,943,948,951,958,967,970,977,980,991,998,1007,1011,1016,1024
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
