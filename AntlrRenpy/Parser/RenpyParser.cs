//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/markd/Documents/GitHub/Ryngine/AntlrRenpy/Parser/RenpyParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RenpyParser : RenpyParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, LABEL=3, JUMP=4, EXPRESSION=5, CALL=6, PASS=7, RETURN=8, 
		WITH=9, MENU=10, TRUE=11, FALSE=12, NONE=13, IF=14, ELIF=15, ELSE=16, 
		LPAR=17, LSQB=18, LBRACE=19, RPAR=20, RSQB=21, RBRACE=22, PLUS=23, MINUS=24, 
		ARROW=25, SLASH=26, DOT=27, COLON=28, EQUALS=29, COMMA=30, STAR=31, DOUBLESTAR=32, 
		COLONEQUAL=33, DOLLAR=34, NAME=35, STRING=36, NUMBER=37, NEWLINE=38, COMMENT=39, 
		WS=40, EXPLICIT_LINE_JOINING=41, ERRORTOKEN=42;
	public const int
		RULE_entire_tree = 0, RULE_statements = 1, RULE_statement = 2, RULE_block_statements = 3, 
		RULE_simple_statements = 4, RULE_python_one_line = 5, RULE_block = 6, 
		RULE_menu = 7, RULE_menu_item = 8, RULE_pass_statement = 9, RULE_label = 10, 
		RULE_label_name = 11, RULE_jump = 12, RULE_call = 13, RULE_return = 14, 
		RULE_return_simple = 15, RULE_say = 16, RULE_assignment = 17, RULE_parameters = 18, 
		RULE_kwds = 19, RULE_param_no_default = 20, RULE_param_with_default = 21, 
		RULE_param = 22, RULE_annotation = 23, RULE_default_assignment = 24, RULE_type_comment = 25, 
		RULE_if_stmt = 26, RULE_elif_stmt = 27, RULE_else_block = 28, RULE_list = 29, 
		RULE_tuple = 30, RULE_set = 31, RULE_dict = 32, RULE_double_starred_kvpairs = 33, 
		RULE_double_starred_kvpair = 34, RULE_kvpair = 35, RULE_star_expression = 36, 
		RULE_expression = 37, RULE_bitwise_or = 38, RULE_sum = 39, RULE_primary = 40, 
		RULE_atom = 41, RULE_strings = 42, RULE_single_target = 43, RULE_single_subscript_attribute_target = 44, 
		RULE_t_primary = 45, RULE_genexp = 46, RULE_arguments = 47, RULE_args = 48, 
		RULE_kwargs = 49, RULE_starred_expression = 50, RULE_kwarg_or_double_starred = 51, 
		RULE_kwarg_or_starred = 52, RULE_slices = 53, RULE_star_named_expressions = 54, 
		RULE_star_named_expression = 55, RULE_assignment_expression = 56, RULE_named_expression = 57;
	public static readonly string[] ruleNames = {
		"entire_tree", "statements", "statement", "block_statements", "simple_statements", 
		"python_one_line", "block", "menu", "menu_item", "pass_statement", "label", 
		"label_name", "jump", "call", "return", "return_simple", "say", "assignment", 
		"parameters", "kwds", "param_no_default", "param_with_default", "param", 
		"annotation", "default_assignment", "type_comment", "if_stmt", "elif_stmt", 
		"else_block", "list", "tuple", "set", "dict", "double_starred_kvpairs", 
		"double_starred_kvpair", "kvpair", "star_expression", "expression", "bitwise_or", 
		"sum", "primary", "atom", "strings", "single_target", "single_subscript_attribute_target", 
		"t_primary", "genexp", "arguments", "args", "kwargs", "starred_expression", 
		"kwarg_or_double_starred", "kwarg_or_starred", "slices", "star_named_expressions", 
		"star_named_expression", "assignment_expression", "named_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'label'", "'jump'", "'expression'", "'call'", "'pass'", 
		"'return'", "'with'", "'menu'", "'True'", "'False'", "'None'", "'if'", 
		"'elif'", "'else'", "'('", "'['", "'{'", "')'", "']'", "'}'", "'+'", "'-'", 
		"'->'", "'/'", "'.'", "':'", "'='", "','", "'*'", "'**'", "':='", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "LABEL", "JUMP", "EXPRESSION", "CALL", "PASS", 
		"RETURN", "WITH", "MENU", "TRUE", "FALSE", "NONE", "IF", "ELIF", "ELSE", 
		"LPAR", "LSQB", "LBRACE", "RPAR", "RSQB", "RBRACE", "PLUS", "MINUS", "ARROW", 
		"SLASH", "DOT", "COLON", "EQUALS", "COMMA", "STAR", "DOUBLESTAR", "COLONEQUAL", 
		"DOLLAR", "NAME", "STRING", "NUMBER", "NEWLINE", "COMMENT", "WS", "EXPLICIT_LINE_JOINING", 
		"ERRORTOKEN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RenpyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RenpyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RenpyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RenpyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Entire_treeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RenpyParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RenpyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RenpyParser.NEWLINE, i);
		}
		public Entire_treeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entire_tree; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterEntire_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitEntire_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntire_tree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entire_treeContext entire_tree() {
		Entire_treeContext _localctx = new Entire_treeContext(Context, State);
		EnterRule(_localctx, 0, RULE_entire_tree);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 120259102168L) != 0)) {
				{
				State = 116;
				statements();
				}
			}

			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 119;
				Match(NEWLINE);
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 125;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 127;
				statement();
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 120259102168L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_statementsContext simple_statements() {
			return GetRuleContext<Simple_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementsContext block_statements() {
			return GetRuleContext<Block_statementsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				simple_statements();
				State = 133;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				block_statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MenuContext menu() {
			return GetRuleContext<MenuContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Block_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementsContext block_statements() {
		Block_statementsContext _localctx = new Block_statementsContext(Context, State);
		EnterRule(_localctx, 6, RULE_block_statements);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MENU:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				menu();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				if_stmt();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 140;
				label();
				State = 141;
				Match(COLON);
				State = 142;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pass_statementContext pass_statement() {
			return GetRuleContext<Pass_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpContext jump() {
			return GetRuleContext<JumpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SayContext say() {
			return GetRuleContext<SayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Python_one_lineContext python_one_line() {
			return GetRuleContext<Python_one_lineContext>(0);
		}
		public Simple_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSimple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSimple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_statementsContext simple_statements() {
		Simple_statementsContext _localctx = new Simple_statementsContext(Context, State);
		EnterRule(_localctx, 8, RULE_simple_statements);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PASS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				pass_statement();
				}
				break;
			case JUMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				jump();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				label();
				}
				break;
			case CALL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 149;
				call();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 150;
				@return();
				}
				break;
			case NAME:
			case STRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 151;
				say();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 152;
				python_one_line();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_one_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(RenpyParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Python_one_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_one_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPython_one_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPython_one_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPython_one_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Python_one_lineContext python_one_line() {
		Python_one_lineContext _localctx = new Python_one_lineContext(Context, State);
		EnterRule(_localctx, 10, RULE_python_one_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(DOLLAR);
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 156;
				assignment();
				}
				break;
			case 2:
				{
				State = 157;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(NEWLINE);
			State = 161;
			Match(INDENT);
			State = 162;
			statements();
			State = 163;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENU() { return GetToken(RenpyParser.MENU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RenpyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RenpyParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SayContext say() {
			return GetRuleContext<SayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext[] menu_item() {
			return GetRuleContexts<Menu_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext menu_item(int i) {
			return GetRuleContext<Menu_itemContext>(i);
		}
		public MenuContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterMenu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitMenu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuContext menu() {
		MenuContext _localctx = new MenuContext(Context, State);
		EnterRule(_localctx, 14, RULE_menu);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(MENU);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT || _la==NAME) {
				{
				State = 166;
				label_name();
				}
			}

			State = 169;
			Match(COLON);
			State = 170;
			Match(NEWLINE);
			State = 171;
			Match(INDENT);
			State = 175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 172;
				say();
				State = 173;
				Match(NEWLINE);
				}
				break;
			}
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 177;
				menu_item();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			State = 182;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Menu_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterMenu_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitMenu_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_itemContext menu_item() {
		Menu_itemContext _localctx = new Menu_itemContext(Context, State);
		EnterRule(_localctx, 16, RULE_menu_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(STRING);
			State = 185;
			Match(COLON);
			State = 186;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pass_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(RenpyParser.PASS, 0); }
		public Pass_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pass_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPass_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPass_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPass_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pass_statementContext pass_statement() {
		Pass_statementContext _localctx = new Pass_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_pass_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(PASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(RenpyParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 20, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(LABEL);
			State = 191;
			label_name();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 192;
				Match(LPAR);
				{
				State = 193;
				parameters();
				}
				State = 194;
				Match(RPAR);
				}
			}

			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 198;
				Match(COLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		public Label_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterLabel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitLabel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_nameContext label_name() {
		Label_nameContext _localctx = new Label_nameContext(Context, State);
		EnterRule(_localctx, 22, RULE_label_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 201;
				Match(DOT);
				}
			}

			State = 204;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(RenpyParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpContext jump() {
		JumpContext _localctx = new JumpContext(Context, State);
		EnterRule(_localctx, 24, RULE_jump);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				Match(JUMP);
				State = 207;
				label_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				Match(JUMP);
				State = 209;
				Match(EXPRESSION);
				State = 210;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(RenpyParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 26, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(CALL);
			State = 214;
			label_name();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 215;
				Match(LPAR);
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 246961420288L) != 0)) {
					{
					State = 216;
					arguments();
					}
				}

				State = 219;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_simpleContext return_simple() {
			return GetRuleContext<Return_simpleContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 28, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			return_simple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_simpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(RenpyParser.RETURN, 0); }
		public Return_simpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_simple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterReturn_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitReturn_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_simple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_simpleContext return_simple() {
		Return_simpleContext _localctx = new Return_simpleContext(Context, State);
		EnterRule(_localctx, 30, RULE_return_simple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		public SayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_say; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SayContext say() {
		SayContext _localctx = new SayContext(Context, State);
		EnterRule(_localctx, 32, RULE_say);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				Match(NAME);
				State = 227;
				Match(STRING);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			single_target();
			State = 232;
			Match(EQUALS);
			State = 233;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext[] param_with_default() {
			return GetRuleContexts<Param_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext param_with_default(int i) {
			return GetRuleContext<Param_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwdsContext kwds() {
			return GetRuleContext<KwdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(RenpyParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext[] param_no_default() {
			return GetRuleContexts<Param_no_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default(int i) {
			return GetRuleContext<Param_no_defaultContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameters);
		int _la;
		try {
			int _alt;
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 257;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						{
						State = 236;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 235;
								param_no_default();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 238;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 243;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NAME) {
							{
							{
							State = 240;
							param_with_default();
							}
							}
							State = 245;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						break;
					case 2:
						{
						{
						State = 249;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 246;
								param_no_default();
								}
								} 
							}
							State = 251;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
						}
						State = 253;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 252;
							param_with_default();
							}
							}
							State = 255;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==NAME );
						}
						}
						break;
					}
					{
					State = 259;
					Match(SLASH);
					State = 260;
					Match(COMMA);
					}
					}
					break;
				}
				State = 267;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 264;
						param_with_default();
						}
						} 
					}
					State = 269;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 272;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 270;
						Match(STAR);
						State = 271;
						Match(COMMA);
						}
					}

					State = 275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 274;
						param_with_default();
						}
						}
						State = 277;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					}
				}

				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 281;
					kwds();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 285;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 284;
						param_no_default();
						}
						}
						State = 287;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					{
					State = 289;
					Match(SLASH);
					State = 290;
					Match(COMMA);
					}
					}
					break;
				}
				State = 297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 294;
						param_no_default();
						}
						} 
					}
					State = 299;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				State = 303;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 300;
						param_with_default();
						}
						} 
					}
					State = 305;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 306;
						Match(STAR);
						State = 307;
						Match(COMMA);
						}
					}

					State = 311;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 310;
						param_with_default();
						}
						}
						State = 313;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					}
				}

				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 317;
					kwds();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 328;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 321;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 320;
						param_no_default();
						}
						}
						State = 323;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					{
					State = 325;
					Match(SLASH);
					State = 326;
					Match(COMMA);
					}
					}
					break;
				}
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 330;
						param_no_default();
						}
						} 
					}
					State = 335;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				}
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 336;
						Match(STAR);
						State = 337;
						Match(COMMA);
						}
					}

					State = 362;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
					case 1:
						{
						{
						State = 341;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 340;
								param_no_default();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 343;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 348;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NAME) {
							{
							{
							State = 345;
							param_with_default();
							}
							}
							State = 350;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						break;
					case 2:
						{
						{
						State = 354;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 351;
								param_no_default();
								}
								} 
							}
							State = 356;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
						}
						State = 358;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 357;
							param_with_default();
							}
							}
							State = 360;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==NAME );
						}
						}
						break;
					}
					}
				}

				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 366;
					kwds();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default() {
			return GetRuleContext<Param_no_defaultContext>(0);
		}
		public KwdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwdsContext kwds() {
		KwdsContext _localctx = new KwdsContext(Context, State);
		EnterRule(_localctx, 38, RULE_kwds);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(DOUBLESTAR);
			State = 372;
			param_no_default();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_no_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_commentContext type_comment() {
			return GetRuleContext<Type_commentContext>(0);
		}
		public Param_no_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_no_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_no_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_no_defaultContext param_no_default() {
		Param_no_defaultContext _localctx = new Param_no_defaultContext(Context, State);
		EnterRule(_localctx, 40, RULE_param_no_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			param();
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 375;
				Match(COMMA);
				}
			}

			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 378;
				type_comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_assignmentContext default_assignment() {
			return GetRuleContext<Default_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_commentContext type_comment() {
			return GetRuleContext<Type_commentContext>(0);
		}
		public Param_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_with_defaultContext param_with_default() {
		Param_with_defaultContext _localctx = new Param_with_defaultContext(Context, State);
		EnterRule(_localctx, 42, RULE_param_with_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			param();
			State = 382;
			default_assignment();
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 383;
				Match(COMMA);
				}
			}

			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 386;
				type_comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 44, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(NAME);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 390;
				annotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 46, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			Match(COLON);
			State = 394;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_assignmentContext default_assignment() {
		Default_assignmentContext _localctx = new Default_assignmentContext(Context, State);
		EnterRule(_localctx, 48, RULE_default_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(EQUALS);
			State = 397;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(RenpyParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Type_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterType_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitType_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_commentContext type_comment() {
		Type_commentContext _localctx = new Type_commentContext(Context, State);
		EnterRule(_localctx, 50, RULE_type_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(ARROW);
			State = 400;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(RenpyParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_stmtContext elif_stmt() {
			return GetRuleContext<Elif_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			Match(IF);
			State = 403;
			named_expression();
			State = 404;
			Match(COLON);
			State = 405;
			block();
			State = 410;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELIF:
				{
				State = 406;
				elif_stmt();
				}
				break;
			case Eof:
			case DEDENT:
			case LABEL:
			case JUMP:
			case CALL:
			case PASS:
			case RETURN:
			case MENU:
			case IF:
			case ELSE:
			case DOLLAR:
			case NAME:
			case STRING:
			case NEWLINE:
				{
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 407;
					else_block();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(RenpyParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_stmtContext elif_stmt() {
			return GetRuleContext<Elif_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public Elif_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterElif_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitElif_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_stmtContext elif_stmt() {
		Elif_stmtContext _localctx = new Elif_stmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_elif_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(ELIF);
			State = 413;
			named_expression();
			State = 414;
			Match(COLON);
			State = 415;
			block();
			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELIF:
				{
				State = 416;
				elif_stmt();
				}
				break;
			case Eof:
			case DEDENT:
			case LABEL:
			case JUMP:
			case CALL:
			case PASS:
			case RETURN:
			case MENU:
			case IF:
			case ELSE:
			case DOLLAR:
			case NAME:
			case STRING:
			case NEWLINE:
				{
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 417;
					else_block();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(RenpyParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 56, RULE_else_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(ELSE);
			State = 423;
			Match(COLON);
			State = 424;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 58, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(LSQB);
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 242666452992L) != 0)) {
				{
				State = 427;
				star_named_expressions();
				}
			}

			State = 430;
			Match(RSQB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression() {
			return GetRuleContext<Star_named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 60, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			Match(LPAR);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 242666452992L) != 0)) {
				{
				State = 433;
				star_named_expression();
				State = 434;
				Match(COMMA);
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 242666452992L) != 0)) {
					{
					State = 435;
					star_named_expressions();
					}
				}

				}
			}

			State = 440;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(RenpyParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(RenpyParser.RBRACE, 0); }
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 62, RULE_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(LBRACE);
			State = 443;
			star_named_expressions();
			State = 444;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(RenpyParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(RenpyParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairsContext double_starred_kvpairs() {
			return GetRuleContext<Double_starred_kvpairsContext>(0);
		}
		public DictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDict(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictContext dict() {
		DictContext _localctx = new DictContext(Context, State);
		EnterRule(_localctx, 64, RULE_dict);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			Match(LBRACE);
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 244813936640L) != 0)) {
				{
				State = 447;
				double_starred_kvpairs();
				}
			}

			State = 450;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_starred_kvpairsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairContext[] double_starred_kvpair() {
			return GetRuleContexts<Double_starred_kvpairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairContext double_starred_kvpair(int i) {
			return GetRuleContext<Double_starred_kvpairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		public Double_starred_kvpairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_starred_kvpairs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDouble_starred_kvpairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDouble_starred_kvpairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_starred_kvpairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_starred_kvpairsContext double_starred_kvpairs() {
		Double_starred_kvpairsContext _localctx = new Double_starred_kvpairsContext(Context, State);
		EnterRule(_localctx, 66, RULE_double_starred_kvpairs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			double_starred_kvpair();
			State = 457;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 453;
					Match(COMMA);
					State = 454;
					double_starred_kvpair();
					}
					} 
				}
				State = 459;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 460;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_starred_kvpairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpairContext kvpair() {
			return GetRuleContext<KvpairContext>(0);
		}
		public Double_starred_kvpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_starred_kvpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDouble_starred_kvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDouble_starred_kvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_starred_kvpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_starred_kvpairContext double_starred_kvpair() {
		Double_starred_kvpairContext _localctx = new Double_starred_kvpairContext(Context, State);
		EnterRule(_localctx, 68, RULE_double_starred_kvpair);
		try {
			State = 466;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 463;
				Match(DOUBLESTAR);
				State = 464;
				sum(0);
				}
				break;
			case TRUE:
			case FALSE:
			case NONE:
			case LSQB:
			case LBRACE:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 465;
				kvpair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		public KvpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpairContext kvpair() {
		KvpairContext _localctx = new KvpairContext(Context, State);
		EnterRule(_localctx, 70, RULE_kvpair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			expression();
			State = 469;
			Match(COLON);
			State = 470;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Star_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_expressionContext star_expression() {
		Star_expressionContext _localctx = new Star_expressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_star_expression);
		try {
			State = 475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472;
				Match(STAR);
				State = 473;
				sum(0);
				}
				break;
			case TRUE:
			case FALSE:
			case NONE:
			case LSQB:
			case LBRACE:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 474;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			bitwise_or();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public Bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_orContext bitwise_or() {
		Bitwise_orContext _localctx = new Bitwise_orContext(Context, State);
		EnterRule(_localctx, 76, RULE_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			sum(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RenpyParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RenpyParser.MINUS, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		return sum(0);
	}

	private SumContext sum(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumContext _localctx = new SumContext(Context, _parentState);
		SumContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_sum, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 482;
			primary(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 489;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sum);
					State = 484;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 485;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 486;
					primary(0);
					}
					} 
				}
				State = 491;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		return primary(0);
	}

	private PrimaryContext primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryContext _localctx = new PrimaryContext(Context, _parentState);
		PrimaryContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 493;
			atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 511;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primary);
					State = 495;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 507;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
						{
						State = 496;
						Match(DOT);
						State = 497;
						Match(NAME);
						}
						break;
					case LPAR:
						{
						State = 498;
						Match(LPAR);
						State = 500;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 246961420288L) != 0)) {
							{
							State = 499;
							arguments();
							}
						}

						State = 502;
						Match(RPAR);
						}
						break;
					case LSQB:
						{
						State = 503;
						Match(LSQB);
						State = 504;
						slices();
						State = 505;
						Match(RSQB);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 513;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictContext dict() {
			return GetRuleContext<DictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(RenpyParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(RenpyParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(RenpyParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RenpyParser.NUMBER, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 82, RULE_atom);
		try {
			State = 522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 514;
				strings();
				}
				break;
			case LSQB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 515;
				list();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 516;
				dict();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 517;
				Match(NAME);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 518;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 519;
				Match(FALSE);
				}
				break;
			case NONE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 520;
				Match(NONE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 8);
				{
				State = 521;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RenpyParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RenpyParser.STRING, i);
		}
		public StringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringsContext strings() {
		StringsContext _localctx = new StringsContext(Context, State);
		EnterRule(_localctx, 84, RULE_strings);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 524;
					Match(STRING);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 527;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
			return GetRuleContext<Single_subscript_attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		public Single_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_targetContext single_target() {
		Single_targetContext _localctx = new Single_targetContext(Context, State);
		EnterRule(_localctx, 86, RULE_single_target);
		try {
			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529;
				single_subscript_attribute_target();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530;
				Match(NAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 531;
				Match(LPAR);
				State = 532;
				single_target();
				State = 533;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_subscript_attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		public Single_subscript_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_subscript_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_subscript_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
		Single_subscript_attribute_targetContext _localctx = new Single_subscript_attribute_targetContext(Context, State);
		EnterRule(_localctx, 88, RULE_single_subscript_attribute_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			t_primary(0);
			State = 544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				{
				State = 538;
				Match(DOT);
				State = 539;
				Match(NAME);
				}
				break;
			case LSQB:
				{
				State = 540;
				Match(LSQB);
				State = 541;
				slices();
				State = 542;
				Match(RSQB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class T_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenexpContext genexp() {
			return GetRuleContext<GenexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public T_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitT_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public T_primaryContext t_primary() {
		return t_primary(0);
	}

	private T_primaryContext t_primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		T_primaryContext _localctx = new T_primaryContext(Context, _parentState);
		T_primaryContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_t_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 547;
			Match(NAME);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 566;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new T_primaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_t_primary);
					State = 549;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 562;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
					case 1:
						{
						State = 550;
						Match(DOT);
						State = 551;
						Match(NAME);
						}
						break;
					case 2:
						{
						State = 552;
						genexp();
						}
						break;
					case 3:
						{
						State = 553;
						Match(LPAR);
						State = 555;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 246961420288L) != 0)) {
							{
							State = 554;
							arguments();
							}
						}

						State = 557;
						Match(RPAR);
						}
						break;
					case 4:
						{
						State = 558;
						Match(LSQB);
						State = 559;
						slices();
						State = 560;
						Match(RSQB);
						}
						break;
					}
					}
					} 
				}
				State = 568;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GenexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GenexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenexpContext genexp() {
		GenexpContext _localctx = new GenexpContext(Context, State);
		EnterRule(_localctx, 92, RULE_genexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			Match(LPAR);
			State = 572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 570;
				assignment_expression();
				}
				break;
			case 2:
				{
				State = 571;
				expression();
				}
				break;
			}
			State = 574;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 94, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			args();
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 577;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext[] starred_expression() {
			return GetRuleContexts<Starred_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression(int i) {
			return GetRuleContext<Starred_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwargsContext kwargs() {
			return GetRuleContext<KwargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext[] assignment_expression() {
			return GetRuleContexts<Assignment_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression(int i) {
			return GetRuleContext<Assignment_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 96, RULE_args);
		try {
			int _alt;
			State = 605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 580;
					starred_expression();
					}
					break;
				case TRUE:
				case FALSE:
				case NONE:
				case LSQB:
				case LBRACE:
				case NAME:
				case STRING:
				case NUMBER:
					{
					State = 583;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
					case 1:
						{
						State = 581;
						assignment_expression();
						}
						break;
					case 2:
						{
						State = 582;
						expression();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 597;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 587;
						Match(COMMA);
						State = 593;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STAR:
							{
							State = 588;
							starred_expression();
							}
							break;
						case TRUE:
						case FALSE:
						case NONE:
						case LSQB:
						case LBRACE:
						case NAME:
						case STRING:
						case NUMBER:
							{
							State = 591;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
							case 1:
								{
								State = 589;
								assignment_expression();
								}
								break;
							case 2:
								{
								State = 590;
								expression();
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 599;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				}
				State = 602;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
				case 1:
					{
					State = 600;
					Match(COMMA);
					State = 601;
					kwargs();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 604;
				kwargs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext[] kwarg_or_starred() {
			return GetRuleContexts<Kwarg_or_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext kwarg_or_starred(int i) {
			return GetRuleContext<Kwarg_or_starredContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext[] kwarg_or_double_starred() {
			return GetRuleContexts<Kwarg_or_double_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext kwarg_or_double_starred(int i) {
			return GetRuleContext<Kwarg_or_double_starredContext>(i);
		}
		public KwargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwargsContext kwargs() {
		KwargsContext _localctx = new KwargsContext(Context, State);
		EnterRule(_localctx, 98, RULE_kwargs);
		try {
			int _alt;
			State = 634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 607;
				kwarg_or_starred();
				State = 612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 608;
						Match(COMMA);
						State = 609;
						kwarg_or_starred();
						}
						} 
					}
					State = 614;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
				}
				State = 624;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
				case 1:
					{
					State = 615;
					Match(COMMA);
					State = 616;
					kwarg_or_double_starred();
					State = 621;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 617;
							Match(COMMA);
							State = 618;
							kwarg_or_double_starred();
							}
							} 
						}
						State = 623;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 626;
				kwarg_or_double_starred();
				State = 631;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 627;
						Match(COMMA);
						State = 628;
						kwarg_or_double_starred();
						}
						} 
					}
					State = 633;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Starred_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Starred_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_starred_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStarred_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Starred_expressionContext starred_expression() {
		Starred_expressionContext _localctx = new Starred_expressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_starred_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(STAR);
			State = 637;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_double_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		public Kwarg_or_double_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_double_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_double_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_double_starredContext kwarg_or_double_starred() {
		Kwarg_or_double_starredContext _localctx = new Kwarg_or_double_starredContext(Context, State);
		EnterRule(_localctx, 102, RULE_kwarg_or_double_starred);
		try {
			State = 644;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 639;
				Match(NAME);
				State = 640;
				Match(EQUALS);
				State = 641;
				expression();
				}
				break;
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 642;
				Match(DOUBLESTAR);
				State = 643;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression() {
			return GetRuleContext<Starred_expressionContext>(0);
		}
		public Kwarg_or_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_starredContext kwarg_or_starred() {
		Kwarg_or_starredContext _localctx = new Kwarg_or_starredContext(Context, State);
		EnterRule(_localctx, 104, RULE_kwarg_or_starred);
		try {
			State = 650;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 646;
				Match(NAME);
				State = 647;
				Match(EQUALS);
				State = 648;
				expression();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 649;
				starred_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public SlicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlicesContext slices() {
		SlicesContext _localctx = new SlicesContext(Context, State);
		EnterRule(_localctx, 106, RULE_slices);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			named_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext[] star_named_expression() {
			return GetRuleContexts<Star_named_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression(int i) {
			return GetRuleContext<Star_named_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		public Star_named_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionsContext star_named_expressions() {
		Star_named_expressionsContext _localctx = new Star_named_expressionsContext(Context, State);
		EnterRule(_localctx, 108, RULE_star_named_expressions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			star_named_expression();
			State = 659;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 655;
					Match(COMMA);
					State = 656;
					star_named_expression();
					}
					} 
				}
				State = 661;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			State = 663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 662;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public Star_named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionContext star_named_expression() {
		Star_named_expressionContext _localctx = new Star_named_expressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_star_named_expression);
		try {
			State = 668;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 665;
				Match(STAR);
				State = 666;
				sum(0);
				}
				break;
			case TRUE:
			case FALSE:
			case NONE:
			case LSQB:
			case LBRACE:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 667;
				named_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONEQUAL() { return GetToken(RenpyParser.COLONEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			Match(NAME);
			State = 671;
			Match(COLONEQUAL);
			State = 672;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_expressionContext named_expression() {
		Named_expressionContext _localctx = new Named_expressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_named_expression);
		try {
			State = 676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 674;
				assignment_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 675;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 39: return sum_sempred((SumContext)_localctx, predIndex);
		case 40: return primary_sempred((PrimaryContext)_localctx, predIndex);
		case 45: return t_primary_sempred((T_primaryContext)_localctx, predIndex);
		}
		return true;
	}
	private bool sum_sempred(SumContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool t_primary_sempred(T_primaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,42,679,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,1,0,3,0,118,8,0,1,0,5,0,121,8,0,10,0,12,0,124,9,0,1,0,1,0,1,
		1,4,1,129,8,1,11,1,12,1,130,1,2,1,2,1,2,1,2,3,2,137,8,2,1,3,1,3,1,3,1,
		3,1,3,1,3,3,3,145,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,154,8,4,1,5,1,5,
		1,5,3,5,159,8,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,3,7,168,8,7,1,7,1,7,1,7,1,
		7,1,7,1,7,3,7,176,8,7,1,7,4,7,179,8,7,11,7,12,7,180,1,7,1,7,1,8,1,8,1,
		8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,197,8,10,1,10,3,10,200,
		8,10,1,11,3,11,203,8,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,212,8,
		12,1,13,1,13,1,13,1,13,3,13,218,8,13,1,13,3,13,221,8,13,1,14,1,14,1,15,
		1,15,1,16,1,16,1,16,3,16,230,8,16,1,17,1,17,1,17,1,17,1,18,4,18,237,8,
		18,11,18,12,18,238,1,18,5,18,242,8,18,10,18,12,18,245,9,18,1,18,5,18,248,
		8,18,10,18,12,18,251,9,18,1,18,4,18,254,8,18,11,18,12,18,255,3,18,258,
		8,18,1,18,1,18,1,18,3,18,263,8,18,1,18,5,18,266,8,18,10,18,12,18,269,9,
		18,1,18,1,18,3,18,273,8,18,1,18,4,18,276,8,18,11,18,12,18,277,3,18,280,
		8,18,1,18,3,18,283,8,18,1,18,4,18,286,8,18,11,18,12,18,287,1,18,1,18,1,
		18,3,18,293,8,18,1,18,5,18,296,8,18,10,18,12,18,299,9,18,1,18,5,18,302,
		8,18,10,18,12,18,305,9,18,1,18,1,18,3,18,309,8,18,1,18,4,18,312,8,18,11,
		18,12,18,313,3,18,316,8,18,1,18,3,18,319,8,18,1,18,4,18,322,8,18,11,18,
		12,18,323,1,18,1,18,1,18,3,18,329,8,18,1,18,5,18,332,8,18,10,18,12,18,
		335,9,18,1,18,1,18,3,18,339,8,18,1,18,4,18,342,8,18,11,18,12,18,343,1,
		18,5,18,347,8,18,10,18,12,18,350,9,18,1,18,5,18,353,8,18,10,18,12,18,356,
		9,18,1,18,4,18,359,8,18,11,18,12,18,360,3,18,363,8,18,3,18,365,8,18,1,
		18,3,18,368,8,18,3,18,370,8,18,1,19,1,19,1,19,1,20,1,20,3,20,377,8,20,
		1,20,3,20,380,8,20,1,21,1,21,1,21,3,21,385,8,21,1,21,3,21,388,8,21,1,22,
		1,22,3,22,392,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,
		26,1,26,1,26,1,26,1,26,3,26,409,8,26,3,26,411,8,26,1,27,1,27,1,27,1,27,
		1,27,1,27,3,27,419,8,27,3,27,421,8,27,1,28,1,28,1,28,1,28,1,29,1,29,3,
		29,429,8,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,437,8,30,3,30,439,8,30,
		1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,3,32,449,8,32,1,32,1,32,1,33,1,
		33,1,33,5,33,456,8,33,10,33,12,33,459,9,33,1,33,3,33,462,8,33,1,34,1,34,
		1,34,3,34,467,8,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,3,36,476,8,36,1,
		37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,5,39,488,8,39,10,39,12,
		39,491,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,501,8,40,1,40,
		1,40,1,40,1,40,1,40,3,40,508,8,40,5,40,510,8,40,10,40,12,40,513,9,40,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,523,8,41,1,42,4,42,526,8,42,
		11,42,12,42,527,1,43,1,43,1,43,1,43,1,43,1,43,3,43,536,8,43,1,44,1,44,
		1,44,1,44,1,44,1,44,1,44,3,44,545,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,
		45,1,45,1,45,3,45,556,8,45,1,45,1,45,1,45,1,45,1,45,3,45,563,8,45,5,45,
		565,8,45,10,45,12,45,568,9,45,1,46,1,46,1,46,3,46,573,8,46,1,46,1,46,1,
		47,1,47,3,47,579,8,47,1,48,1,48,1,48,3,48,584,8,48,3,48,586,8,48,1,48,
		1,48,1,48,1,48,3,48,592,8,48,3,48,594,8,48,5,48,596,8,48,10,48,12,48,599,
		9,48,1,48,1,48,3,48,603,8,48,1,48,3,48,606,8,48,1,49,1,49,1,49,5,49,611,
		8,49,10,49,12,49,614,9,49,1,49,1,49,1,49,1,49,5,49,620,8,49,10,49,12,49,
		623,9,49,3,49,625,8,49,1,49,1,49,1,49,5,49,630,8,49,10,49,12,49,633,9,
		49,3,49,635,8,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,3,51,645,8,51,
		1,52,1,52,1,52,1,52,3,52,651,8,52,1,53,1,53,1,54,1,54,1,54,5,54,658,8,
		54,10,54,12,54,661,9,54,1,54,3,54,664,8,54,1,55,1,55,1,55,3,55,669,8,55,
		1,56,1,56,1,56,1,56,1,57,1,57,3,57,677,8,57,1,57,0,3,78,80,90,58,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,0,1,1,0,23,24,733,0,117,1,0,0,0,2,128,1,0,
		0,0,4,136,1,0,0,0,6,144,1,0,0,0,8,153,1,0,0,0,10,155,1,0,0,0,12,160,1,
		0,0,0,14,165,1,0,0,0,16,184,1,0,0,0,18,188,1,0,0,0,20,190,1,0,0,0,22,202,
		1,0,0,0,24,211,1,0,0,0,26,213,1,0,0,0,28,222,1,0,0,0,30,224,1,0,0,0,32,
		229,1,0,0,0,34,231,1,0,0,0,36,369,1,0,0,0,38,371,1,0,0,0,40,374,1,0,0,
		0,42,381,1,0,0,0,44,389,1,0,0,0,46,393,1,0,0,0,48,396,1,0,0,0,50,399,1,
		0,0,0,52,402,1,0,0,0,54,412,1,0,0,0,56,422,1,0,0,0,58,426,1,0,0,0,60,432,
		1,0,0,0,62,442,1,0,0,0,64,446,1,0,0,0,66,452,1,0,0,0,68,466,1,0,0,0,70,
		468,1,0,0,0,72,475,1,0,0,0,74,477,1,0,0,0,76,479,1,0,0,0,78,481,1,0,0,
		0,80,492,1,0,0,0,82,522,1,0,0,0,84,525,1,0,0,0,86,535,1,0,0,0,88,537,1,
		0,0,0,90,546,1,0,0,0,92,569,1,0,0,0,94,576,1,0,0,0,96,605,1,0,0,0,98,634,
		1,0,0,0,100,636,1,0,0,0,102,644,1,0,0,0,104,650,1,0,0,0,106,652,1,0,0,
		0,108,654,1,0,0,0,110,668,1,0,0,0,112,670,1,0,0,0,114,676,1,0,0,0,116,
		118,3,2,1,0,117,116,1,0,0,0,117,118,1,0,0,0,118,122,1,0,0,0,119,121,5,
		38,0,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,
		123,125,1,0,0,0,124,122,1,0,0,0,125,126,5,0,0,1,126,1,1,0,0,0,127,129,
		3,4,2,0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,
		0,131,3,1,0,0,0,132,133,3,8,4,0,133,134,5,38,0,0,134,137,1,0,0,0,135,137,
		3,6,3,0,136,132,1,0,0,0,136,135,1,0,0,0,137,5,1,0,0,0,138,145,3,14,7,0,
		139,145,3,52,26,0,140,141,3,20,10,0,141,142,5,28,0,0,142,143,3,12,6,0,
		143,145,1,0,0,0,144,138,1,0,0,0,144,139,1,0,0,0,144,140,1,0,0,0,145,7,
		1,0,0,0,146,154,3,18,9,0,147,154,3,24,12,0,148,154,3,20,10,0,149,154,3,
		26,13,0,150,154,3,28,14,0,151,154,3,32,16,0,152,154,3,10,5,0,153,146,1,
		0,0,0,153,147,1,0,0,0,153,148,1,0,0,0,153,149,1,0,0,0,153,150,1,0,0,0,
		153,151,1,0,0,0,153,152,1,0,0,0,154,9,1,0,0,0,155,158,5,34,0,0,156,159,
		3,34,17,0,157,159,3,74,37,0,158,156,1,0,0,0,158,157,1,0,0,0,159,11,1,0,
		0,0,160,161,5,38,0,0,161,162,5,1,0,0,162,163,3,2,1,0,163,164,5,2,0,0,164,
		13,1,0,0,0,165,167,5,10,0,0,166,168,3,22,11,0,167,166,1,0,0,0,167,168,
		1,0,0,0,168,169,1,0,0,0,169,170,5,28,0,0,170,171,5,38,0,0,171,175,5,1,
		0,0,172,173,3,32,16,0,173,174,5,38,0,0,174,176,1,0,0,0,175,172,1,0,0,0,
		175,176,1,0,0,0,176,178,1,0,0,0,177,179,3,16,8,0,178,177,1,0,0,0,179,180,
		1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,183,5,2,0,
		0,183,15,1,0,0,0,184,185,5,36,0,0,185,186,5,28,0,0,186,187,3,12,6,0,187,
		17,1,0,0,0,188,189,5,7,0,0,189,19,1,0,0,0,190,191,5,3,0,0,191,196,3,22,
		11,0,192,193,5,17,0,0,193,194,3,36,18,0,194,195,5,20,0,0,195,197,1,0,0,
		0,196,192,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,200,5,28,0,0,199,
		198,1,0,0,0,199,200,1,0,0,0,200,21,1,0,0,0,201,203,5,27,0,0,202,201,1,
		0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,205,5,35,0,0,205,23,1,0,0,0,
		206,207,5,4,0,0,207,212,3,22,11,0,208,209,5,4,0,0,209,210,5,5,0,0,210,
		212,3,74,37,0,211,206,1,0,0,0,211,208,1,0,0,0,212,25,1,0,0,0,213,214,5,
		6,0,0,214,220,3,22,11,0,215,217,5,17,0,0,216,218,3,94,47,0,217,216,1,0,
		0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,221,5,20,0,0,220,215,1,0,0,0,220,
		221,1,0,0,0,221,27,1,0,0,0,222,223,3,30,15,0,223,29,1,0,0,0,224,225,5,
		8,0,0,225,31,1,0,0,0,226,227,5,35,0,0,227,230,5,36,0,0,228,230,5,36,0,
		0,229,226,1,0,0,0,229,228,1,0,0,0,230,33,1,0,0,0,231,232,3,86,43,0,232,
		233,5,29,0,0,233,234,3,74,37,0,234,35,1,0,0,0,235,237,3,40,20,0,236,235,
		1,0,0,0,237,238,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,243,1,0,0,
		0,240,242,3,42,21,0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,
		244,1,0,0,0,244,258,1,0,0,0,245,243,1,0,0,0,246,248,3,40,20,0,247,246,
		1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,253,1,0,0,
		0,251,249,1,0,0,0,252,254,3,42,21,0,253,252,1,0,0,0,254,255,1,0,0,0,255,
		253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,236,1,0,0,0,257,249,1,
		0,0,0,258,259,1,0,0,0,259,260,5,26,0,0,260,261,5,30,0,0,261,263,1,0,0,
		0,262,257,1,0,0,0,262,263,1,0,0,0,263,267,1,0,0,0,264,266,3,42,21,0,265,
		264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,279,1,
		0,0,0,269,267,1,0,0,0,270,271,5,31,0,0,271,273,5,30,0,0,272,270,1,0,0,
		0,272,273,1,0,0,0,273,275,1,0,0,0,274,276,3,42,21,0,275,274,1,0,0,0,276,
		277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,280,1,0,0,0,279,272,1,
		0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,283,3,38,19,0,282,281,1,0,0,
		0,282,283,1,0,0,0,283,370,1,0,0,0,284,286,3,40,20,0,285,284,1,0,0,0,286,
		287,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,290,5,
		26,0,0,290,291,5,30,0,0,291,293,1,0,0,0,292,285,1,0,0,0,292,293,1,0,0,
		0,293,297,1,0,0,0,294,296,3,40,20,0,295,294,1,0,0,0,296,299,1,0,0,0,297,
		295,1,0,0,0,297,298,1,0,0,0,298,303,1,0,0,0,299,297,1,0,0,0,300,302,3,
		42,21,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,
		0,304,315,1,0,0,0,305,303,1,0,0,0,306,307,5,31,0,0,307,309,5,30,0,0,308,
		306,1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,312,3,42,21,0,311,310,
		1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,
		0,315,308,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,319,3,38,19,0,318,
		317,1,0,0,0,318,319,1,0,0,0,319,370,1,0,0,0,320,322,3,40,20,0,321,320,
		1,0,0,0,322,323,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,325,1,0,0,
		0,325,326,5,26,0,0,326,327,5,30,0,0,327,329,1,0,0,0,328,321,1,0,0,0,328,
		329,1,0,0,0,329,333,1,0,0,0,330,332,3,40,20,0,331,330,1,0,0,0,332,335,
		1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,364,1,0,0,0,335,333,1,0,0,
		0,336,337,5,31,0,0,337,339,5,30,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,
		362,1,0,0,0,340,342,3,40,20,0,341,340,1,0,0,0,342,343,1,0,0,0,343,341,
		1,0,0,0,343,344,1,0,0,0,344,348,1,0,0,0,345,347,3,42,21,0,346,345,1,0,
		0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,363,1,0,0,0,350,
		348,1,0,0,0,351,353,3,40,20,0,352,351,1,0,0,0,353,356,1,0,0,0,354,352,
		1,0,0,0,354,355,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,357,359,3,42,21,
		0,358,357,1,0,0,0,359,360,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,
		363,1,0,0,0,362,341,1,0,0,0,362,354,1,0,0,0,363,365,1,0,0,0,364,338,1,
		0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,368,3,38,19,0,367,366,1,0,0,
		0,367,368,1,0,0,0,368,370,1,0,0,0,369,262,1,0,0,0,369,292,1,0,0,0,369,
		328,1,0,0,0,370,37,1,0,0,0,371,372,5,32,0,0,372,373,3,40,20,0,373,39,1,
		0,0,0,374,376,3,44,22,0,375,377,5,30,0,0,376,375,1,0,0,0,376,377,1,0,0,
		0,377,379,1,0,0,0,378,380,3,50,25,0,379,378,1,0,0,0,379,380,1,0,0,0,380,
		41,1,0,0,0,381,382,3,44,22,0,382,384,3,48,24,0,383,385,5,30,0,0,384,383,
		1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,388,3,50,25,0,387,386,1,0,
		0,0,387,388,1,0,0,0,388,43,1,0,0,0,389,391,5,35,0,0,390,392,3,46,23,0,
		391,390,1,0,0,0,391,392,1,0,0,0,392,45,1,0,0,0,393,394,5,28,0,0,394,395,
		3,74,37,0,395,47,1,0,0,0,396,397,5,29,0,0,397,398,3,74,37,0,398,49,1,0,
		0,0,399,400,5,25,0,0,400,401,3,74,37,0,401,51,1,0,0,0,402,403,5,14,0,0,
		403,404,3,114,57,0,404,405,5,28,0,0,405,410,3,12,6,0,406,411,3,54,27,0,
		407,409,3,56,28,0,408,407,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,
		406,1,0,0,0,410,408,1,0,0,0,411,53,1,0,0,0,412,413,5,15,0,0,413,414,3,
		114,57,0,414,415,5,28,0,0,415,420,3,12,6,0,416,421,3,54,27,0,417,419,3,
		56,28,0,418,417,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,416,1,0,0,
		0,420,418,1,0,0,0,421,55,1,0,0,0,422,423,5,16,0,0,423,424,5,28,0,0,424,
		425,3,12,6,0,425,57,1,0,0,0,426,428,5,18,0,0,427,429,3,108,54,0,428,427,
		1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,431,5,21,0,0,431,59,1,0,0,
		0,432,438,5,17,0,0,433,434,3,110,55,0,434,436,5,30,0,0,435,437,3,108,54,
		0,436,435,1,0,0,0,436,437,1,0,0,0,437,439,1,0,0,0,438,433,1,0,0,0,438,
		439,1,0,0,0,439,440,1,0,0,0,440,441,5,20,0,0,441,61,1,0,0,0,442,443,5,
		19,0,0,443,444,3,108,54,0,444,445,5,22,0,0,445,63,1,0,0,0,446,448,5,19,
		0,0,447,449,3,66,33,0,448,447,1,0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,
		450,451,5,22,0,0,451,65,1,0,0,0,452,457,3,68,34,0,453,454,5,30,0,0,454,
		456,3,68,34,0,455,453,1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,
		1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,460,462,5,30,0,0,461,460,1,0,0,
		0,461,462,1,0,0,0,462,67,1,0,0,0,463,464,5,32,0,0,464,467,3,78,39,0,465,
		467,3,70,35,0,466,463,1,0,0,0,466,465,1,0,0,0,467,69,1,0,0,0,468,469,3,
		74,37,0,469,470,5,28,0,0,470,471,3,74,37,0,471,71,1,0,0,0,472,473,5,31,
		0,0,473,476,3,78,39,0,474,476,3,74,37,0,475,472,1,0,0,0,475,474,1,0,0,
		0,476,73,1,0,0,0,477,478,3,76,38,0,478,75,1,0,0,0,479,480,3,78,39,0,480,
		77,1,0,0,0,481,482,6,39,-1,0,482,483,3,80,40,0,483,489,1,0,0,0,484,485,
		10,2,0,0,485,486,7,0,0,0,486,488,3,80,40,0,487,484,1,0,0,0,488,491,1,0,
		0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,79,1,0,0,0,491,489,1,0,0,0,492,
		493,6,40,-1,0,493,494,3,82,41,0,494,511,1,0,0,0,495,507,10,2,0,0,496,497,
		5,27,0,0,497,508,5,35,0,0,498,500,5,17,0,0,499,501,3,94,47,0,500,499,1,
		0,0,0,500,501,1,0,0,0,501,502,1,0,0,0,502,508,5,20,0,0,503,504,5,18,0,
		0,504,505,3,106,53,0,505,506,5,21,0,0,506,508,1,0,0,0,507,496,1,0,0,0,
		507,498,1,0,0,0,507,503,1,0,0,0,508,510,1,0,0,0,509,495,1,0,0,0,510,513,
		1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,81,1,0,0,0,513,511,1,0,0,0,
		514,523,3,84,42,0,515,523,3,58,29,0,516,523,3,64,32,0,517,523,5,35,0,0,
		518,523,5,11,0,0,519,523,5,12,0,0,520,523,5,13,0,0,521,523,5,37,0,0,522,
		514,1,0,0,0,522,515,1,0,0,0,522,516,1,0,0,0,522,517,1,0,0,0,522,518,1,
		0,0,0,522,519,1,0,0,0,522,520,1,0,0,0,522,521,1,0,0,0,523,83,1,0,0,0,524,
		526,5,36,0,0,525,524,1,0,0,0,526,527,1,0,0,0,527,525,1,0,0,0,527,528,1,
		0,0,0,528,85,1,0,0,0,529,536,3,88,44,0,530,536,5,35,0,0,531,532,5,17,0,
		0,532,533,3,86,43,0,533,534,5,20,0,0,534,536,1,0,0,0,535,529,1,0,0,0,535,
		530,1,0,0,0,535,531,1,0,0,0,536,87,1,0,0,0,537,544,3,90,45,0,538,539,5,
		27,0,0,539,545,5,35,0,0,540,541,5,18,0,0,541,542,3,106,53,0,542,543,5,
		21,0,0,543,545,1,0,0,0,544,538,1,0,0,0,544,540,1,0,0,0,545,89,1,0,0,0,
		546,547,6,45,-1,0,547,548,5,35,0,0,548,566,1,0,0,0,549,562,10,2,0,0,550,
		551,5,27,0,0,551,563,5,35,0,0,552,563,3,92,46,0,553,555,5,17,0,0,554,556,
		3,94,47,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,563,5,20,
		0,0,558,559,5,18,0,0,559,560,3,106,53,0,560,561,5,21,0,0,561,563,1,0,0,
		0,562,550,1,0,0,0,562,552,1,0,0,0,562,553,1,0,0,0,562,558,1,0,0,0,563,
		565,1,0,0,0,564,549,1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,
		0,0,0,567,91,1,0,0,0,568,566,1,0,0,0,569,572,5,17,0,0,570,573,3,112,56,
		0,571,573,3,74,37,0,572,570,1,0,0,0,572,571,1,0,0,0,573,574,1,0,0,0,574,
		575,5,20,0,0,575,93,1,0,0,0,576,578,3,96,48,0,577,579,5,30,0,0,578,577,
		1,0,0,0,578,579,1,0,0,0,579,95,1,0,0,0,580,586,3,100,50,0,581,584,3,112,
		56,0,582,584,3,74,37,0,583,581,1,0,0,0,583,582,1,0,0,0,584,586,1,0,0,0,
		585,580,1,0,0,0,585,583,1,0,0,0,586,597,1,0,0,0,587,593,5,30,0,0,588,594,
		3,100,50,0,589,592,3,112,56,0,590,592,3,74,37,0,591,589,1,0,0,0,591,590,
		1,0,0,0,592,594,1,0,0,0,593,588,1,0,0,0,593,591,1,0,0,0,594,596,1,0,0,
		0,595,587,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,
		602,1,0,0,0,599,597,1,0,0,0,600,601,5,30,0,0,601,603,3,98,49,0,602,600,
		1,0,0,0,602,603,1,0,0,0,603,606,1,0,0,0,604,606,3,98,49,0,605,585,1,0,
		0,0,605,604,1,0,0,0,606,97,1,0,0,0,607,612,3,104,52,0,608,609,5,30,0,0,
		609,611,3,104,52,0,610,608,1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,
		613,1,0,0,0,613,624,1,0,0,0,614,612,1,0,0,0,615,616,5,30,0,0,616,621,3,
		102,51,0,617,618,5,30,0,0,618,620,3,102,51,0,619,617,1,0,0,0,620,623,1,
		0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,625,1,0,0,0,623,621,1,0,0,0,
		624,615,1,0,0,0,624,625,1,0,0,0,625,635,1,0,0,0,626,631,3,102,51,0,627,
		628,5,30,0,0,628,630,3,102,51,0,629,627,1,0,0,0,630,633,1,0,0,0,631,629,
		1,0,0,0,631,632,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,634,607,1,0,0,
		0,634,626,1,0,0,0,635,99,1,0,0,0,636,637,5,31,0,0,637,638,3,74,37,0,638,
		101,1,0,0,0,639,640,5,35,0,0,640,641,5,29,0,0,641,645,3,74,37,0,642,643,
		5,32,0,0,643,645,3,74,37,0,644,639,1,0,0,0,644,642,1,0,0,0,645,103,1,0,
		0,0,646,647,5,35,0,0,647,648,5,29,0,0,648,651,3,74,37,0,649,651,3,100,
		50,0,650,646,1,0,0,0,650,649,1,0,0,0,651,105,1,0,0,0,652,653,3,114,57,
		0,653,107,1,0,0,0,654,659,3,110,55,0,655,656,5,30,0,0,656,658,3,110,55,
		0,657,655,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,
		663,1,0,0,0,661,659,1,0,0,0,662,664,5,30,0,0,663,662,1,0,0,0,663,664,1,
		0,0,0,664,109,1,0,0,0,665,666,5,31,0,0,666,669,3,78,39,0,667,669,3,114,
		57,0,668,665,1,0,0,0,668,667,1,0,0,0,669,111,1,0,0,0,670,671,5,35,0,0,
		671,672,5,33,0,0,672,673,3,74,37,0,673,113,1,0,0,0,674,677,3,112,56,0,
		675,677,3,74,37,0,676,674,1,0,0,0,676,675,1,0,0,0,677,115,1,0,0,0,96,117,
		122,130,136,144,153,158,167,175,180,196,199,202,211,217,220,229,238,243,
		249,255,257,262,267,272,277,279,282,287,292,297,303,308,313,315,318,323,
		328,333,338,343,348,354,360,362,364,367,369,376,379,384,387,391,408,410,
		418,420,428,436,438,448,457,461,466,475,489,500,507,511,522,527,535,544,
		555,562,566,572,578,583,585,591,593,597,602,605,612,621,624,631,634,644,
		650,659,663,668,676
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
