//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/markd/Documents/GitHub/Ryngine/AntlrRenpy/Parser/RenpyParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RenpyParser : RenpyParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, LABEL=3, JUMP=4, EXPRESSION=5, CALL=6, PASS=7, RETURN=8, 
		WITH=9, MENU=10, TRUE=11, FALSE=12, NONE=13, IF=14, ELIF=15, ELSE=16, 
		LPAR=17, LSQB=18, LBRACE=19, RPAR=20, RSQB=21, RBRACE=22, PLUS=23, MINUS=24, 
		ARROW=25, SLASH=26, DOT=27, COLON=28, EQUALS=29, COMMA=30, STAR=31, DOUBLESTAR=32, 
		COLONEQUAL=33, NAME=34, STRING=35, NUMBER=36, NEWLINE=37, COMMENT=38, 
		WS=39, EXPLICIT_LINE_JOINING=40, ERRORTOKEN=41;
	public const int
		RULE_entire_tree = 0, RULE_statements = 1, RULE_statement = 2, RULE_block_statements = 3, 
		RULE_simple_statements = 4, RULE_block = 5, RULE_menu = 6, RULE_menu_item = 7, 
		RULE_pass_statement = 8, RULE_label = 9, RULE_label_name = 10, RULE_jump = 11, 
		RULE_call = 12, RULE_return = 13, RULE_return_simple = 14, RULE_say = 15, 
		RULE_assignment = 16, RULE_parameters = 17, RULE_kwds = 18, RULE_param_no_default = 19, 
		RULE_param_with_default = 20, RULE_param = 21, RULE_annotation = 22, RULE_default_assignment = 23, 
		RULE_type_comment = 24, RULE_if_stmt = 25, RULE_elif_stmt = 26, RULE_else_block = 27, 
		RULE_list = 28, RULE_tuple = 29, RULE_set = 30, RULE_dict = 31, RULE_double_starred_kvpairs = 32, 
		RULE_double_starred_kvpair = 33, RULE_kvpair = 34, RULE_star_expression = 35, 
		RULE_expression = 36, RULE_bitwise_or = 37, RULE_sum = 38, RULE_primary = 39, 
		RULE_atom = 40, RULE_strings = 41, RULE_single_target = 42, RULE_single_subscript_attribute_target = 43, 
		RULE_t_primary = 44, RULE_genexp = 45, RULE_arguments = 46, RULE_args = 47, 
		RULE_kwargs = 48, RULE_starred_expression = 49, RULE_kwarg_or_double_starred = 50, 
		RULE_kwarg_or_starred = 51, RULE_slices = 52, RULE_star_named_expressions = 53, 
		RULE_star_named_expression = 54, RULE_assignment_expression = 55, RULE_named_expression = 56;
	public static readonly string[] ruleNames = {
		"entire_tree", "statements", "statement", "block_statements", "simple_statements", 
		"block", "menu", "menu_item", "pass_statement", "label", "label_name", 
		"jump", "call", "return", "return_simple", "say", "assignment", "parameters", 
		"kwds", "param_no_default", "param_with_default", "param", "annotation", 
		"default_assignment", "type_comment", "if_stmt", "elif_stmt", "else_block", 
		"list", "tuple", "set", "dict", "double_starred_kvpairs", "double_starred_kvpair", 
		"kvpair", "star_expression", "expression", "bitwise_or", "sum", "primary", 
		"atom", "strings", "single_target", "single_subscript_attribute_target", 
		"t_primary", "genexp", "arguments", "args", "kwargs", "starred_expression", 
		"kwarg_or_double_starred", "kwarg_or_starred", "slices", "star_named_expressions", 
		"star_named_expression", "assignment_expression", "named_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'label'", "'jump'", "'expression'", "'call'", "'pass'", 
		"'return'", "'with'", "'menu'", "'True'", "'False'", "'None'", "'if'", 
		"'elif'", "'else'", "'('", "'['", "'{'", "')'", "']'", "'}'", "'+'", "'-'", 
		"'->'", "'/'", "'.'", "':'", "'='", "','", "'*'", "'**'", "':='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "LABEL", "JUMP", "EXPRESSION", "CALL", "PASS", 
		"RETURN", "WITH", "MENU", "TRUE", "FALSE", "NONE", "IF", "ELIF", "ELSE", 
		"LPAR", "LSQB", "LBRACE", "RPAR", "RSQB", "RBRACE", "PLUS", "MINUS", "ARROW", 
		"SLASH", "DOT", "COLON", "EQUALS", "COMMA", "STAR", "DOUBLESTAR", "COLONEQUAL", 
		"NAME", "STRING", "NUMBER", "NEWLINE", "COMMENT", "WS", "EXPLICIT_LINE_JOINING", 
		"ERRORTOKEN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RenpyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RenpyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RenpyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RenpyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Entire_treeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RenpyParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RenpyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RenpyParser.NEWLINE, i);
		}
		public Entire_treeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entire_tree; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterEntire_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitEntire_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntire_tree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entire_treeContext entire_tree() {
		Entire_treeContext _localctx = new Entire_treeContext(Context, State);
		EnterRule(_localctx, 0, RULE_entire_tree);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 51539756504L) != 0)) {
				{
				State = 114;
				statements();
				}
			}

			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 117;
				Match(NEWLINE);
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 125;
				statement();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 51539756504L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_statementsContext simple_statements() {
			return GetRuleContext<Simple_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementsContext block_statements() {
			return GetRuleContext<Block_statementsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				simple_statements();
				State = 131;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				block_statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MenuContext menu() {
			return GetRuleContext<MenuContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Block_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementsContext block_statements() {
		Block_statementsContext _localctx = new Block_statementsContext(Context, State);
		EnterRule(_localctx, 6, RULE_block_statements);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MENU:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				menu();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				if_stmt();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 138;
				label();
				State = 139;
				Match(COLON);
				State = 140;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pass_statementContext pass_statement() {
			return GetRuleContext<Pass_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpContext jump() {
			return GetRuleContext<JumpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SayContext say() {
			return GetRuleContext<SayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Simple_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSimple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSimple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_statementsContext simple_statements() {
		Simple_statementsContext _localctx = new Simple_statementsContext(Context, State);
		EnterRule(_localctx, 8, RULE_simple_statements);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				pass_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				jump();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				label();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 147;
				call();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 148;
				@return();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 149;
				say();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 150;
				assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(NEWLINE);
			State = 154;
			Match(INDENT);
			State = 155;
			statements();
			State = 156;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENU() { return GetToken(RenpyParser.MENU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RenpyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RenpyParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SayContext say() {
			return GetRuleContext<SayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext[] menu_item() {
			return GetRuleContexts<Menu_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext menu_item(int i) {
			return GetRuleContext<Menu_itemContext>(i);
		}
		public MenuContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterMenu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitMenu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuContext menu() {
		MenuContext _localctx = new MenuContext(Context, State);
		EnterRule(_localctx, 12, RULE_menu);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(MENU);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT || _la==NAME) {
				{
				State = 159;
				label_name();
				}
			}

			State = 162;
			Match(COLON);
			State = 163;
			Match(NEWLINE);
			State = 164;
			Match(INDENT);
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 165;
				say();
				State = 166;
				Match(NEWLINE);
				}
				break;
			}
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 170;
				menu_item();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			State = 175;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Menu_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterMenu_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitMenu_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_itemContext menu_item() {
		Menu_itemContext _localctx = new Menu_itemContext(Context, State);
		EnterRule(_localctx, 14, RULE_menu_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(STRING);
			State = 178;
			Match(COLON);
			State = 179;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pass_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(RenpyParser.PASS, 0); }
		public Pass_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pass_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPass_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPass_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPass_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pass_statementContext pass_statement() {
		Pass_statementContext _localctx = new Pass_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_pass_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(PASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(RenpyParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 18, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(LABEL);
			State = 184;
			label_name();
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 185;
				Match(LPAR);
				{
				State = 186;
				parameters();
				}
				State = 187;
				Match(RPAR);
				}
			}

			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 191;
				Match(COLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		public Label_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterLabel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitLabel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_nameContext label_name() {
		Label_nameContext _localctx = new Label_nameContext(Context, State);
		EnterRule(_localctx, 20, RULE_label_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 194;
				Match(DOT);
				}
			}

			State = 197;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(RenpyParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpContext jump() {
		JumpContext _localctx = new JumpContext(Context, State);
		EnterRule(_localctx, 22, RULE_jump);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199;
				Match(JUMP);
				State = 200;
				label_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				Match(JUMP);
				State = 202;
				Match(EXPRESSION);
				State = 203;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(RenpyParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 24, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(CALL);
			State = 207;
			label_name();
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 208;
				Match(LPAR);
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 126702336000L) != 0)) {
					{
					State = 209;
					arguments();
					}
				}

				State = 212;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_simpleContext return_simple() {
			return GetRuleContext<Return_simpleContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 26, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			return_simple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_simpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(RenpyParser.RETURN, 0); }
		public Return_simpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_simple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterReturn_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitReturn_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_simple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_simpleContext return_simple() {
		Return_simpleContext _localctx = new Return_simpleContext(Context, State);
		EnterRule(_localctx, 28, RULE_return_simple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		public SayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_say; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SayContext say() {
		SayContext _localctx = new SayContext(Context, State);
		EnterRule(_localctx, 30, RULE_say);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				Match(NAME);
				State = 220;
				Match(STRING);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			single_target();
			State = 225;
			Match(EQUALS);
			State = 226;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext[] param_with_default() {
			return GetRuleContexts<Param_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext param_with_default(int i) {
			return GetRuleContext<Param_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwdsContext kwds() {
			return GetRuleContext<KwdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(RenpyParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext[] param_no_default() {
			return GetRuleContexts<Param_no_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default(int i) {
			return GetRuleContext<Param_no_defaultContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameters);
		int _la;
		try {
			int _alt;
			State = 362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 250;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						{
						State = 229;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 228;
								param_no_default();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 231;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 236;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NAME) {
							{
							{
							State = 233;
							param_with_default();
							}
							}
							State = 238;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						break;
					case 2:
						{
						{
						State = 242;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 239;
								param_no_default();
								}
								} 
							}
							State = 244;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
						}
						State = 246;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 245;
							param_with_default();
							}
							}
							State = 248;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==NAME );
						}
						}
						break;
					}
					{
					State = 252;
					Match(SLASH);
					State = 253;
					Match(COMMA);
					}
					}
					break;
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 257;
						param_with_default();
						}
						} 
					}
					State = 262;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 265;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 263;
						Match(STAR);
						State = 264;
						Match(COMMA);
						}
					}

					State = 268;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 267;
						param_with_default();
						}
						}
						State = 270;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					}
				}

				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 274;
					kwds();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 278;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 277;
						param_no_default();
						}
						}
						State = 280;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					{
					State = 282;
					Match(SLASH);
					State = 283;
					Match(COMMA);
					}
					}
					break;
				}
				State = 290;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 287;
						param_no_default();
						}
						} 
					}
					State = 292;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				State = 296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 293;
						param_with_default();
						}
						} 
					}
					State = 298;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 301;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 299;
						Match(STAR);
						State = 300;
						Match(COMMA);
						}
					}

					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 303;
						param_with_default();
						}
						}
						State = 306;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					}
				}

				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 310;
					kwds();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 313;
						param_no_default();
						}
						}
						State = 316;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					{
					State = 318;
					Match(SLASH);
					State = 319;
					Match(COMMA);
					}
					}
					break;
				}
				State = 326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 323;
						param_no_default();
						}
						} 
					}
					State = 328;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				}
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 331;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 329;
						Match(STAR);
						State = 330;
						Match(COMMA);
						}
					}

					State = 355;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
					case 1:
						{
						{
						State = 334;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 333;
								param_no_default();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 336;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 341;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NAME) {
							{
							{
							State = 338;
							param_with_default();
							}
							}
							State = 343;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						break;
					case 2:
						{
						{
						State = 347;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 344;
								param_no_default();
								}
								} 
							}
							State = 349;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
						}
						State = 351;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 350;
							param_with_default();
							}
							}
							State = 353;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==NAME );
						}
						}
						break;
					}
					}
				}

				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 359;
					kwds();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default() {
			return GetRuleContext<Param_no_defaultContext>(0);
		}
		public KwdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwdsContext kwds() {
		KwdsContext _localctx = new KwdsContext(Context, State);
		EnterRule(_localctx, 36, RULE_kwds);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(DOUBLESTAR);
			State = 365;
			param_no_default();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_no_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_commentContext type_comment() {
			return GetRuleContext<Type_commentContext>(0);
		}
		public Param_no_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_no_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_no_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_no_defaultContext param_no_default() {
		Param_no_defaultContext _localctx = new Param_no_defaultContext(Context, State);
		EnterRule(_localctx, 38, RULE_param_no_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			param();
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 368;
				Match(COMMA);
				}
			}

			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 371;
				type_comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_assignmentContext default_assignment() {
			return GetRuleContext<Default_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_commentContext type_comment() {
			return GetRuleContext<Type_commentContext>(0);
		}
		public Param_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_with_defaultContext param_with_default() {
		Param_with_defaultContext _localctx = new Param_with_defaultContext(Context, State);
		EnterRule(_localctx, 40, RULE_param_with_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			param();
			State = 375;
			default_assignment();
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 376;
				Match(COMMA);
				}
			}

			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 379;
				type_comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 42, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(NAME);
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 383;
				annotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 44, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			Match(COLON);
			State = 387;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_assignmentContext default_assignment() {
		Default_assignmentContext _localctx = new Default_assignmentContext(Context, State);
		EnterRule(_localctx, 46, RULE_default_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(EQUALS);
			State = 390;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(RenpyParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Type_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterType_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitType_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_commentContext type_comment() {
		Type_commentContext _localctx = new Type_commentContext(Context, State);
		EnterRule(_localctx, 48, RULE_type_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(ARROW);
			State = 393;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(RenpyParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_stmtContext elif_stmt() {
			return GetRuleContext<Elif_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			Match(IF);
			State = 396;
			named_expression();
			State = 397;
			Match(COLON);
			State = 398;
			block();
			State = 403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELIF:
				{
				State = 399;
				elif_stmt();
				}
				break;
			case Eof:
			case DEDENT:
			case LABEL:
			case JUMP:
			case CALL:
			case PASS:
			case RETURN:
			case MENU:
			case IF:
			case ELSE:
			case LPAR:
			case NAME:
			case STRING:
			case NEWLINE:
				{
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 400;
					else_block();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(RenpyParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_stmtContext elif_stmt() {
			return GetRuleContext<Elif_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public Elif_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterElif_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitElif_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_stmtContext elif_stmt() {
		Elif_stmtContext _localctx = new Elif_stmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_elif_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			Match(ELIF);
			State = 406;
			named_expression();
			State = 407;
			Match(COLON);
			State = 408;
			block();
			State = 413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELIF:
				{
				State = 409;
				elif_stmt();
				}
				break;
			case Eof:
			case DEDENT:
			case LABEL:
			case JUMP:
			case CALL:
			case PASS:
			case RETURN:
			case MENU:
			case IF:
			case ELSE:
			case LPAR:
			case NAME:
			case STRING:
			case NEWLINE:
				{
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 410;
					else_block();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(RenpyParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 54, RULE_else_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(ELSE);
			State = 416;
			Match(COLON);
			State = 417;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 56, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(LSQB);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 122407368704L) != 0)) {
				{
				State = 420;
				star_named_expressions();
				}
			}

			State = 423;
			Match(RSQB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression() {
			return GetRuleContext<Star_named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 58, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(LPAR);
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 122407368704L) != 0)) {
				{
				State = 426;
				star_named_expression();
				State = 427;
				Match(COMMA);
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 122407368704L) != 0)) {
					{
					State = 428;
					star_named_expressions();
					}
				}

				}
			}

			State = 433;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(RenpyParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(RenpyParser.RBRACE, 0); }
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 60, RULE_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(LBRACE);
			State = 436;
			star_named_expressions();
			State = 437;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(RenpyParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(RenpyParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairsContext double_starred_kvpairs() {
			return GetRuleContext<Double_starred_kvpairsContext>(0);
		}
		public DictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDict(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictContext dict() {
		DictContext _localctx = new DictContext(Context, State);
		EnterRule(_localctx, 62, RULE_dict);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(LBRACE);
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 124554852352L) != 0)) {
				{
				State = 440;
				double_starred_kvpairs();
				}
			}

			State = 443;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_starred_kvpairsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairContext[] double_starred_kvpair() {
			return GetRuleContexts<Double_starred_kvpairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairContext double_starred_kvpair(int i) {
			return GetRuleContext<Double_starred_kvpairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		public Double_starred_kvpairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_starred_kvpairs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDouble_starred_kvpairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDouble_starred_kvpairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_starred_kvpairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_starred_kvpairsContext double_starred_kvpairs() {
		Double_starred_kvpairsContext _localctx = new Double_starred_kvpairsContext(Context, State);
		EnterRule(_localctx, 64, RULE_double_starred_kvpairs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			double_starred_kvpair();
			State = 450;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 446;
					Match(COMMA);
					State = 447;
					double_starred_kvpair();
					}
					} 
				}
				State = 452;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 453;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_starred_kvpairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpairContext kvpair() {
			return GetRuleContext<KvpairContext>(0);
		}
		public Double_starred_kvpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_starred_kvpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDouble_starred_kvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDouble_starred_kvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_starred_kvpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_starred_kvpairContext double_starred_kvpair() {
		Double_starred_kvpairContext _localctx = new Double_starred_kvpairContext(Context, State);
		EnterRule(_localctx, 66, RULE_double_starred_kvpair);
		try {
			State = 459;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456;
				Match(DOUBLESTAR);
				State = 457;
				sum(0);
				}
				break;
			case TRUE:
			case FALSE:
			case NONE:
			case LSQB:
			case LBRACE:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 458;
				kvpair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		public KvpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpairContext kvpair() {
		KvpairContext _localctx = new KvpairContext(Context, State);
		EnterRule(_localctx, 68, RULE_kvpair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			expression();
			State = 462;
			Match(COLON);
			State = 463;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Star_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_expressionContext star_expression() {
		Star_expressionContext _localctx = new Star_expressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_star_expression);
		try {
			State = 468;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465;
				Match(STAR);
				State = 466;
				sum(0);
				}
				break;
			case TRUE:
			case FALSE:
			case NONE:
			case LSQB:
			case LBRACE:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 467;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			bitwise_or();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public Bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_orContext bitwise_or() {
		Bitwise_orContext _localctx = new Bitwise_orContext(Context, State);
		EnterRule(_localctx, 74, RULE_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			sum(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RenpyParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RenpyParser.MINUS, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		return sum(0);
	}

	private SumContext sum(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumContext _localctx = new SumContext(Context, _parentState);
		SumContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_sum, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 475;
			primary(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 482;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sum);
					State = 477;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 478;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 479;
					primary(0);
					}
					} 
				}
				State = 484;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		return primary(0);
	}

	private PrimaryContext primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryContext _localctx = new PrimaryContext(Context, _parentState);
		PrimaryContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 486;
			atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 504;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primary);
					State = 488;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 500;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
						{
						State = 489;
						Match(DOT);
						State = 490;
						Match(NAME);
						}
						break;
					case LPAR:
						{
						State = 491;
						Match(LPAR);
						State = 493;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 126702336000L) != 0)) {
							{
							State = 492;
							arguments();
							}
						}

						State = 495;
						Match(RPAR);
						}
						break;
					case LSQB:
						{
						State = 496;
						Match(LSQB);
						State = 497;
						slices();
						State = 498;
						Match(RSQB);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 506;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictContext dict() {
			return GetRuleContext<DictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(RenpyParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(RenpyParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(RenpyParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RenpyParser.NUMBER, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 80, RULE_atom);
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 507;
				strings();
				}
				break;
			case LSQB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508;
				list();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 509;
				dict();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 510;
				Match(NAME);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 511;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 512;
				Match(FALSE);
				}
				break;
			case NONE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 513;
				Match(NONE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 8);
				{
				State = 514;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RenpyParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RenpyParser.STRING, i);
		}
		public StringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringsContext strings() {
		StringsContext _localctx = new StringsContext(Context, State);
		EnterRule(_localctx, 82, RULE_strings);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 517;
					Match(STRING);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 520;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
			return GetRuleContext<Single_subscript_attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		public Single_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_targetContext single_target() {
		Single_targetContext _localctx = new Single_targetContext(Context, State);
		EnterRule(_localctx, 84, RULE_single_target);
		try {
			State = 528;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 522;
				single_subscript_attribute_target();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 523;
				Match(NAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 524;
				Match(LPAR);
				State = 525;
				single_target();
				State = 526;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_subscript_attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		public Single_subscript_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_subscript_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_subscript_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
		Single_subscript_attribute_targetContext _localctx = new Single_subscript_attribute_targetContext(Context, State);
		EnterRule(_localctx, 86, RULE_single_subscript_attribute_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			t_primary(0);
			State = 537;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				{
				State = 531;
				Match(DOT);
				State = 532;
				Match(NAME);
				}
				break;
			case LSQB:
				{
				State = 533;
				Match(LSQB);
				State = 534;
				slices();
				State = 535;
				Match(RSQB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class T_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenexpContext genexp() {
			return GetRuleContext<GenexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public T_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitT_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public T_primaryContext t_primary() {
		return t_primary(0);
	}

	private T_primaryContext t_primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		T_primaryContext _localctx = new T_primaryContext(Context, _parentState);
		T_primaryContext _prevctx = _localctx;
		int _startState = 88;
		EnterRecursionRule(_localctx, 88, RULE_t_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 540;
			Match(NAME);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 559;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new T_primaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_t_primary);
					State = 542;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 555;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
					case 1:
						{
						State = 543;
						Match(DOT);
						State = 544;
						Match(NAME);
						}
						break;
					case 2:
						{
						State = 545;
						genexp();
						}
						break;
					case 3:
						{
						State = 546;
						Match(LPAR);
						State = 548;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 126702336000L) != 0)) {
							{
							State = 547;
							arguments();
							}
						}

						State = 550;
						Match(RPAR);
						}
						break;
					case 4:
						{
						State = 551;
						Match(LSQB);
						State = 552;
						slices();
						State = 553;
						Match(RSQB);
						}
						break;
					}
					}
					} 
				}
				State = 561;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GenexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GenexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenexpContext genexp() {
		GenexpContext _localctx = new GenexpContext(Context, State);
		EnterRule(_localctx, 90, RULE_genexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(LPAR);
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 563;
				assignment_expression();
				}
				break;
			case 2:
				{
				State = 564;
				expression();
				}
				break;
			}
			State = 567;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 92, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			args();
			State = 571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 570;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext[] starred_expression() {
			return GetRuleContexts<Starred_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression(int i) {
			return GetRuleContext<Starred_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwargsContext kwargs() {
			return GetRuleContext<KwargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext[] assignment_expression() {
			return GetRuleContexts<Assignment_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression(int i) {
			return GetRuleContext<Assignment_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 94, RULE_args);
		try {
			int _alt;
			State = 598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 573;
					starred_expression();
					}
					break;
				case TRUE:
				case FALSE:
				case NONE:
				case LSQB:
				case LBRACE:
				case NAME:
				case STRING:
				case NUMBER:
					{
					State = 576;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
					case 1:
						{
						State = 574;
						assignment_expression();
						}
						break;
					case 2:
						{
						State = 575;
						expression();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 590;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 580;
						Match(COMMA);
						State = 586;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STAR:
							{
							State = 581;
							starred_expression();
							}
							break;
						case TRUE:
						case FALSE:
						case NONE:
						case LSQB:
						case LBRACE:
						case NAME:
						case STRING:
						case NUMBER:
							{
							State = 584;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
							case 1:
								{
								State = 582;
								assignment_expression();
								}
								break;
							case 2:
								{
								State = 583;
								expression();
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 592;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
				}
				State = 595;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
				case 1:
					{
					State = 593;
					Match(COMMA);
					State = 594;
					kwargs();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 597;
				kwargs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext[] kwarg_or_starred() {
			return GetRuleContexts<Kwarg_or_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext kwarg_or_starred(int i) {
			return GetRuleContext<Kwarg_or_starredContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext[] kwarg_or_double_starred() {
			return GetRuleContexts<Kwarg_or_double_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext kwarg_or_double_starred(int i) {
			return GetRuleContext<Kwarg_or_double_starredContext>(i);
		}
		public KwargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwargsContext kwargs() {
		KwargsContext _localctx = new KwargsContext(Context, State);
		EnterRule(_localctx, 96, RULE_kwargs);
		try {
			int _alt;
			State = 627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 600;
				kwarg_or_starred();
				State = 605;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 601;
						Match(COMMA);
						State = 602;
						kwarg_or_starred();
						}
						} 
					}
					State = 607;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
				}
				State = 617;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 608;
					Match(COMMA);
					State = 609;
					kwarg_or_double_starred();
					State = 614;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 610;
							Match(COMMA);
							State = 611;
							kwarg_or_double_starred();
							}
							} 
						}
						State = 616;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 619;
				kwarg_or_double_starred();
				State = 624;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 620;
						Match(COMMA);
						State = 621;
						kwarg_or_double_starred();
						}
						} 
					}
					State = 626;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Starred_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Starred_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_starred_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStarred_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Starred_expressionContext starred_expression() {
		Starred_expressionContext _localctx = new Starred_expressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_starred_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			Match(STAR);
			State = 630;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_double_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		public Kwarg_or_double_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_double_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_double_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_double_starredContext kwarg_or_double_starred() {
		Kwarg_or_double_starredContext _localctx = new Kwarg_or_double_starredContext(Context, State);
		EnterRule(_localctx, 100, RULE_kwarg_or_double_starred);
		try {
			State = 637;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 632;
				Match(NAME);
				State = 633;
				Match(EQUALS);
				State = 634;
				expression();
				}
				break;
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635;
				Match(DOUBLESTAR);
				State = 636;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression() {
			return GetRuleContext<Starred_expressionContext>(0);
		}
		public Kwarg_or_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_starredContext kwarg_or_starred() {
		Kwarg_or_starredContext _localctx = new Kwarg_or_starredContext(Context, State);
		EnterRule(_localctx, 102, RULE_kwarg_or_starred);
		try {
			State = 643;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 639;
				Match(NAME);
				State = 640;
				Match(EQUALS);
				State = 641;
				expression();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 642;
				starred_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public SlicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlicesContext slices() {
		SlicesContext _localctx = new SlicesContext(Context, State);
		EnterRule(_localctx, 104, RULE_slices);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			named_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext[] star_named_expression() {
			return GetRuleContexts<Star_named_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression(int i) {
			return GetRuleContext<Star_named_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		public Star_named_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionsContext star_named_expressions() {
		Star_named_expressionsContext _localctx = new Star_named_expressionsContext(Context, State);
		EnterRule(_localctx, 106, RULE_star_named_expressions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			star_named_expression();
			State = 652;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 648;
					Match(COMMA);
					State = 649;
					star_named_expression();
					}
					} 
				}
				State = 654;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			}
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 655;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public Star_named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionContext star_named_expression() {
		Star_named_expressionContext _localctx = new Star_named_expressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_star_named_expression);
		try {
			State = 661;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 658;
				Match(STAR);
				State = 659;
				sum(0);
				}
				break;
			case TRUE:
			case FALSE:
			case NONE:
			case LSQB:
			case LBRACE:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 660;
				named_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONEQUAL() { return GetToken(RenpyParser.COLONEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(NAME);
			State = 664;
			Match(COLONEQUAL);
			State = 665;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_expressionContext named_expression() {
		Named_expressionContext _localctx = new Named_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_named_expression);
		try {
			State = 669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 667;
				assignment_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 668;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 38: return sum_sempred((SumContext)_localctx, predIndex);
		case 39: return primary_sempred((PrimaryContext)_localctx, predIndex);
		case 44: return t_primary_sempred((T_primaryContext)_localctx, predIndex);
		}
		return true;
	}
	private bool sum_sempred(SumContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool t_primary_sempred(T_primaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,41,672,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		1,0,3,0,116,8,0,1,0,5,0,119,8,0,10,0,12,0,122,9,0,1,0,1,0,1,1,4,1,127,
		8,1,11,1,12,1,128,1,2,1,2,1,2,1,2,3,2,135,8,2,1,3,1,3,1,3,1,3,1,3,1,3,
		3,3,143,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,152,8,4,1,5,1,5,1,5,1,5,1,
		5,1,6,1,6,3,6,161,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,169,8,6,1,6,4,6,172,
		8,6,11,6,12,6,173,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
		1,9,3,9,190,8,9,1,9,3,9,193,8,9,1,10,3,10,196,8,10,1,10,1,10,1,11,1,11,
		1,11,1,11,1,11,3,11,205,8,11,1,12,1,12,1,12,1,12,3,12,211,8,12,1,12,3,
		12,214,8,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,3,15,223,8,15,1,16,1,16,
		1,16,1,16,1,17,4,17,230,8,17,11,17,12,17,231,1,17,5,17,235,8,17,10,17,
		12,17,238,9,17,1,17,5,17,241,8,17,10,17,12,17,244,9,17,1,17,4,17,247,8,
		17,11,17,12,17,248,3,17,251,8,17,1,17,1,17,1,17,3,17,256,8,17,1,17,5,17,
		259,8,17,10,17,12,17,262,9,17,1,17,1,17,3,17,266,8,17,1,17,4,17,269,8,
		17,11,17,12,17,270,3,17,273,8,17,1,17,3,17,276,8,17,1,17,4,17,279,8,17,
		11,17,12,17,280,1,17,1,17,1,17,3,17,286,8,17,1,17,5,17,289,8,17,10,17,
		12,17,292,9,17,1,17,5,17,295,8,17,10,17,12,17,298,9,17,1,17,1,17,3,17,
		302,8,17,1,17,4,17,305,8,17,11,17,12,17,306,3,17,309,8,17,1,17,3,17,312,
		8,17,1,17,4,17,315,8,17,11,17,12,17,316,1,17,1,17,1,17,3,17,322,8,17,1,
		17,5,17,325,8,17,10,17,12,17,328,9,17,1,17,1,17,3,17,332,8,17,1,17,4,17,
		335,8,17,11,17,12,17,336,1,17,5,17,340,8,17,10,17,12,17,343,9,17,1,17,
		5,17,346,8,17,10,17,12,17,349,9,17,1,17,4,17,352,8,17,11,17,12,17,353,
		3,17,356,8,17,3,17,358,8,17,1,17,3,17,361,8,17,3,17,363,8,17,1,18,1,18,
		1,18,1,19,1,19,3,19,370,8,19,1,19,3,19,373,8,19,1,20,1,20,1,20,3,20,378,
		8,20,1,20,3,20,381,8,20,1,21,1,21,3,21,385,8,21,1,22,1,22,1,22,1,23,1,
		23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,402,8,25,3,25,
		404,8,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,412,8,26,3,26,414,8,26,1,27,
		1,27,1,27,1,27,1,28,1,28,3,28,422,8,28,1,28,1,28,1,29,1,29,1,29,1,29,3,
		29,430,8,29,3,29,432,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,3,31,
		442,8,31,1,31,1,31,1,32,1,32,1,32,5,32,449,8,32,10,32,12,32,452,9,32,1,
		32,3,32,455,8,32,1,33,1,33,1,33,3,33,460,8,33,1,34,1,34,1,34,1,34,1,35,
		1,35,1,35,3,35,469,8,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,
		38,5,38,481,8,38,10,38,12,38,484,9,38,1,39,1,39,1,39,1,39,1,39,1,39,1,
		39,1,39,3,39,494,8,39,1,39,1,39,1,39,1,39,1,39,3,39,501,8,39,5,39,503,
		8,39,10,39,12,39,506,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
		516,8,40,1,41,4,41,519,8,41,11,41,12,41,520,1,42,1,42,1,42,1,42,1,42,1,
		42,3,42,529,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,538,8,43,1,44,
		1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,549,8,44,1,44,1,44,1,44,1,
		44,1,44,3,44,556,8,44,5,44,558,8,44,10,44,12,44,561,9,44,1,45,1,45,1,45,
		3,45,566,8,45,1,45,1,45,1,46,1,46,3,46,572,8,46,1,47,1,47,1,47,3,47,577,
		8,47,3,47,579,8,47,1,47,1,47,1,47,1,47,3,47,585,8,47,3,47,587,8,47,5,47,
		589,8,47,10,47,12,47,592,9,47,1,47,1,47,3,47,596,8,47,1,47,3,47,599,8,
		47,1,48,1,48,1,48,5,48,604,8,48,10,48,12,48,607,9,48,1,48,1,48,1,48,1,
		48,5,48,613,8,48,10,48,12,48,616,9,48,3,48,618,8,48,1,48,1,48,1,48,5,48,
		623,8,48,10,48,12,48,626,9,48,3,48,628,8,48,1,49,1,49,1,49,1,50,1,50,1,
		50,1,50,1,50,3,50,638,8,50,1,51,1,51,1,51,1,51,3,51,644,8,51,1,52,1,52,
		1,53,1,53,1,53,5,53,651,8,53,10,53,12,53,654,9,53,1,53,3,53,657,8,53,1,
		54,1,54,1,54,3,54,662,8,54,1,55,1,55,1,55,1,55,1,56,1,56,3,56,670,8,56,
		1,56,0,3,76,78,88,57,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
		84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,0,1,1,0,23,24,726,
		0,115,1,0,0,0,2,126,1,0,0,0,4,134,1,0,0,0,6,142,1,0,0,0,8,151,1,0,0,0,
		10,153,1,0,0,0,12,158,1,0,0,0,14,177,1,0,0,0,16,181,1,0,0,0,18,183,1,0,
		0,0,20,195,1,0,0,0,22,204,1,0,0,0,24,206,1,0,0,0,26,215,1,0,0,0,28,217,
		1,0,0,0,30,222,1,0,0,0,32,224,1,0,0,0,34,362,1,0,0,0,36,364,1,0,0,0,38,
		367,1,0,0,0,40,374,1,0,0,0,42,382,1,0,0,0,44,386,1,0,0,0,46,389,1,0,0,
		0,48,392,1,0,0,0,50,395,1,0,0,0,52,405,1,0,0,0,54,415,1,0,0,0,56,419,1,
		0,0,0,58,425,1,0,0,0,60,435,1,0,0,0,62,439,1,0,0,0,64,445,1,0,0,0,66,459,
		1,0,0,0,68,461,1,0,0,0,70,468,1,0,0,0,72,470,1,0,0,0,74,472,1,0,0,0,76,
		474,1,0,0,0,78,485,1,0,0,0,80,515,1,0,0,0,82,518,1,0,0,0,84,528,1,0,0,
		0,86,530,1,0,0,0,88,539,1,0,0,0,90,562,1,0,0,0,92,569,1,0,0,0,94,598,1,
		0,0,0,96,627,1,0,0,0,98,629,1,0,0,0,100,637,1,0,0,0,102,643,1,0,0,0,104,
		645,1,0,0,0,106,647,1,0,0,0,108,661,1,0,0,0,110,663,1,0,0,0,112,669,1,
		0,0,0,114,116,3,2,1,0,115,114,1,0,0,0,115,116,1,0,0,0,116,120,1,0,0,0,
		117,119,5,37,0,0,118,117,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,
		1,0,0,0,121,123,1,0,0,0,122,120,1,0,0,0,123,124,5,0,0,1,124,1,1,0,0,0,
		125,127,3,4,2,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,1,0,0,0,128,129,
		1,0,0,0,129,3,1,0,0,0,130,131,3,8,4,0,131,132,5,37,0,0,132,135,1,0,0,0,
		133,135,3,6,3,0,134,130,1,0,0,0,134,133,1,0,0,0,135,5,1,0,0,0,136,143,
		3,12,6,0,137,143,3,50,25,0,138,139,3,18,9,0,139,140,5,28,0,0,140,141,3,
		10,5,0,141,143,1,0,0,0,142,136,1,0,0,0,142,137,1,0,0,0,142,138,1,0,0,0,
		143,7,1,0,0,0,144,152,3,16,8,0,145,152,3,22,11,0,146,152,3,18,9,0,147,
		152,3,24,12,0,148,152,3,26,13,0,149,152,3,30,15,0,150,152,3,32,16,0,151,
		144,1,0,0,0,151,145,1,0,0,0,151,146,1,0,0,0,151,147,1,0,0,0,151,148,1,
		0,0,0,151,149,1,0,0,0,151,150,1,0,0,0,152,9,1,0,0,0,153,154,5,37,0,0,154,
		155,5,1,0,0,155,156,3,2,1,0,156,157,5,2,0,0,157,11,1,0,0,0,158,160,5,10,
		0,0,159,161,3,20,10,0,160,159,1,0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,
		162,163,5,28,0,0,163,164,5,37,0,0,164,168,5,1,0,0,165,166,3,30,15,0,166,
		167,5,37,0,0,167,169,1,0,0,0,168,165,1,0,0,0,168,169,1,0,0,0,169,171,1,
		0,0,0,170,172,3,14,7,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,
		173,174,1,0,0,0,174,175,1,0,0,0,175,176,5,2,0,0,176,13,1,0,0,0,177,178,
		5,35,0,0,178,179,5,28,0,0,179,180,3,10,5,0,180,15,1,0,0,0,181,182,5,7,
		0,0,182,17,1,0,0,0,183,184,5,3,0,0,184,189,3,20,10,0,185,186,5,17,0,0,
		186,187,3,34,17,0,187,188,5,20,0,0,188,190,1,0,0,0,189,185,1,0,0,0,189,
		190,1,0,0,0,190,192,1,0,0,0,191,193,5,28,0,0,192,191,1,0,0,0,192,193,1,
		0,0,0,193,19,1,0,0,0,194,196,5,27,0,0,195,194,1,0,0,0,195,196,1,0,0,0,
		196,197,1,0,0,0,197,198,5,34,0,0,198,21,1,0,0,0,199,200,5,4,0,0,200,205,
		3,20,10,0,201,202,5,4,0,0,202,203,5,5,0,0,203,205,3,72,36,0,204,199,1,
		0,0,0,204,201,1,0,0,0,205,23,1,0,0,0,206,207,5,6,0,0,207,213,3,20,10,0,
		208,210,5,17,0,0,209,211,3,92,46,0,210,209,1,0,0,0,210,211,1,0,0,0,211,
		212,1,0,0,0,212,214,5,20,0,0,213,208,1,0,0,0,213,214,1,0,0,0,214,25,1,
		0,0,0,215,216,3,28,14,0,216,27,1,0,0,0,217,218,5,8,0,0,218,29,1,0,0,0,
		219,220,5,34,0,0,220,223,5,35,0,0,221,223,5,35,0,0,222,219,1,0,0,0,222,
		221,1,0,0,0,223,31,1,0,0,0,224,225,3,84,42,0,225,226,5,29,0,0,226,227,
		3,72,36,0,227,33,1,0,0,0,228,230,3,38,19,0,229,228,1,0,0,0,230,231,1,0,
		0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,236,1,0,0,0,233,235,3,40,20,0,
		234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,251,
		1,0,0,0,238,236,1,0,0,0,239,241,3,38,19,0,240,239,1,0,0,0,241,244,1,0,
		0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,245,
		247,3,40,20,0,246,245,1,0,0,0,247,248,1,0,0,0,248,246,1,0,0,0,248,249,
		1,0,0,0,249,251,1,0,0,0,250,229,1,0,0,0,250,242,1,0,0,0,251,252,1,0,0,
		0,252,253,5,26,0,0,253,254,5,30,0,0,254,256,1,0,0,0,255,250,1,0,0,0,255,
		256,1,0,0,0,256,260,1,0,0,0,257,259,3,40,20,0,258,257,1,0,0,0,259,262,
		1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,272,1,0,0,0,262,260,1,0,0,
		0,263,264,5,31,0,0,264,266,5,30,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,
		268,1,0,0,0,267,269,3,40,20,0,268,267,1,0,0,0,269,270,1,0,0,0,270,268,
		1,0,0,0,270,271,1,0,0,0,271,273,1,0,0,0,272,265,1,0,0,0,272,273,1,0,0,
		0,273,275,1,0,0,0,274,276,3,36,18,0,275,274,1,0,0,0,275,276,1,0,0,0,276,
		363,1,0,0,0,277,279,3,38,19,0,278,277,1,0,0,0,279,280,1,0,0,0,280,278,
		1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,283,5,26,0,0,283,284,5,30,
		0,0,284,286,1,0,0,0,285,278,1,0,0,0,285,286,1,0,0,0,286,290,1,0,0,0,287,
		289,3,38,19,0,288,287,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,
		1,0,0,0,291,296,1,0,0,0,292,290,1,0,0,0,293,295,3,40,20,0,294,293,1,0,
		0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,308,1,0,0,0,298,
		296,1,0,0,0,299,300,5,31,0,0,300,302,5,30,0,0,301,299,1,0,0,0,301,302,
		1,0,0,0,302,304,1,0,0,0,303,305,3,40,20,0,304,303,1,0,0,0,305,306,1,0,
		0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,301,1,0,0,0,308,
		309,1,0,0,0,309,311,1,0,0,0,310,312,3,36,18,0,311,310,1,0,0,0,311,312,
		1,0,0,0,312,363,1,0,0,0,313,315,3,38,19,0,314,313,1,0,0,0,315,316,1,0,
		0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,319,5,26,0,0,319,
		320,5,30,0,0,320,322,1,0,0,0,321,314,1,0,0,0,321,322,1,0,0,0,322,326,1,
		0,0,0,323,325,3,38,19,0,324,323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,
		0,326,327,1,0,0,0,327,357,1,0,0,0,328,326,1,0,0,0,329,330,5,31,0,0,330,
		332,5,30,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,355,1,0,0,0,333,335,3,
		38,19,0,334,333,1,0,0,0,335,336,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,
		0,337,341,1,0,0,0,338,340,3,40,20,0,339,338,1,0,0,0,340,343,1,0,0,0,341,
		339,1,0,0,0,341,342,1,0,0,0,342,356,1,0,0,0,343,341,1,0,0,0,344,346,3,
		38,19,0,345,344,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,
		0,348,351,1,0,0,0,349,347,1,0,0,0,350,352,3,40,20,0,351,350,1,0,0,0,352,
		353,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,0,355,334,1,
		0,0,0,355,347,1,0,0,0,356,358,1,0,0,0,357,331,1,0,0,0,357,358,1,0,0,0,
		358,360,1,0,0,0,359,361,3,36,18,0,360,359,1,0,0,0,360,361,1,0,0,0,361,
		363,1,0,0,0,362,255,1,0,0,0,362,285,1,0,0,0,362,321,1,0,0,0,363,35,1,0,
		0,0,364,365,5,32,0,0,365,366,3,38,19,0,366,37,1,0,0,0,367,369,3,42,21,
		0,368,370,5,30,0,0,369,368,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,
		373,3,48,24,0,372,371,1,0,0,0,372,373,1,0,0,0,373,39,1,0,0,0,374,375,3,
		42,21,0,375,377,3,46,23,0,376,378,5,30,0,0,377,376,1,0,0,0,377,378,1,0,
		0,0,378,380,1,0,0,0,379,381,3,48,24,0,380,379,1,0,0,0,380,381,1,0,0,0,
		381,41,1,0,0,0,382,384,5,34,0,0,383,385,3,44,22,0,384,383,1,0,0,0,384,
		385,1,0,0,0,385,43,1,0,0,0,386,387,5,28,0,0,387,388,3,72,36,0,388,45,1,
		0,0,0,389,390,5,29,0,0,390,391,3,72,36,0,391,47,1,0,0,0,392,393,5,25,0,
		0,393,394,3,72,36,0,394,49,1,0,0,0,395,396,5,14,0,0,396,397,3,112,56,0,
		397,398,5,28,0,0,398,403,3,10,5,0,399,404,3,52,26,0,400,402,3,54,27,0,
		401,400,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,399,1,0,0,0,403,401,
		1,0,0,0,404,51,1,0,0,0,405,406,5,15,0,0,406,407,3,112,56,0,407,408,5,28,
		0,0,408,413,3,10,5,0,409,414,3,52,26,0,410,412,3,54,27,0,411,410,1,0,0,
		0,411,412,1,0,0,0,412,414,1,0,0,0,413,409,1,0,0,0,413,411,1,0,0,0,414,
		53,1,0,0,0,415,416,5,16,0,0,416,417,5,28,0,0,417,418,3,10,5,0,418,55,1,
		0,0,0,419,421,5,18,0,0,420,422,3,106,53,0,421,420,1,0,0,0,421,422,1,0,
		0,0,422,423,1,0,0,0,423,424,5,21,0,0,424,57,1,0,0,0,425,431,5,17,0,0,426,
		427,3,108,54,0,427,429,5,30,0,0,428,430,3,106,53,0,429,428,1,0,0,0,429,
		430,1,0,0,0,430,432,1,0,0,0,431,426,1,0,0,0,431,432,1,0,0,0,432,433,1,
		0,0,0,433,434,5,20,0,0,434,59,1,0,0,0,435,436,5,19,0,0,436,437,3,106,53,
		0,437,438,5,22,0,0,438,61,1,0,0,0,439,441,5,19,0,0,440,442,3,64,32,0,441,
		440,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,444,5,22,0,0,444,63,1,
		0,0,0,445,450,3,66,33,0,446,447,5,30,0,0,447,449,3,66,33,0,448,446,1,0,
		0,0,449,452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,454,1,0,0,0,452,
		450,1,0,0,0,453,455,5,30,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,65,1,
		0,0,0,456,457,5,32,0,0,457,460,3,76,38,0,458,460,3,68,34,0,459,456,1,0,
		0,0,459,458,1,0,0,0,460,67,1,0,0,0,461,462,3,72,36,0,462,463,5,28,0,0,
		463,464,3,72,36,0,464,69,1,0,0,0,465,466,5,31,0,0,466,469,3,76,38,0,467,
		469,3,72,36,0,468,465,1,0,0,0,468,467,1,0,0,0,469,71,1,0,0,0,470,471,3,
		74,37,0,471,73,1,0,0,0,472,473,3,76,38,0,473,75,1,0,0,0,474,475,6,38,-1,
		0,475,476,3,78,39,0,476,482,1,0,0,0,477,478,10,2,0,0,478,479,7,0,0,0,479,
		481,3,78,39,0,480,477,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,
		1,0,0,0,483,77,1,0,0,0,484,482,1,0,0,0,485,486,6,39,-1,0,486,487,3,80,
		40,0,487,504,1,0,0,0,488,500,10,2,0,0,489,490,5,27,0,0,490,501,5,34,0,
		0,491,493,5,17,0,0,492,494,3,92,46,0,493,492,1,0,0,0,493,494,1,0,0,0,494,
		495,1,0,0,0,495,501,5,20,0,0,496,497,5,18,0,0,497,498,3,104,52,0,498,499,
		5,21,0,0,499,501,1,0,0,0,500,489,1,0,0,0,500,491,1,0,0,0,500,496,1,0,0,
		0,501,503,1,0,0,0,502,488,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,504,
		505,1,0,0,0,505,79,1,0,0,0,506,504,1,0,0,0,507,516,3,82,41,0,508,516,3,
		56,28,0,509,516,3,62,31,0,510,516,5,34,0,0,511,516,5,11,0,0,512,516,5,
		12,0,0,513,516,5,13,0,0,514,516,5,36,0,0,515,507,1,0,0,0,515,508,1,0,0,
		0,515,509,1,0,0,0,515,510,1,0,0,0,515,511,1,0,0,0,515,512,1,0,0,0,515,
		513,1,0,0,0,515,514,1,0,0,0,516,81,1,0,0,0,517,519,5,35,0,0,518,517,1,
		0,0,0,519,520,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,83,1,0,0,0,522,
		529,3,86,43,0,523,529,5,34,0,0,524,525,5,17,0,0,525,526,3,84,42,0,526,
		527,5,20,0,0,527,529,1,0,0,0,528,522,1,0,0,0,528,523,1,0,0,0,528,524,1,
		0,0,0,529,85,1,0,0,0,530,537,3,88,44,0,531,532,5,27,0,0,532,538,5,34,0,
		0,533,534,5,18,0,0,534,535,3,104,52,0,535,536,5,21,0,0,536,538,1,0,0,0,
		537,531,1,0,0,0,537,533,1,0,0,0,538,87,1,0,0,0,539,540,6,44,-1,0,540,541,
		5,34,0,0,541,559,1,0,0,0,542,555,10,2,0,0,543,544,5,27,0,0,544,556,5,34,
		0,0,545,556,3,90,45,0,546,548,5,17,0,0,547,549,3,92,46,0,548,547,1,0,0,
		0,548,549,1,0,0,0,549,550,1,0,0,0,550,556,5,20,0,0,551,552,5,18,0,0,552,
		553,3,104,52,0,553,554,5,21,0,0,554,556,1,0,0,0,555,543,1,0,0,0,555,545,
		1,0,0,0,555,546,1,0,0,0,555,551,1,0,0,0,556,558,1,0,0,0,557,542,1,0,0,
		0,558,561,1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,89,1,0,0,0,561,559,
		1,0,0,0,562,565,5,17,0,0,563,566,3,110,55,0,564,566,3,72,36,0,565,563,
		1,0,0,0,565,564,1,0,0,0,566,567,1,0,0,0,567,568,5,20,0,0,568,91,1,0,0,
		0,569,571,3,94,47,0,570,572,5,30,0,0,571,570,1,0,0,0,571,572,1,0,0,0,572,
		93,1,0,0,0,573,579,3,98,49,0,574,577,3,110,55,0,575,577,3,72,36,0,576,
		574,1,0,0,0,576,575,1,0,0,0,577,579,1,0,0,0,578,573,1,0,0,0,578,576,1,
		0,0,0,579,590,1,0,0,0,580,586,5,30,0,0,581,587,3,98,49,0,582,585,3,110,
		55,0,583,585,3,72,36,0,584,582,1,0,0,0,584,583,1,0,0,0,585,587,1,0,0,0,
		586,581,1,0,0,0,586,584,1,0,0,0,587,589,1,0,0,0,588,580,1,0,0,0,589,592,
		1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,595,1,0,0,0,592,590,1,0,0,
		0,593,594,5,30,0,0,594,596,3,96,48,0,595,593,1,0,0,0,595,596,1,0,0,0,596,
		599,1,0,0,0,597,599,3,96,48,0,598,578,1,0,0,0,598,597,1,0,0,0,599,95,1,
		0,0,0,600,605,3,102,51,0,601,602,5,30,0,0,602,604,3,102,51,0,603,601,1,
		0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,617,1,0,0,0,
		607,605,1,0,0,0,608,609,5,30,0,0,609,614,3,100,50,0,610,611,5,30,0,0,611,
		613,3,100,50,0,612,610,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,
		1,0,0,0,615,618,1,0,0,0,616,614,1,0,0,0,617,608,1,0,0,0,617,618,1,0,0,
		0,618,628,1,0,0,0,619,624,3,100,50,0,620,621,5,30,0,0,621,623,3,100,50,
		0,622,620,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,
		628,1,0,0,0,626,624,1,0,0,0,627,600,1,0,0,0,627,619,1,0,0,0,628,97,1,0,
		0,0,629,630,5,31,0,0,630,631,3,72,36,0,631,99,1,0,0,0,632,633,5,34,0,0,
		633,634,5,29,0,0,634,638,3,72,36,0,635,636,5,32,0,0,636,638,3,72,36,0,
		637,632,1,0,0,0,637,635,1,0,0,0,638,101,1,0,0,0,639,640,5,34,0,0,640,641,
		5,29,0,0,641,644,3,72,36,0,642,644,3,98,49,0,643,639,1,0,0,0,643,642,1,
		0,0,0,644,103,1,0,0,0,645,646,3,112,56,0,646,105,1,0,0,0,647,652,3,108,
		54,0,648,649,5,30,0,0,649,651,3,108,54,0,650,648,1,0,0,0,651,654,1,0,0,
		0,652,650,1,0,0,0,652,653,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,655,
		657,5,30,0,0,656,655,1,0,0,0,656,657,1,0,0,0,657,107,1,0,0,0,658,659,5,
		31,0,0,659,662,3,76,38,0,660,662,3,112,56,0,661,658,1,0,0,0,661,660,1,
		0,0,0,662,109,1,0,0,0,663,664,5,34,0,0,664,665,5,33,0,0,665,666,3,72,36,
		0,666,111,1,0,0,0,667,670,3,110,55,0,668,670,3,72,36,0,669,667,1,0,0,0,
		669,668,1,0,0,0,670,113,1,0,0,0,95,115,120,128,134,142,151,160,168,173,
		189,192,195,204,210,213,222,231,236,242,248,250,255,260,265,270,272,275,
		280,285,290,296,301,306,308,311,316,321,326,331,336,341,347,353,355,357,
		360,362,369,372,377,380,384,401,403,411,413,421,429,431,441,450,454,459,
		468,482,493,500,504,515,520,528,537,548,555,559,565,571,576,578,584,586,
		590,595,598,605,614,617,624,627,637,643,652,656,661,669
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
