//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/markd/Documents/GitHub/Ryngine/AntlrRenpy/Parser/RenpyParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RenpyParser : RenpyParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, LABEL=3, JUMP=4, EXPRESSION=5, CALL=6, IF=7, ELIF=8, 
		ELSE=9, WHILE=10, PASS=11, RETURN=12, TRUE=13, FALSE=14, NONE=15, MENU=16, 
		WITH=17, WINDOW=18, SHOW=19, HIDE=20, PAUSE=21, SCENE=22, BEHIND=23, ONLAYER=24, 
		AS=25, AT=26, LPAR=27, LSQB=28, LBRACE=29, RPAR=30, RSQB=31, RBRACE=32, 
		PLUS=33, MINUS=34, ARROW=35, SLASH=36, EQEQUAL=37, NOTEQUAL=38, LESSEQUAL=39, 
		LESS=40, GREATEREQUAL=41, GREATER=42, NOT=43, IN=44, IS=45, PLUSEQUAL=46, 
		MINEQUAL=47, STAREQUAL=48, SLASHEQUAL=49, PERCENTEQUAL=50, AMPEREQUAL=51, 
		VBAREQUAL=52, CIRCUMFLEXEQUAL=53, LEFTSHIFTEQUAL=54, RIGHTSHIFTEQUAL=55, 
		DOUBLESTAREQUAL=56, DOUBLESLASHEQUAL=57, DOT=58, COLON=59, EQUALS=60, 
		COMMA=61, STAR=62, DOUBLESTAR=63, COLONEQUAL=64, DOLLAR=65, NAME=66, STRING=67, 
		NUMBER=68, NEWLINE=69, COMMENT=70, WS=71, EXPLICIT_LINE_JOINING=72, ERRORTOKEN=73;
	public const int
		RULE_entire_tree = 0, RULE_statements = 1, RULE_statement = 2, RULE_block_statements = 3, 
		RULE_simple_statements = 4, RULE_window = 5, RULE_scene = 6, RULE_pause = 7, 
		RULE_show = 8, RULE_hide = 9, RULE_python_one_line = 10, RULE_python_statement = 11, 
		RULE_block = 12, RULE_menu = 13, RULE_menu_item = 14, RULE_pass_statement = 15, 
		RULE_label = 16, RULE_label_name = 17, RULE_jump = 18, RULE_call = 19, 
		RULE_return = 20, RULE_return_simple = 21, RULE_say = 22, RULE_assignment = 23, 
		RULE_augassign = 24, RULE_parameters = 25, RULE_kwds = 26, RULE_param_no_default = 27, 
		RULE_param_with_default = 28, RULE_param = 29, RULE_annotation = 30, RULE_default_assignment = 31, 
		RULE_type_comment = 32, RULE_if_stmt = 33, RULE_elif_stmt = 34, RULE_else_block = 35, 
		RULE_while_stmt = 36, RULE_list = 37, RULE_tuple = 38, RULE_set = 39, 
		RULE_dict = 40, RULE_double_starred_kvpairs = 41, RULE_double_starred_kvpair = 42, 
		RULE_kvpair = 43, RULE_star_expression = 44, RULE_expression = 45, RULE_comparison = 46, 
		RULE_comparison_operator = 47, RULE_bitwise_or = 48, RULE_sum = 49, RULE_primary = 50, 
		RULE_atom = 51, RULE_name = 52, RULE_strings = 53, RULE_single_target = 54, 
		RULE_single_subscript_attribute_target = 55, RULE_t_primary = 56, RULE_genexp = 57, 
		RULE_arguments = 58, RULE_args = 59, RULE_kwargs = 60, RULE_starred_expression = 61, 
		RULE_kwarg_or_double_starred = 62, RULE_kwarg_or_starred = 63, RULE_slices = 64, 
		RULE_star_named_expressions = 65, RULE_star_named_expression = 66, RULE_assignment_expression = 67, 
		RULE_named_expression = 68;
	public static readonly string[] ruleNames = {
		"entire_tree", "statements", "statement", "block_statements", "simple_statements", 
		"window", "scene", "pause", "show", "hide", "python_one_line", "python_statement", 
		"block", "menu", "menu_item", "pass_statement", "label", "label_name", 
		"jump", "call", "return", "return_simple", "say", "assignment", "augassign", 
		"parameters", "kwds", "param_no_default", "param_with_default", "param", 
		"annotation", "default_assignment", "type_comment", "if_stmt", "elif_stmt", 
		"else_block", "while_stmt", "list", "tuple", "set", "dict", "double_starred_kvpairs", 
		"double_starred_kvpair", "kvpair", "star_expression", "expression", "comparison", 
		"comparison_operator", "bitwise_or", "sum", "primary", "atom", "name", 
		"strings", "single_target", "single_subscript_attribute_target", "t_primary", 
		"genexp", "arguments", "args", "kwargs", "starred_expression", "kwarg_or_double_starred", 
		"kwarg_or_starred", "slices", "star_named_expressions", "star_named_expression", 
		"assignment_expression", "named_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'label'", "'jump'", "'expression'", "'call'", "'if'", 
		"'elif'", "'else'", "'while'", "'pass'", "'return'", "'True'", "'False'", 
		"'None'", "'menu'", "'with'", "'window'", "'show'", "'hide'", "'pause'", 
		"'scene'", "'behind'", "'onlayer'", "'as'", "'at'", "'('", "'['", "'{'", 
		"')'", "']'", "'}'", "'+'", "'-'", "'->'", "'/'", "'=='", "'!='", "'<='", 
		"'<'", "'>='", "'>'", "'not'", "'in'", "'is'", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='", 
		"'.'", "':'", "'='", "','", "'*'", "'**'", "':='", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "LABEL", "JUMP", "EXPRESSION", "CALL", "IF", 
		"ELIF", "ELSE", "WHILE", "PASS", "RETURN", "TRUE", "FALSE", "NONE", "MENU", 
		"WITH", "WINDOW", "SHOW", "HIDE", "PAUSE", "SCENE", "BEHIND", "ONLAYER", 
		"AS", "AT", "LPAR", "LSQB", "LBRACE", "RPAR", "RSQB", "RBRACE", "PLUS", 
		"MINUS", "ARROW", "SLASH", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", "LESS", 
		"GREATEREQUAL", "GREATER", "NOT", "IN", "IS", "PLUSEQUAL", "MINEQUAL", 
		"STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AMPEREQUAL", "VBAREQUAL", 
		"CIRCUMFLEXEQUAL", "LEFTSHIFTEQUAL", "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", 
		"DOUBLESLASHEQUAL", "DOT", "COLON", "EQUALS", "COMMA", "STAR", "DOUBLESTAR", 
		"COLONEQUAL", "DOLLAR", "NAME", "STRING", "NUMBER", "NEWLINE", "COMMENT", 
		"WS", "EXPLICIT_LINE_JOINING", "ERRORTOKEN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RenpyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RenpyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RenpyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RenpyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Entire_treeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RenpyParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RenpyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RenpyParser.NEWLINE, i);
		}
		public Entire_treeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entire_tree; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterEntire_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitEntire_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntire_tree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entire_treeContext entire_tree() {
		Entire_treeContext _localctx = new Entire_treeContext(Context, State);
		EnterRule(_localctx, 0, RULE_entire_tree);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8199384L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7L) != 0)) {
				{
				State = 138;
				statements();
				}
			}

			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 141;
				Match(NEWLINE);
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 147;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 149;
				statement();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8199384L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_statementsContext simple_statements() {
			return GetRuleContext<Simple_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementsContext block_statements() {
			return GetRuleContext<Block_statementsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				simple_statements();
				State = 155;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157;
				block_statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MenuContext menu() {
			return GetRuleContext<MenuContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Block_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementsContext block_statements() {
		Block_statementsContext _localctx = new Block_statementsContext(Context, State);
		EnterRule(_localctx, 6, RULE_block_statements);
		try {
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MENU:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				menu();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				if_stmt();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 162;
				while_stmt();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 163;
				label();
				State = 164;
				Match(COLON);
				State = 165;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pass_statementContext pass_statement() {
			return GetRuleContext<Pass_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpContext jump() {
			return GetRuleContext<JumpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SayContext say() {
			return GetRuleContext<SayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Python_one_lineContext python_one_line() {
			return GetRuleContext<Python_one_lineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowContext window() {
			return GetRuleContext<WindowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SceneContext scene() {
			return GetRuleContext<SceneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PauseContext pause() {
			return GetRuleContext<PauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowContext show() {
			return GetRuleContext<ShowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HideContext hide() {
			return GetRuleContext<HideContext>(0);
		}
		public Simple_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSimple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSimple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_statementsContext simple_statements() {
		Simple_statementsContext _localctx = new Simple_statementsContext(Context, State);
		EnterRule(_localctx, 8, RULE_simple_statements);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PASS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				pass_statement();
				}
				break;
			case JUMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				jump();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 171;
				label();
				}
				break;
			case CALL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 172;
				call();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 173;
				@return();
				}
				break;
			case NAME:
			case STRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 174;
				say();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 175;
				python_one_line();
				}
				break;
			case WINDOW:
				EnterOuterAlt(_localctx, 8);
				{
				State = 176;
				window();
				}
				break;
			case SCENE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 177;
				scene();
				}
				break;
			case PAUSE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 178;
				pause();
				}
				break;
			case SHOW:
				EnterOuterAlt(_localctx, 11);
				{
				State = 179;
				show();
				}
				break;
			case HIDE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 180;
				hide();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(RenpyParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(RenpyParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDE() { return GetToken(RenpyParser.HIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WindowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterWindow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitWindow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowContext window() {
		WindowContext _localctx = new WindowContext(Context, State);
		EnterRule(_localctx, 10, RULE_window);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(WINDOW);
			State = 184;
			_la = TokenStream.LA(1);
			if ( !(_la==SHOW || _la==HIDE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 939384952L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7L) != 0)) {
				{
				State = 185;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SceneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCENE() { return GetToken(RenpyParser.SCENE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(RenpyParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(RenpyParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(RenpyParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		public SceneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scene; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterScene(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitScene(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScene(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SceneContext scene() {
		SceneContext _localctx = new SceneContext(Context, State);
		EnterRule(_localctx, 12, RULE_scene);
		int _la;
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				Match(SCENE);
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 189;
					Match(NAME);
					}
					}
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NAME );
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 194;
					Match(WITH);
					State = 195;
					expression();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198;
				Match(SCENE);
				State = 199;
				Match(EXPRESSION);
				State = 200;
				expression();
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 201;
					Match(WITH);
					State = 202;
					expression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAUSE() { return GetToken(RenpyParser.PAUSE, 0); }
		public PauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PauseContext pause() {
		PauseContext _localctx = new PauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_pause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(PAUSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(RenpyParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(RenpyParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(RenpyParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(RenpyParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		public ShowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_show; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterShow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitShow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowContext show() {
		ShowContext _localctx = new ShowContext(Context, State);
		EnterRule(_localctx, 16, RULE_show);
		int _la;
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209;
				Match(SHOW);
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 210;
					Match(NAME);
					}
					}
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NAME );
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 215;
					Match(WITH);
					State = 216;
					expression();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				Match(SHOW);
				State = 220;
				Match(EXPRESSION);
				State = 221;
				expression();
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 222;
					Match(WITH);
					State = 223;
					expression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDE() { return GetToken(RenpyParser.HIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(RenpyParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(RenpyParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(RenpyParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		public HideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterHide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitHide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HideContext hide() {
		HideContext _localctx = new HideContext(Context, State);
		EnterRule(_localctx, 18, RULE_hide);
		int _la;
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228;
				Match(HIDE);
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 229;
					Match(NAME);
					}
					}
					State = 232;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NAME );
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 234;
					Match(WITH);
					State = 235;
					expression();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				Match(HIDE);
				State = 239;
				Match(EXPRESSION);
				State = 240;
				expression();
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 241;
					Match(WITH);
					State = 242;
					expression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_one_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(RenpyParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Python_statementContext python_statement() {
			return GetRuleContext<Python_statementContext>(0);
		}
		public Python_one_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_one_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPython_one_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPython_one_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPython_one_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Python_one_lineContext python_one_line() {
		Python_one_lineContext _localctx = new Python_one_lineContext(Context, State);
		EnterRule(_localctx, 20, RULE_python_one_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(DOLLAR);
			State = 248;
			python_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Python_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Python_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_python_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPython_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPython_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPython_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Python_statementContext python_statement() {
		Python_statementContext _localctx = new Python_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_python_statement);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(NEWLINE);
			State = 255;
			Match(INDENT);
			State = 256;
			statements();
			State = 257;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENU() { return GetToken(RenpyParser.MENU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RenpyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RenpyParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SayContext say() {
			return GetRuleContext<SayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext[] menu_item() {
			return GetRuleContexts<Menu_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext menu_item(int i) {
			return GetRuleContext<Menu_itemContext>(i);
		}
		public MenuContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterMenu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitMenu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuContext menu() {
		MenuContext _localctx = new MenuContext(Context, State);
		EnterRule(_localctx, 26, RULE_menu);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(MENU);
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT || _la==NAME) {
				{
				State = 260;
				label_name();
				}
			}

			State = 263;
			Match(COLON);
			State = 264;
			Match(NEWLINE);
			State = 265;
			Match(INDENT);
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 266;
				say();
				State = 267;
				Match(NEWLINE);
				}
				break;
			}
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 271;
				menu_item();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			State = 276;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Menu_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterMenu_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitMenu_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_itemContext menu_item() {
		Menu_itemContext _localctx = new Menu_itemContext(Context, State);
		EnterRule(_localctx, 28, RULE_menu_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(STRING);
			State = 279;
			Match(COLON);
			State = 280;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pass_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(RenpyParser.PASS, 0); }
		public Pass_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pass_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPass_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPass_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPass_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pass_statementContext pass_statement() {
		Pass_statementContext _localctx = new Pass_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_pass_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(PASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(RenpyParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 32, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(LABEL);
			State = 285;
			label_name();
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 286;
				Match(LPAR);
				{
				State = 287;
				parameters();
				}
				State = 288;
				Match(RPAR);
				}
			}

			State = 293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 292;
				Match(COLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		public Label_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterLabel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitLabel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_nameContext label_name() {
		Label_nameContext _localctx = new Label_nameContext(Context, State);
		EnterRule(_localctx, 34, RULE_label_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 295;
				Match(DOT);
				}
			}

			State = 298;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(RenpyParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpContext jump() {
		JumpContext _localctx = new JumpContext(Context, State);
		EnterRule(_localctx, 36, RULE_jump);
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				Match(JUMP);
				State = 301;
				label_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302;
				Match(JUMP);
				State = 303;
				Match(EXPRESSION);
				State = 304;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(RenpyParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 38, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(CALL);
			State = 308;
			label_name();
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 309;
				Match(LPAR);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686017488002952L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7L) != 0)) {
					{
					State = 310;
					arguments();
					}
				}

				State = 313;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_simpleContext return_simple() {
			return GetRuleContext<Return_simpleContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 40, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			return_simple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_simpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(RenpyParser.RETURN, 0); }
		public Return_simpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_simple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterReturn_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitReturn_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_simple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_simpleContext return_simple() {
		Return_simpleContext _localctx = new Return_simpleContext(Context, State);
		EnterRule(_localctx, 42, RULE_return_simple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		public SayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_say; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SayContext say() {
		SayContext _localctx = new SayContext(Context, State);
		EnterRule(_localctx, 44, RULE_say);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				Match(NAME);
				State = 321;
				Match(STRING);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AugassignContext augassign() {
			return GetRuleContext<AugassignContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 46, RULE_assignment);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325;
				single_target();
				State = 326;
				Match(EQUALS);
				State = 327;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329;
				single_target();
				State = 330;
				augassign();
				State = 331;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AugassignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUAL() { return GetToken(RenpyParser.PLUSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINEQUAL() { return GetToken(RenpyParser.MINEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAREQUAL() { return GetToken(RenpyParser.STAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASHEQUAL() { return GetToken(RenpyParser.SLASHEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTEQUAL() { return GetToken(RenpyParser.PERCENTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPEREQUAL() { return GetToken(RenpyParser.AMPEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAREQUAL() { return GetToken(RenpyParser.VBAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIRCUMFLEXEQUAL() { return GetToken(RenpyParser.CIRCUMFLEXEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTSHIFTEQUAL() { return GetToken(RenpyParser.LEFTSHIFTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTSHIFTEQUAL() { return GetToken(RenpyParser.RIGHTSHIFTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAREQUAL() { return GetToken(RenpyParser.DOUBLESTAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESLASHEQUAL() { return GetToken(RenpyParser.DOUBLESLASHEQUAL, 0); }
		public AugassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_augassign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAugassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAugassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAugassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AugassignContext augassign() {
		AugassignContext _localctx = new AugassignContext(Context, State);
		EnterRule(_localctx, 48, RULE_augassign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 288160007407534080L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext[] param_with_default() {
			return GetRuleContexts<Param_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext param_with_default(int i) {
			return GetRuleContext<Param_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwdsContext kwds() {
			return GetRuleContext<KwdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(RenpyParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext[] param_no_default() {
			return GetRuleContexts<Param_no_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default(int i) {
			return GetRuleContext<Param_no_defaultContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameters);
		int _la;
		try {
			int _alt;
			State = 471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 359;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						{
						State = 338;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 337;
								param_no_default();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 340;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 345;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NAME) {
							{
							{
							State = 342;
							param_with_default();
							}
							}
							State = 347;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						break;
					case 2:
						{
						{
						State = 351;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 348;
								param_no_default();
								}
								} 
							}
							State = 353;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
						}
						State = 355;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 354;
							param_with_default();
							}
							}
							State = 357;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==NAME );
						}
						}
						break;
					}
					{
					State = 361;
					Match(SLASH);
					State = 362;
					Match(COMMA);
					}
					}
					break;
				}
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 366;
						param_with_default();
						}
						} 
					}
					State = 371;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 374;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 372;
						Match(STAR);
						State = 373;
						Match(COMMA);
						}
					}

					State = 377;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 376;
						param_with_default();
						}
						}
						State = 379;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					}
				}

				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 383;
					kwds();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 387;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 386;
						param_no_default();
						}
						}
						State = 389;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					{
					State = 391;
					Match(SLASH);
					State = 392;
					Match(COMMA);
					}
					}
					break;
				}
				State = 399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 396;
						param_no_default();
						}
						} 
					}
					State = 401;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				}
				State = 405;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 402;
						param_with_default();
						}
						} 
					}
					State = 407;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				}
				State = 417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 410;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 408;
						Match(STAR);
						State = 409;
						Match(COMMA);
						}
					}

					State = 413;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 412;
						param_with_default();
						}
						}
						State = 415;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					}
				}

				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 419;
					kwds();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 430;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 423;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 422;
						param_no_default();
						}
						}
						State = 425;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					{
					State = 427;
					Match(SLASH);
					State = 428;
					Match(COMMA);
					}
					}
					break;
				}
				State = 435;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 432;
						param_no_default();
						}
						} 
					}
					State = 437;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 440;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 438;
						Match(STAR);
						State = 439;
						Match(COMMA);
						}
					}

					State = 464;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						{
						State = 443;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 442;
								param_no_default();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 445;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 450;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NAME) {
							{
							{
							State = 447;
							param_with_default();
							}
							}
							State = 452;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						break;
					case 2:
						{
						{
						State = 456;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 453;
								param_no_default();
								}
								} 
							}
							State = 458;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
						}
						State = 460;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 459;
							param_with_default();
							}
							}
							State = 462;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==NAME );
						}
						}
						break;
					}
					}
				}

				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 468;
					kwds();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default() {
			return GetRuleContext<Param_no_defaultContext>(0);
		}
		public KwdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwdsContext kwds() {
		KwdsContext _localctx = new KwdsContext(Context, State);
		EnterRule(_localctx, 52, RULE_kwds);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(DOUBLESTAR);
			State = 474;
			param_no_default();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_no_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_commentContext type_comment() {
			return GetRuleContext<Type_commentContext>(0);
		}
		public Param_no_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_no_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_no_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_no_defaultContext param_no_default() {
		Param_no_defaultContext _localctx = new Param_no_defaultContext(Context, State);
		EnterRule(_localctx, 54, RULE_param_no_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			param();
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 477;
				Match(COMMA);
				}
			}

			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 480;
				type_comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_assignmentContext default_assignment() {
			return GetRuleContext<Default_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_commentContext type_comment() {
			return GetRuleContext<Type_commentContext>(0);
		}
		public Param_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_with_defaultContext param_with_default() {
		Param_with_defaultContext _localctx = new Param_with_defaultContext(Context, State);
		EnterRule(_localctx, 56, RULE_param_with_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			param();
			State = 484;
			default_assignment();
			State = 486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 485;
				Match(COMMA);
				}
			}

			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 488;
				type_comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 58, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(NAME);
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 492;
				annotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 60, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(COLON);
			State = 496;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_assignmentContext default_assignment() {
		Default_assignmentContext _localctx = new Default_assignmentContext(Context, State);
		EnterRule(_localctx, 62, RULE_default_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(EQUALS);
			State = 499;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(RenpyParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Type_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterType_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitType_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_commentContext type_comment() {
		Type_commentContext _localctx = new Type_commentContext(Context, State);
		EnterRule(_localctx, 64, RULE_type_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			Match(ARROW);
			State = 502;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(RenpyParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_stmtContext elif_stmt() {
			return GetRuleContext<Elif_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(IF);
			State = 505;
			named_expression();
			State = 506;
			Match(COLON);
			State = 507;
			block();
			State = 512;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELIF:
				{
				State = 508;
				elif_stmt();
				}
				break;
			case Eof:
			case DEDENT:
			case LABEL:
			case JUMP:
			case CALL:
			case IF:
			case ELSE:
			case WHILE:
			case PASS:
			case RETURN:
			case MENU:
			case WINDOW:
			case SHOW:
			case HIDE:
			case PAUSE:
			case SCENE:
			case DOLLAR:
			case NAME:
			case STRING:
			case NEWLINE:
				{
				State = 510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 509;
					else_block();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(RenpyParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_stmtContext elif_stmt() {
			return GetRuleContext<Elif_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public Elif_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterElif_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitElif_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_stmtContext elif_stmt() {
		Elif_stmtContext _localctx = new Elif_stmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_elif_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(ELIF);
			State = 515;
			named_expression();
			State = 516;
			Match(COLON);
			State = 517;
			block();
			State = 522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELIF:
				{
				State = 518;
				elif_stmt();
				}
				break;
			case Eof:
			case DEDENT:
			case LABEL:
			case JUMP:
			case CALL:
			case IF:
			case ELSE:
			case WHILE:
			case PASS:
			case RETURN:
			case MENU:
			case WINDOW:
			case SHOW:
			case HIDE:
			case PAUSE:
			case SCENE:
			case DOLLAR:
			case NAME:
			case STRING:
			case NEWLINE:
				{
				State = 520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 519;
					else_block();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(RenpyParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 70, RULE_else_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(ELSE);
			State = 525;
			Match(COLON);
			State = 526;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(RenpyParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public While_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_stmtContext while_stmt() {
		While_stmtContext _localctx = new While_stmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_while_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			Match(WHILE);
			State = 529;
			named_expression();
			State = 530;
			Match(COLON);
			State = 531;
			block();
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 532;
				else_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 74, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(LSQB);
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611686019366772856L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7L) != 0)) {
				{
				State = 536;
				star_named_expressions();
				}
			}

			State = 539;
			Match(RSQB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression() {
			return GetRuleContext<Star_named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 76, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(LPAR);
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611686019366772856L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7L) != 0)) {
				{
				State = 542;
				star_named_expression();
				State = 543;
				Match(COMMA);
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611686019366772856L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7L) != 0)) {
					{
					State = 544;
					star_named_expressions();
					}
				}

				}
			}

			State = 549;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(RenpyParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(RenpyParser.RBRACE, 0); }
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 78, RULE_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			Match(LBRACE);
			State = 552;
			star_named_expressions();
			State = 553;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(RenpyParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(RenpyParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairsContext double_starred_kvpairs() {
			return GetRuleContext<Double_starred_kvpairsContext>(0);
		}
		public DictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDict(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictContext dict() {
		DictContext _localctx = new DictContext(Context, State);
		EnterRule(_localctx, 80, RULE_dict);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			Match(LBRACE);
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372035915390856L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7L) != 0)) {
				{
				State = 556;
				double_starred_kvpairs();
				}
			}

			State = 559;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_starred_kvpairsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairContext[] double_starred_kvpair() {
			return GetRuleContexts<Double_starred_kvpairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairContext double_starred_kvpair(int i) {
			return GetRuleContext<Double_starred_kvpairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		public Double_starred_kvpairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_starred_kvpairs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDouble_starred_kvpairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDouble_starred_kvpairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_starred_kvpairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_starred_kvpairsContext double_starred_kvpairs() {
		Double_starred_kvpairsContext _localctx = new Double_starred_kvpairsContext(Context, State);
		EnterRule(_localctx, 82, RULE_double_starred_kvpairs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			double_starred_kvpair();
			State = 566;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 562;
					Match(COMMA);
					State = 563;
					double_starred_kvpair();
					}
					} 
				}
				State = 568;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 569;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_starred_kvpairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpairContext kvpair() {
			return GetRuleContext<KvpairContext>(0);
		}
		public Double_starred_kvpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_starred_kvpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDouble_starred_kvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDouble_starred_kvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_starred_kvpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_starred_kvpairContext double_starred_kvpair() {
		Double_starred_kvpairContext _localctx = new Double_starred_kvpairContext(Context, State);
		EnterRule(_localctx, 84, RULE_double_starred_kvpair);
		try {
			State = 575;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572;
				Match(DOUBLESTAR);
				State = 573;
				sum(0);
				}
				break;
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case TRUE:
			case FALSE:
			case NONE:
			case MENU:
			case WINDOW:
			case SHOW:
			case HIDE:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case AS:
			case AT:
			case LSQB:
			case LBRACE:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 574;
				kvpair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		public KvpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpairContext kvpair() {
		KvpairContext _localctx = new KvpairContext(Context, State);
		EnterRule(_localctx, 86, RULE_kvpair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			expression();
			State = 578;
			Match(COLON);
			State = 579;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Star_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_expressionContext star_expression() {
		Star_expressionContext _localctx = new Star_expressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_star_expression);
		try {
			State = 584;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 581;
				Match(STAR);
				State = 582;
				sum(0);
				}
				break;
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case TRUE:
			case FALSE:
			case NONE:
			case MENU:
			case WINDOW:
			case SHOW:
			case HIDE:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case AS:
			case AT:
			case LSQB:
			case LBRACE:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			comparison();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 92, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			bitwise_or();
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 70231305224192L) != 0)) {
				{
				State = 589;
				comparison_operator();
				State = 590;
				comparison();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQUAL() { return GetToken(RenpyParser.EQEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(RenpyParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL() { return GetToken(RenpyParser.LESSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(RenpyParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(RenpyParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(RenpyParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(RenpyParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(RenpyParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(RenpyParser.IS, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 94, RULE_comparison_operator);
		int _la;
		try {
			State = 608;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQEQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 594;
				Match(EQEQUAL);
				}
				break;
			case NOTEQUAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 595;
				Match(NOTEQUAL);
				}
				break;
			case LESSEQUAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 596;
				Match(LESSEQUAL);
				}
				break;
			case LESS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 597;
				Match(LESS);
				}
				break;
			case GREATEREQUAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 598;
				Match(GREATEREQUAL);
				}
				break;
			case GREATER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 599;
				Match(GREATER);
				}
				break;
			case NOT:
			case IN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 601;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 600;
					Match(NOT);
					}
				}

				State = 603;
				Match(IN);
				}
				break;
			case IS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 604;
				Match(IS);
				State = 606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 605;
					Match(NOT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public Bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_orContext bitwise_or() {
		Bitwise_orContext _localctx = new Bitwise_orContext(Context, State);
		EnterRule(_localctx, 96, RULE_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			sum(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RenpyParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RenpyParser.MINUS, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		return sum(0);
	}

	private SumContext sum(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumContext _localctx = new SumContext(Context, _parentState);
		SumContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_sum, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 613;
			primary(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 620;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sum);
					State = 615;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 616;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 617;
					primary(0);
					}
					} 
				}
				State = 622;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		return primary(0);
	}

	private PrimaryContext primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryContext _localctx = new PrimaryContext(Context, _parentState);
		PrimaryContext _prevctx = _localctx;
		int _startState = 100;
		EnterRecursionRule(_localctx, 100, RULE_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 624;
			atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 642;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primary);
					State = 626;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 638;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
						{
						State = 627;
						Match(DOT);
						State = 628;
						name();
						}
						break;
					case LPAR:
						{
						State = 629;
						Match(LPAR);
						State = 631;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686017488002952L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7L) != 0)) {
							{
							State = 630;
							arguments();
							}
						}

						State = 633;
						Match(RPAR);
						}
						break;
					case LSQB:
						{
						State = 634;
						Match(LSQB);
						State = 635;
						slices();
						State = 636;
						Match(RSQB);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 644;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictContext dict() {
			return GetRuleContext<DictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(RenpyParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(RenpyParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(RenpyParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RenpyParser.NUMBER, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 102, RULE_atom);
		try {
			State = 653;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 645;
				strings();
				}
				break;
			case LSQB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 646;
				list();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 647;
				dict();
				}
				break;
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case MENU:
			case WINDOW:
			case SHOW:
			case HIDE:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case AS:
			case AT:
			case NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 648;
				name();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 649;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 650;
				Match(FALSE);
				}
				break;
			case NONE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 651;
				Match(NONE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 8);
				{
				State = 652;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAUSE() { return GetToken(RenpyParser.PAUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENU() { return GetToken(RenpyParser.MENU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(RenpyParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(RenpyParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDE() { return GetToken(RenpyParser.HIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(RenpyParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(RenpyParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(RenpyParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(RenpyParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCENE() { return GetToken(RenpyParser.SCENE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEHIND() { return GetToken(RenpyParser.BEHIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLAYER() { return GetToken(RenpyParser.ONLAYER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(RenpyParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(RenpyParser.AT, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 104, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & -9223372036838023153L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RenpyParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RenpyParser.STRING, i);
		}
		public StringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringsContext strings() {
		StringsContext _localctx = new StringsContext(Context, State);
		EnterRule(_localctx, 106, RULE_strings);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 657;
					Match(STRING);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 660;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
			return GetRuleContext<Single_subscript_attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		public Single_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_targetContext single_target() {
		Single_targetContext _localctx = new Single_targetContext(Context, State);
		EnterRule(_localctx, 108, RULE_single_target);
		try {
			State = 668;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 662;
				single_subscript_attribute_target();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 663;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 664;
				Match(LPAR);
				State = 665;
				single_target();
				State = 666;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_subscript_attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		public Single_subscript_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_subscript_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_subscript_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
		Single_subscript_attribute_targetContext _localctx = new Single_subscript_attribute_targetContext(Context, State);
		EnterRule(_localctx, 110, RULE_single_subscript_attribute_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			t_primary(0);
			State = 677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				{
				State = 671;
				Match(DOT);
				State = 672;
				name();
				}
				break;
			case LSQB:
				{
				State = 673;
				Match(LSQB);
				State = 674;
				slices();
				State = 675;
				Match(RSQB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class T_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenexpContext genexp() {
			return GetRuleContext<GenexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public T_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitT_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public T_primaryContext t_primary() {
		return t_primary(0);
	}

	private T_primaryContext t_primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		T_primaryContext _localctx = new T_primaryContext(Context, _parentState);
		T_primaryContext _prevctx = _localctx;
		int _startState = 112;
		EnterRecursionRule(_localctx, 112, RULE_t_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 680;
			name();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 699;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new T_primaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_t_primary);
					State = 682;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 695;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
					case 1:
						{
						State = 683;
						Match(DOT);
						State = 684;
						name();
						}
						break;
					case 2:
						{
						State = 685;
						genexp();
						}
						break;
					case 3:
						{
						State = 686;
						Match(LPAR);
						State = 688;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686017488002952L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 7L) != 0)) {
							{
							State = 687;
							arguments();
							}
						}

						State = 690;
						Match(RPAR);
						}
						break;
					case 4:
						{
						State = 691;
						Match(LSQB);
						State = 692;
						slices();
						State = 693;
						Match(RSQB);
						}
						break;
					}
					}
					} 
				}
				State = 701;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GenexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GenexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenexpContext genexp() {
		GenexpContext _localctx = new GenexpContext(Context, State);
		EnterRule(_localctx, 114, RULE_genexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			Match(LPAR);
			State = 705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 703;
				assignment_expression();
				}
				break;
			case 2:
				{
				State = 704;
				expression();
				}
				break;
			}
			State = 707;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 116, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			args();
			State = 711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 710;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext[] starred_expression() {
			return GetRuleContexts<Starred_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression(int i) {
			return GetRuleContext<Starred_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwargsContext kwargs() {
			return GetRuleContext<KwargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext[] assignment_expression() {
			return GetRuleContexts<Assignment_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression(int i) {
			return GetRuleContext<Assignment_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 118, RULE_args);
		try {
			int _alt;
			State = 738;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 718;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 713;
					starred_expression();
					}
					break;
				case LABEL:
				case JUMP:
				case EXPRESSION:
				case CALL:
				case TRUE:
				case FALSE:
				case NONE:
				case MENU:
				case WINDOW:
				case SHOW:
				case HIDE:
				case PAUSE:
				case SCENE:
				case BEHIND:
				case ONLAYER:
				case AS:
				case AT:
				case LSQB:
				case LBRACE:
				case NAME:
				case STRING:
				case NUMBER:
					{
					State = 716;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
					case 1:
						{
						State = 714;
						assignment_expression();
						}
						break;
					case 2:
						{
						State = 715;
						expression();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 730;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 720;
						Match(COMMA);
						State = 726;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STAR:
							{
							State = 721;
							starred_expression();
							}
							break;
						case LABEL:
						case JUMP:
						case EXPRESSION:
						case CALL:
						case TRUE:
						case FALSE:
						case NONE:
						case MENU:
						case WINDOW:
						case SHOW:
						case HIDE:
						case PAUSE:
						case SCENE:
						case BEHIND:
						case ONLAYER:
						case AS:
						case AT:
						case LSQB:
						case LBRACE:
						case NAME:
						case STRING:
						case NUMBER:
							{
							State = 724;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
							case 1:
								{
								State = 722;
								assignment_expression();
								}
								break;
							case 2:
								{
								State = 723;
								expression();
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 732;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
				}
				State = 735;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 733;
					Match(COMMA);
					State = 734;
					kwargs();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737;
				kwargs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext[] kwarg_or_starred() {
			return GetRuleContexts<Kwarg_or_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext kwarg_or_starred(int i) {
			return GetRuleContext<Kwarg_or_starredContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext[] kwarg_or_double_starred() {
			return GetRuleContexts<Kwarg_or_double_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext kwarg_or_double_starred(int i) {
			return GetRuleContext<Kwarg_or_double_starredContext>(i);
		}
		public KwargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwargsContext kwargs() {
		KwargsContext _localctx = new KwargsContext(Context, State);
		EnterRule(_localctx, 120, RULE_kwargs);
		try {
			int _alt;
			State = 767;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 740;
				kwarg_or_starred();
				State = 745;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 741;
						Match(COMMA);
						State = 742;
						kwarg_or_starred();
						}
						} 
					}
					State = 747;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
				}
				State = 757;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 748;
					Match(COMMA);
					State = 749;
					kwarg_or_double_starred();
					State = 754;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 750;
							Match(COMMA);
							State = 751;
							kwarg_or_double_starred();
							}
							} 
						}
						State = 756;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 759;
				kwarg_or_double_starred();
				State = 764;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 760;
						Match(COMMA);
						State = 761;
						kwarg_or_double_starred();
						}
						} 
					}
					State = 766;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Starred_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Starred_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_starred_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStarred_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Starred_expressionContext starred_expression() {
		Starred_expressionContext _localctx = new Starred_expressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_starred_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			Match(STAR);
			State = 770;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_double_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		public Kwarg_or_double_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_double_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_double_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_double_starredContext kwarg_or_double_starred() {
		Kwarg_or_double_starredContext _localctx = new Kwarg_or_double_starredContext(Context, State);
		EnterRule(_localctx, 124, RULE_kwarg_or_double_starred);
		try {
			State = 778;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case MENU:
			case WINDOW:
			case SHOW:
			case HIDE:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case AS:
			case AT:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 772;
				name();
				State = 773;
				Match(EQUALS);
				State = 774;
				expression();
				}
				break;
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 776;
				Match(DOUBLESTAR);
				State = 777;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression() {
			return GetRuleContext<Starred_expressionContext>(0);
		}
		public Kwarg_or_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_starredContext kwarg_or_starred() {
		Kwarg_or_starredContext _localctx = new Kwarg_or_starredContext(Context, State);
		EnterRule(_localctx, 126, RULE_kwarg_or_starred);
		try {
			State = 785;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case MENU:
			case WINDOW:
			case SHOW:
			case HIDE:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case AS:
			case AT:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 780;
				name();
				State = 781;
				Match(EQUALS);
				State = 782;
				expression();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 784;
				starred_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public SlicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlicesContext slices() {
		SlicesContext _localctx = new SlicesContext(Context, State);
		EnterRule(_localctx, 128, RULE_slices);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			named_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext[] star_named_expression() {
			return GetRuleContexts<Star_named_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression(int i) {
			return GetRuleContext<Star_named_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		public Star_named_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionsContext star_named_expressions() {
		Star_named_expressionsContext _localctx = new Star_named_expressionsContext(Context, State);
		EnterRule(_localctx, 130, RULE_star_named_expressions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			star_named_expression();
			State = 794;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 790;
					Match(COMMA);
					State = 791;
					star_named_expression();
					}
					} 
				}
				State = 796;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			}
			State = 798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 797;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public Star_named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionContext star_named_expression() {
		Star_named_expressionContext _localctx = new Star_named_expressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_star_named_expression);
		try {
			State = 803;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 800;
				Match(STAR);
				State = 801;
				sum(0);
				}
				break;
			case LABEL:
			case JUMP:
			case EXPRESSION:
			case CALL:
			case TRUE:
			case FALSE:
			case NONE:
			case MENU:
			case WINDOW:
			case SHOW:
			case HIDE:
			case PAUSE:
			case SCENE:
			case BEHIND:
			case ONLAYER:
			case AS:
			case AT:
			case LSQB:
			case LBRACE:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 802;
				named_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONEQUAL() { return GetToken(RenpyParser.COLONEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			name();
			State = 806;
			Match(COLONEQUAL);
			State = 807;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_expressionContext named_expression() {
		Named_expressionContext _localctx = new Named_expressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_named_expression);
		try {
			State = 811;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 809;
				assignment_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 810;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 49: return sum_sempred((SumContext)_localctx, predIndex);
		case 50: return primary_sempred((PrimaryContext)_localctx, predIndex);
		case 56: return t_primary_sempred((T_primaryContext)_localctx, predIndex);
		}
		return true;
	}
	private bool sum_sempred(SumContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool t_primary_sempred(T_primaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,73,814,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,3,0,140,8,0,1,0,
		5,0,143,8,0,10,0,12,0,146,9,0,1,0,1,0,1,1,4,1,151,8,1,11,1,12,1,152,1,
		2,1,2,1,2,1,2,3,2,159,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,168,8,3,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,182,8,4,1,5,1,5,1,5,3,
		5,187,8,5,1,6,1,6,4,6,191,8,6,11,6,12,6,192,1,6,1,6,3,6,197,8,6,1,6,1,
		6,1,6,1,6,1,6,3,6,204,8,6,3,6,206,8,6,1,7,1,7,1,8,1,8,4,8,212,8,8,11,8,
		12,8,213,1,8,1,8,3,8,218,8,8,1,8,1,8,1,8,1,8,1,8,3,8,225,8,8,3,8,227,8,
		8,1,9,1,9,4,9,231,8,9,11,9,12,9,232,1,9,1,9,3,9,237,8,9,1,9,1,9,1,9,1,
		9,1,9,3,9,244,8,9,3,9,246,8,9,1,10,1,10,1,10,1,11,1,11,3,11,253,8,11,1,
		12,1,12,1,12,1,12,1,12,1,13,1,13,3,13,262,8,13,1,13,1,13,1,13,1,13,1,13,
		1,13,3,13,270,8,13,1,13,4,13,273,8,13,11,13,12,13,274,1,13,1,13,1,14,1,
		14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,291,8,16,1,16,
		3,16,294,8,16,1,17,3,17,297,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,
		18,306,8,18,1,19,1,19,1,19,1,19,3,19,312,8,19,1,19,3,19,315,8,19,1,20,
		1,20,1,21,1,21,1,22,1,22,1,22,3,22,324,8,22,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,3,23,334,8,23,1,24,1,24,1,25,4,25,339,8,25,11,25,12,25,340,
		1,25,5,25,344,8,25,10,25,12,25,347,9,25,1,25,5,25,350,8,25,10,25,12,25,
		353,9,25,1,25,4,25,356,8,25,11,25,12,25,357,3,25,360,8,25,1,25,1,25,1,
		25,3,25,365,8,25,1,25,5,25,368,8,25,10,25,12,25,371,9,25,1,25,1,25,3,25,
		375,8,25,1,25,4,25,378,8,25,11,25,12,25,379,3,25,382,8,25,1,25,3,25,385,
		8,25,1,25,4,25,388,8,25,11,25,12,25,389,1,25,1,25,1,25,3,25,395,8,25,1,
		25,5,25,398,8,25,10,25,12,25,401,9,25,1,25,5,25,404,8,25,10,25,12,25,407,
		9,25,1,25,1,25,3,25,411,8,25,1,25,4,25,414,8,25,11,25,12,25,415,3,25,418,
		8,25,1,25,3,25,421,8,25,1,25,4,25,424,8,25,11,25,12,25,425,1,25,1,25,1,
		25,3,25,431,8,25,1,25,5,25,434,8,25,10,25,12,25,437,9,25,1,25,1,25,3,25,
		441,8,25,1,25,4,25,444,8,25,11,25,12,25,445,1,25,5,25,449,8,25,10,25,12,
		25,452,9,25,1,25,5,25,455,8,25,10,25,12,25,458,9,25,1,25,4,25,461,8,25,
		11,25,12,25,462,3,25,465,8,25,3,25,467,8,25,1,25,3,25,470,8,25,3,25,472,
		8,25,1,26,1,26,1,26,1,27,1,27,3,27,479,8,27,1,27,3,27,482,8,27,1,28,1,
		28,1,28,3,28,487,8,28,1,28,3,28,490,8,28,1,29,1,29,3,29,494,8,29,1,30,
		1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,
		3,33,511,8,33,3,33,513,8,33,1,34,1,34,1,34,1,34,1,34,1,34,3,34,521,8,34,
		3,34,523,8,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,3,36,534,8,
		36,1,37,1,37,3,37,538,8,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,546,8,38,
		3,38,548,8,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,3,40,558,8,40,1,
		40,1,40,1,41,1,41,1,41,5,41,565,8,41,10,41,12,41,568,9,41,1,41,3,41,571,
		8,41,1,42,1,42,1,42,3,42,576,8,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,3,
		44,585,8,44,1,45,1,45,1,46,1,46,1,46,1,46,3,46,593,8,46,1,47,1,47,1,47,
		1,47,1,47,1,47,1,47,3,47,602,8,47,1,47,1,47,1,47,3,47,607,8,47,3,47,609,
		8,47,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,5,49,619,8,49,10,49,12,49,
		622,9,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,632,8,50,1,50,1,
		50,1,50,1,50,1,50,3,50,639,8,50,5,50,641,8,50,10,50,12,50,644,9,50,1,51,
		1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,654,8,51,1,52,1,52,1,53,4,53,659,
		8,53,11,53,12,53,660,1,54,1,54,1,54,1,54,1,54,1,54,3,54,669,8,54,1,55,
		1,55,1,55,1,55,1,55,1,55,1,55,3,55,678,8,55,1,56,1,56,1,56,1,56,1,56,1,
		56,1,56,1,56,1,56,3,56,689,8,56,1,56,1,56,1,56,1,56,1,56,3,56,696,8,56,
		5,56,698,8,56,10,56,12,56,701,9,56,1,57,1,57,1,57,3,57,706,8,57,1,57,1,
		57,1,58,1,58,3,58,712,8,58,1,59,1,59,1,59,3,59,717,8,59,3,59,719,8,59,
		1,59,1,59,1,59,1,59,3,59,725,8,59,3,59,727,8,59,5,59,729,8,59,10,59,12,
		59,732,9,59,1,59,1,59,3,59,736,8,59,1,59,3,59,739,8,59,1,60,1,60,1,60,
		5,60,744,8,60,10,60,12,60,747,9,60,1,60,1,60,1,60,1,60,5,60,753,8,60,10,
		60,12,60,756,9,60,3,60,758,8,60,1,60,1,60,1,60,5,60,763,8,60,10,60,12,
		60,766,9,60,3,60,768,8,60,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,
		3,62,779,8,62,1,63,1,63,1,63,1,63,1,63,3,63,786,8,63,1,64,1,64,1,65,1,
		65,1,65,5,65,793,8,65,10,65,12,65,796,9,65,1,65,3,65,799,8,65,1,66,1,66,
		1,66,3,66,804,8,66,1,67,1,67,1,67,1,67,1,68,1,68,3,68,812,8,68,1,68,0,
		3,98,100,112,69,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
		88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,0,4,1,0,19,20,1,0,46,57,1,0,33,34,4,0,3,6,16,16,
		18,26,66,66,888,0,139,1,0,0,0,2,150,1,0,0,0,4,158,1,0,0,0,6,167,1,0,0,
		0,8,181,1,0,0,0,10,183,1,0,0,0,12,205,1,0,0,0,14,207,1,0,0,0,16,226,1,
		0,0,0,18,245,1,0,0,0,20,247,1,0,0,0,22,252,1,0,0,0,24,254,1,0,0,0,26,259,
		1,0,0,0,28,278,1,0,0,0,30,282,1,0,0,0,32,284,1,0,0,0,34,296,1,0,0,0,36,
		305,1,0,0,0,38,307,1,0,0,0,40,316,1,0,0,0,42,318,1,0,0,0,44,323,1,0,0,
		0,46,333,1,0,0,0,48,335,1,0,0,0,50,471,1,0,0,0,52,473,1,0,0,0,54,476,1,
		0,0,0,56,483,1,0,0,0,58,491,1,0,0,0,60,495,1,0,0,0,62,498,1,0,0,0,64,501,
		1,0,0,0,66,504,1,0,0,0,68,514,1,0,0,0,70,524,1,0,0,0,72,528,1,0,0,0,74,
		535,1,0,0,0,76,541,1,0,0,0,78,551,1,0,0,0,80,555,1,0,0,0,82,561,1,0,0,
		0,84,575,1,0,0,0,86,577,1,0,0,0,88,584,1,0,0,0,90,586,1,0,0,0,92,588,1,
		0,0,0,94,608,1,0,0,0,96,610,1,0,0,0,98,612,1,0,0,0,100,623,1,0,0,0,102,
		653,1,0,0,0,104,655,1,0,0,0,106,658,1,0,0,0,108,668,1,0,0,0,110,670,1,
		0,0,0,112,679,1,0,0,0,114,702,1,0,0,0,116,709,1,0,0,0,118,738,1,0,0,0,
		120,767,1,0,0,0,122,769,1,0,0,0,124,778,1,0,0,0,126,785,1,0,0,0,128,787,
		1,0,0,0,130,789,1,0,0,0,132,803,1,0,0,0,134,805,1,0,0,0,136,811,1,0,0,
		0,138,140,3,2,1,0,139,138,1,0,0,0,139,140,1,0,0,0,140,144,1,0,0,0,141,
		143,5,69,0,0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,
		0,0,0,145,147,1,0,0,0,146,144,1,0,0,0,147,148,5,0,0,1,148,1,1,0,0,0,149,
		151,3,4,2,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,
		0,0,0,153,3,1,0,0,0,154,155,3,8,4,0,155,156,5,69,0,0,156,159,1,0,0,0,157,
		159,3,6,3,0,158,154,1,0,0,0,158,157,1,0,0,0,159,5,1,0,0,0,160,168,3,26,
		13,0,161,168,3,66,33,0,162,168,3,72,36,0,163,164,3,32,16,0,164,165,5,59,
		0,0,165,166,3,24,12,0,166,168,1,0,0,0,167,160,1,0,0,0,167,161,1,0,0,0,
		167,162,1,0,0,0,167,163,1,0,0,0,168,7,1,0,0,0,169,182,3,30,15,0,170,182,
		3,36,18,0,171,182,3,32,16,0,172,182,3,38,19,0,173,182,3,40,20,0,174,182,
		3,44,22,0,175,182,3,20,10,0,176,182,3,10,5,0,177,182,3,12,6,0,178,182,
		3,14,7,0,179,182,3,16,8,0,180,182,3,18,9,0,181,169,1,0,0,0,181,170,1,0,
		0,0,181,171,1,0,0,0,181,172,1,0,0,0,181,173,1,0,0,0,181,174,1,0,0,0,181,
		175,1,0,0,0,181,176,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,181,179,1,
		0,0,0,181,180,1,0,0,0,182,9,1,0,0,0,183,184,5,18,0,0,184,186,7,0,0,0,185,
		187,3,90,45,0,186,185,1,0,0,0,186,187,1,0,0,0,187,11,1,0,0,0,188,190,5,
		22,0,0,189,191,5,66,0,0,190,189,1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,
		0,192,193,1,0,0,0,193,196,1,0,0,0,194,195,5,17,0,0,195,197,3,90,45,0,196,
		194,1,0,0,0,196,197,1,0,0,0,197,206,1,0,0,0,198,199,5,22,0,0,199,200,5,
		5,0,0,200,203,3,90,45,0,201,202,5,17,0,0,202,204,3,90,45,0,203,201,1,0,
		0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,188,1,0,0,0,205,198,1,0,0,0,206,
		13,1,0,0,0,207,208,5,21,0,0,208,15,1,0,0,0,209,211,5,19,0,0,210,212,5,
		66,0,0,211,210,1,0,0,0,212,213,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,
		214,217,1,0,0,0,215,216,5,17,0,0,216,218,3,90,45,0,217,215,1,0,0,0,217,
		218,1,0,0,0,218,227,1,0,0,0,219,220,5,19,0,0,220,221,5,5,0,0,221,224,3,
		90,45,0,222,223,5,17,0,0,223,225,3,90,45,0,224,222,1,0,0,0,224,225,1,0,
		0,0,225,227,1,0,0,0,226,209,1,0,0,0,226,219,1,0,0,0,227,17,1,0,0,0,228,
		230,5,20,0,0,229,231,5,66,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,
		1,0,0,0,232,233,1,0,0,0,233,236,1,0,0,0,234,235,5,17,0,0,235,237,3,90,
		45,0,236,234,1,0,0,0,236,237,1,0,0,0,237,246,1,0,0,0,238,239,5,20,0,0,
		239,240,5,5,0,0,240,243,3,90,45,0,241,242,5,17,0,0,242,244,3,90,45,0,243,
		241,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,228,1,0,0,0,245,238,1,
		0,0,0,246,19,1,0,0,0,247,248,5,65,0,0,248,249,3,22,11,0,249,21,1,0,0,0,
		250,253,3,46,23,0,251,253,3,90,45,0,252,250,1,0,0,0,252,251,1,0,0,0,253,
		23,1,0,0,0,254,255,5,69,0,0,255,256,5,1,0,0,256,257,3,2,1,0,257,258,5,
		2,0,0,258,25,1,0,0,0,259,261,5,16,0,0,260,262,3,34,17,0,261,260,1,0,0,
		0,261,262,1,0,0,0,262,263,1,0,0,0,263,264,5,59,0,0,264,265,5,69,0,0,265,
		269,5,1,0,0,266,267,3,44,22,0,267,268,5,69,0,0,268,270,1,0,0,0,269,266,
		1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,273,3,28,14,0,272,271,1,0,
		0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,
		277,5,2,0,0,277,27,1,0,0,0,278,279,5,67,0,0,279,280,5,59,0,0,280,281,3,
		24,12,0,281,29,1,0,0,0,282,283,5,11,0,0,283,31,1,0,0,0,284,285,5,3,0,0,
		285,290,3,34,17,0,286,287,5,27,0,0,287,288,3,50,25,0,288,289,5,30,0,0,
		289,291,1,0,0,0,290,286,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,294,
		5,59,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,33,1,0,0,0,295,297,5,58,0,
		0,296,295,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,5,66,0,0,299,
		35,1,0,0,0,300,301,5,4,0,0,301,306,3,34,17,0,302,303,5,4,0,0,303,304,5,
		5,0,0,304,306,3,90,45,0,305,300,1,0,0,0,305,302,1,0,0,0,306,37,1,0,0,0,
		307,308,5,6,0,0,308,314,3,34,17,0,309,311,5,27,0,0,310,312,3,116,58,0,
		311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,315,5,30,0,0,314,309,
		1,0,0,0,314,315,1,0,0,0,315,39,1,0,0,0,316,317,3,42,21,0,317,41,1,0,0,
		0,318,319,5,12,0,0,319,43,1,0,0,0,320,321,5,66,0,0,321,324,5,67,0,0,322,
		324,5,67,0,0,323,320,1,0,0,0,323,322,1,0,0,0,324,45,1,0,0,0,325,326,3,
		108,54,0,326,327,5,60,0,0,327,328,3,90,45,0,328,334,1,0,0,0,329,330,3,
		108,54,0,330,331,3,48,24,0,331,332,3,90,45,0,332,334,1,0,0,0,333,325,1,
		0,0,0,333,329,1,0,0,0,334,47,1,0,0,0,335,336,7,1,0,0,336,49,1,0,0,0,337,
		339,3,54,27,0,338,337,1,0,0,0,339,340,1,0,0,0,340,338,1,0,0,0,340,341,
		1,0,0,0,341,345,1,0,0,0,342,344,3,56,28,0,343,342,1,0,0,0,344,347,1,0,
		0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,360,1,0,0,0,347,345,1,0,0,0,348,
		350,3,54,27,0,349,348,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,
		1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,354,356,3,56,28,0,355,354,1,0,
		0,0,356,357,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,
		338,1,0,0,0,359,351,1,0,0,0,360,361,1,0,0,0,361,362,5,36,0,0,362,363,5,
		61,0,0,363,365,1,0,0,0,364,359,1,0,0,0,364,365,1,0,0,0,365,369,1,0,0,0,
		366,368,3,56,28,0,367,366,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,
		370,1,0,0,0,370,381,1,0,0,0,371,369,1,0,0,0,372,373,5,62,0,0,373,375,5,
		61,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,377,1,0,0,0,376,378,3,56,28,
		0,377,376,1,0,0,0,378,379,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,
		382,1,0,0,0,381,374,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,385,3,
		52,26,0,384,383,1,0,0,0,384,385,1,0,0,0,385,472,1,0,0,0,386,388,3,54,27,
		0,387,386,1,0,0,0,388,389,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,
		391,1,0,0,0,391,392,5,36,0,0,392,393,5,61,0,0,393,395,1,0,0,0,394,387,
		1,0,0,0,394,395,1,0,0,0,395,399,1,0,0,0,396,398,3,54,27,0,397,396,1,0,
		0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,405,1,0,0,0,401,
		399,1,0,0,0,402,404,3,56,28,0,403,402,1,0,0,0,404,407,1,0,0,0,405,403,
		1,0,0,0,405,406,1,0,0,0,406,417,1,0,0,0,407,405,1,0,0,0,408,409,5,62,0,
		0,409,411,5,61,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,
		414,3,56,28,0,413,412,1,0,0,0,414,415,1,0,0,0,415,413,1,0,0,0,415,416,
		1,0,0,0,416,418,1,0,0,0,417,410,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,
		0,419,421,3,52,26,0,420,419,1,0,0,0,420,421,1,0,0,0,421,472,1,0,0,0,422,
		424,3,54,27,0,423,422,1,0,0,0,424,425,1,0,0,0,425,423,1,0,0,0,425,426,
		1,0,0,0,426,427,1,0,0,0,427,428,5,36,0,0,428,429,5,61,0,0,429,431,1,0,
		0,0,430,423,1,0,0,0,430,431,1,0,0,0,431,435,1,0,0,0,432,434,3,54,27,0,
		433,432,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,466,
		1,0,0,0,437,435,1,0,0,0,438,439,5,62,0,0,439,441,5,61,0,0,440,438,1,0,
		0,0,440,441,1,0,0,0,441,464,1,0,0,0,442,444,3,54,27,0,443,442,1,0,0,0,
		444,445,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,450,1,0,0,0,447,449,
		3,56,28,0,448,447,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,
		0,0,451,465,1,0,0,0,452,450,1,0,0,0,453,455,3,54,27,0,454,453,1,0,0,0,
		455,458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,460,1,0,0,0,458,456,
		1,0,0,0,459,461,3,56,28,0,460,459,1,0,0,0,461,462,1,0,0,0,462,460,1,0,
		0,0,462,463,1,0,0,0,463,465,1,0,0,0,464,443,1,0,0,0,464,456,1,0,0,0,465,
		467,1,0,0,0,466,440,1,0,0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,470,3,
		52,26,0,469,468,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,364,1,0,0,
		0,471,394,1,0,0,0,471,430,1,0,0,0,472,51,1,0,0,0,473,474,5,63,0,0,474,
		475,3,54,27,0,475,53,1,0,0,0,476,478,3,58,29,0,477,479,5,61,0,0,478,477,
		1,0,0,0,478,479,1,0,0,0,479,481,1,0,0,0,480,482,3,64,32,0,481,480,1,0,
		0,0,481,482,1,0,0,0,482,55,1,0,0,0,483,484,3,58,29,0,484,486,3,62,31,0,
		485,487,5,61,0,0,486,485,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,490,
		3,64,32,0,489,488,1,0,0,0,489,490,1,0,0,0,490,57,1,0,0,0,491,493,5,66,
		0,0,492,494,3,60,30,0,493,492,1,0,0,0,493,494,1,0,0,0,494,59,1,0,0,0,495,
		496,5,59,0,0,496,497,3,90,45,0,497,61,1,0,0,0,498,499,5,60,0,0,499,500,
		3,90,45,0,500,63,1,0,0,0,501,502,5,35,0,0,502,503,3,90,45,0,503,65,1,0,
		0,0,504,505,5,7,0,0,505,506,3,136,68,0,506,507,5,59,0,0,507,512,3,24,12,
		0,508,513,3,68,34,0,509,511,3,70,35,0,510,509,1,0,0,0,510,511,1,0,0,0,
		511,513,1,0,0,0,512,508,1,0,0,0,512,510,1,0,0,0,513,67,1,0,0,0,514,515,
		5,8,0,0,515,516,3,136,68,0,516,517,5,59,0,0,517,522,3,24,12,0,518,523,
		3,68,34,0,519,521,3,70,35,0,520,519,1,0,0,0,520,521,1,0,0,0,521,523,1,
		0,0,0,522,518,1,0,0,0,522,520,1,0,0,0,523,69,1,0,0,0,524,525,5,9,0,0,525,
		526,5,59,0,0,526,527,3,24,12,0,527,71,1,0,0,0,528,529,5,10,0,0,529,530,
		3,136,68,0,530,531,5,59,0,0,531,533,3,24,12,0,532,534,3,70,35,0,533,532,
		1,0,0,0,533,534,1,0,0,0,534,73,1,0,0,0,535,537,5,28,0,0,536,538,3,130,
		65,0,537,536,1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,540,5,31,0,0,
		540,75,1,0,0,0,541,547,5,27,0,0,542,543,3,132,66,0,543,545,5,61,0,0,544,
		546,3,130,65,0,545,544,1,0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,547,542,
		1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,550,5,30,0,0,550,77,1,0,0,
		0,551,552,5,29,0,0,552,553,3,130,65,0,553,554,5,32,0,0,554,79,1,0,0,0,
		555,557,5,29,0,0,556,558,3,82,41,0,557,556,1,0,0,0,557,558,1,0,0,0,558,
		559,1,0,0,0,559,560,5,32,0,0,560,81,1,0,0,0,561,566,3,84,42,0,562,563,
		5,61,0,0,563,565,3,84,42,0,564,562,1,0,0,0,565,568,1,0,0,0,566,564,1,0,
		0,0,566,567,1,0,0,0,567,570,1,0,0,0,568,566,1,0,0,0,569,571,5,61,0,0,570,
		569,1,0,0,0,570,571,1,0,0,0,571,83,1,0,0,0,572,573,5,63,0,0,573,576,3,
		98,49,0,574,576,3,86,43,0,575,572,1,0,0,0,575,574,1,0,0,0,576,85,1,0,0,
		0,577,578,3,90,45,0,578,579,5,59,0,0,579,580,3,90,45,0,580,87,1,0,0,0,
		581,582,5,62,0,0,582,585,3,98,49,0,583,585,3,90,45,0,584,581,1,0,0,0,584,
		583,1,0,0,0,585,89,1,0,0,0,586,587,3,92,46,0,587,91,1,0,0,0,588,592,3,
		96,48,0,589,590,3,94,47,0,590,591,3,92,46,0,591,593,1,0,0,0,592,589,1,
		0,0,0,592,593,1,0,0,0,593,93,1,0,0,0,594,609,5,37,0,0,595,609,5,38,0,0,
		596,609,5,39,0,0,597,609,5,40,0,0,598,609,5,41,0,0,599,609,5,42,0,0,600,
		602,5,43,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,609,5,
		44,0,0,604,606,5,45,0,0,605,607,5,43,0,0,606,605,1,0,0,0,606,607,1,0,0,
		0,607,609,1,0,0,0,608,594,1,0,0,0,608,595,1,0,0,0,608,596,1,0,0,0,608,
		597,1,0,0,0,608,598,1,0,0,0,608,599,1,0,0,0,608,601,1,0,0,0,608,604,1,
		0,0,0,609,95,1,0,0,0,610,611,3,98,49,0,611,97,1,0,0,0,612,613,6,49,-1,
		0,613,614,3,100,50,0,614,620,1,0,0,0,615,616,10,2,0,0,616,617,7,2,0,0,
		617,619,3,100,50,0,618,615,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,
		621,1,0,0,0,621,99,1,0,0,0,622,620,1,0,0,0,623,624,6,50,-1,0,624,625,3,
		102,51,0,625,642,1,0,0,0,626,638,10,2,0,0,627,628,5,58,0,0,628,639,3,104,
		52,0,629,631,5,27,0,0,630,632,3,116,58,0,631,630,1,0,0,0,631,632,1,0,0,
		0,632,633,1,0,0,0,633,639,5,30,0,0,634,635,5,28,0,0,635,636,3,128,64,0,
		636,637,5,31,0,0,637,639,1,0,0,0,638,627,1,0,0,0,638,629,1,0,0,0,638,634,
		1,0,0,0,639,641,1,0,0,0,640,626,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,
		0,642,643,1,0,0,0,643,101,1,0,0,0,644,642,1,0,0,0,645,654,3,106,53,0,646,
		654,3,74,37,0,647,654,3,80,40,0,648,654,3,104,52,0,649,654,5,13,0,0,650,
		654,5,14,0,0,651,654,5,15,0,0,652,654,5,68,0,0,653,645,1,0,0,0,653,646,
		1,0,0,0,653,647,1,0,0,0,653,648,1,0,0,0,653,649,1,0,0,0,653,650,1,0,0,
		0,653,651,1,0,0,0,653,652,1,0,0,0,654,103,1,0,0,0,655,656,7,3,0,0,656,
		105,1,0,0,0,657,659,5,67,0,0,658,657,1,0,0,0,659,660,1,0,0,0,660,658,1,
		0,0,0,660,661,1,0,0,0,661,107,1,0,0,0,662,669,3,110,55,0,663,669,3,104,
		52,0,664,665,5,27,0,0,665,666,3,108,54,0,666,667,5,30,0,0,667,669,1,0,
		0,0,668,662,1,0,0,0,668,663,1,0,0,0,668,664,1,0,0,0,669,109,1,0,0,0,670,
		677,3,112,56,0,671,672,5,58,0,0,672,678,3,104,52,0,673,674,5,28,0,0,674,
		675,3,128,64,0,675,676,5,31,0,0,676,678,1,0,0,0,677,671,1,0,0,0,677,673,
		1,0,0,0,678,111,1,0,0,0,679,680,6,56,-1,0,680,681,3,104,52,0,681,699,1,
		0,0,0,682,695,10,2,0,0,683,684,5,58,0,0,684,696,3,104,52,0,685,696,3,114,
		57,0,686,688,5,27,0,0,687,689,3,116,58,0,688,687,1,0,0,0,688,689,1,0,0,
		0,689,690,1,0,0,0,690,696,5,30,0,0,691,692,5,28,0,0,692,693,3,128,64,0,
		693,694,5,31,0,0,694,696,1,0,0,0,695,683,1,0,0,0,695,685,1,0,0,0,695,686,
		1,0,0,0,695,691,1,0,0,0,696,698,1,0,0,0,697,682,1,0,0,0,698,701,1,0,0,
		0,699,697,1,0,0,0,699,700,1,0,0,0,700,113,1,0,0,0,701,699,1,0,0,0,702,
		705,5,27,0,0,703,706,3,134,67,0,704,706,3,90,45,0,705,703,1,0,0,0,705,
		704,1,0,0,0,706,707,1,0,0,0,707,708,5,30,0,0,708,115,1,0,0,0,709,711,3,
		118,59,0,710,712,5,61,0,0,711,710,1,0,0,0,711,712,1,0,0,0,712,117,1,0,
		0,0,713,719,3,122,61,0,714,717,3,134,67,0,715,717,3,90,45,0,716,714,1,
		0,0,0,716,715,1,0,0,0,717,719,1,0,0,0,718,713,1,0,0,0,718,716,1,0,0,0,
		719,730,1,0,0,0,720,726,5,61,0,0,721,727,3,122,61,0,722,725,3,134,67,0,
		723,725,3,90,45,0,724,722,1,0,0,0,724,723,1,0,0,0,725,727,1,0,0,0,726,
		721,1,0,0,0,726,724,1,0,0,0,727,729,1,0,0,0,728,720,1,0,0,0,729,732,1,
		0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,735,1,0,0,0,732,730,1,0,0,0,
		733,734,5,61,0,0,734,736,3,120,60,0,735,733,1,0,0,0,735,736,1,0,0,0,736,
		739,1,0,0,0,737,739,3,120,60,0,738,718,1,0,0,0,738,737,1,0,0,0,739,119,
		1,0,0,0,740,745,3,126,63,0,741,742,5,61,0,0,742,744,3,126,63,0,743,741,
		1,0,0,0,744,747,1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,757,1,0,0,
		0,747,745,1,0,0,0,748,749,5,61,0,0,749,754,3,124,62,0,750,751,5,61,0,0,
		751,753,3,124,62,0,752,750,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,
		755,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,757,748,1,0,0,0,757,758,1,
		0,0,0,758,768,1,0,0,0,759,764,3,124,62,0,760,761,5,61,0,0,761,763,3,124,
		62,0,762,760,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,764,765,1,0,0,0,765,
		768,1,0,0,0,766,764,1,0,0,0,767,740,1,0,0,0,767,759,1,0,0,0,768,121,1,
		0,0,0,769,770,5,62,0,0,770,771,3,90,45,0,771,123,1,0,0,0,772,773,3,104,
		52,0,773,774,5,60,0,0,774,775,3,90,45,0,775,779,1,0,0,0,776,777,5,63,0,
		0,777,779,3,90,45,0,778,772,1,0,0,0,778,776,1,0,0,0,779,125,1,0,0,0,780,
		781,3,104,52,0,781,782,5,60,0,0,782,783,3,90,45,0,783,786,1,0,0,0,784,
		786,3,122,61,0,785,780,1,0,0,0,785,784,1,0,0,0,786,127,1,0,0,0,787,788,
		3,136,68,0,788,129,1,0,0,0,789,794,3,132,66,0,790,791,5,61,0,0,791,793,
		3,132,66,0,792,790,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,794,795,1,0,
		0,0,795,798,1,0,0,0,796,794,1,0,0,0,797,799,5,61,0,0,798,797,1,0,0,0,798,
		799,1,0,0,0,799,131,1,0,0,0,800,801,5,62,0,0,801,804,3,98,49,0,802,804,
		3,136,68,0,803,800,1,0,0,0,803,802,1,0,0,0,804,133,1,0,0,0,805,806,3,104,
		52,0,806,807,5,64,0,0,807,808,3,90,45,0,808,135,1,0,0,0,809,812,3,134,
		67,0,810,812,3,90,45,0,811,809,1,0,0,0,811,810,1,0,0,0,812,137,1,0,0,0,
		115,139,144,152,158,167,181,186,192,196,203,205,213,217,224,226,232,236,
		243,245,252,261,269,274,290,293,296,305,311,314,323,333,340,345,351,357,
		359,364,369,374,379,381,384,389,394,399,405,410,415,417,420,425,430,435,
		440,445,450,456,462,464,466,469,471,478,481,486,489,493,510,512,520,522,
		533,537,545,547,557,566,570,575,584,592,601,606,608,620,631,638,642,653,
		660,668,677,688,695,699,705,711,716,718,724,726,730,735,738,745,754,757,
		764,767,778,785,794,798,803,811
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
