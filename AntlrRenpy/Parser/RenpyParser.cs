//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/markd/Documents/GitHub/Ryngine/AntlrRenpy/Parser/RenpyParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RenpyParser : RenpyParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, LABEL=3, JUMP=4, CALL=5, PASS=6, RETURN=7, WITH=8, 
		MENU=9, TRUE=10, FALSE=11, NONE=12, LPAR=13, LSQB=14, LBRACE=15, RPAR=16, 
		RSQB=17, RBRACE=18, PLUS=19, MINUS=20, ARROW=21, SLASH=22, DOT=23, COLON=24, 
		EQUALS=25, COMMA=26, STAR=27, DOUBLESTAR=28, COLONEQUAL=29, NAME=30, STRING=31, 
		NUMBER=32, NEWLINE=33, COMMENT=34, WS=35, EXPLICIT_LINE_JOINING=36, ERRORTOKEN=37;
	public const int
		RULE_entire_tree = 0, RULE_statements = 1, RULE_statement = 2, RULE_block_statements = 3, 
		RULE_simple_statements = 4, RULE_block = 5, RULE_menu = 6, RULE_menu_item = 7, 
		RULE_pass_statement = 8, RULE_label = 9, RULE_label_name = 10, RULE_jump = 11, 
		RULE_jump_constant = 12, RULE_call = 13, RULE_return = 14, RULE_return_simple = 15, 
		RULE_say = 16, RULE_assignment = 17, RULE_parameters = 18, RULE_kwds = 19, 
		RULE_param_no_default = 20, RULE_param_with_default = 21, RULE_param = 22, 
		RULE_annotation = 23, RULE_default_assignment = 24, RULE_type_comment = 25, 
		RULE_star_expression = 26, RULE_expression = 27, RULE_sum = 28, RULE_primary = 29, 
		RULE_atom = 30, RULE_strings = 31, RULE_single_target = 32, RULE_single_subscript_attribute_target = 33, 
		RULE_t_primary = 34, RULE_genexp = 35, RULE_arguments = 36, RULE_args = 37, 
		RULE_kwargs = 38, RULE_starred_expression = 39, RULE_kwarg_or_double_starred = 40, 
		RULE_kwarg_or_starred = 41, RULE_assignment_expression = 42, RULE_slices = 43, 
		RULE_named_expression = 44;
	public static readonly string[] ruleNames = {
		"entire_tree", "statements", "statement", "block_statements", "simple_statements", 
		"block", "menu", "menu_item", "pass_statement", "label", "label_name", 
		"jump", "jump_constant", "call", "return", "return_simple", "say", "assignment", 
		"parameters", "kwds", "param_no_default", "param_with_default", "param", 
		"annotation", "default_assignment", "type_comment", "star_expression", 
		"expression", "sum", "primary", "atom", "strings", "single_target", "single_subscript_attribute_target", 
		"t_primary", "genexp", "arguments", "args", "kwargs", "starred_expression", 
		"kwarg_or_double_starred", "kwarg_or_starred", "assignment_expression", 
		"slices", "named_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'label'", "'jump'", "'call'", "'pass'", "'return'", 
		"'with'", "'menu'", "'True'", "'False'", "'None'", "'('", "'['", "'{'", 
		"')'", "']'", "'}'", "'+'", "'-'", "'->'", "'/'", "'.'", "':'", "'='", 
		"','", "'*'", "'**'", "':='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "LABEL", "JUMP", "CALL", "PASS", "RETURN", "WITH", 
		"MENU", "TRUE", "FALSE", "NONE", "LPAR", "LSQB", "LBRACE", "RPAR", "RSQB", 
		"RBRACE", "PLUS", "MINUS", "ARROW", "SLASH", "DOT", "COLON", "EQUALS", 
		"COMMA", "STAR", "DOUBLESTAR", "COLONEQUAL", "NAME", "STRING", "NUMBER", 
		"NEWLINE", "COMMENT", "WS", "EXPLICIT_LINE_JOINING", "ERRORTOKEN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RenpyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RenpyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RenpyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RenpyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Entire_treeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RenpyParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RenpyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RenpyParser.NEWLINE, i);
		}
		public Entire_treeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entire_tree; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterEntire_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitEntire_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntire_tree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entire_treeContext entire_tree() {
		Entire_treeContext _localctx = new Entire_treeContext(Context, State);
		EnterRule(_localctx, 0, RULE_entire_tree);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3221234424L) != 0)) {
				{
				State = 90;
				statements();
				}
			}

			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 93;
				Match(NEWLINE);
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 101;
				statement();
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3221234424L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_statementsContext simple_statements() {
			return GetRuleContext<Simple_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementsContext block_statements() {
			return GetRuleContext<Block_statementsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				simple_statements();
				State = 107;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				block_statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MenuContext menu() {
			return GetRuleContext<MenuContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Block_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementsContext block_statements() {
		Block_statementsContext _localctx = new Block_statementsContext(Context, State);
		EnterRule(_localctx, 6, RULE_block_statements);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MENU:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				menu();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113;
				label();
				State = 114;
				Match(COLON);
				State = 115;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pass_statementContext pass_statement() {
			return GetRuleContext<Pass_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MenuContext menu() {
			return GetRuleContext<MenuContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpContext jump() {
			return GetRuleContext<JumpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SayContext say() {
			return GetRuleContext<SayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Simple_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSimple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSimple_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_statementsContext simple_statements() {
		Simple_statementsContext _localctx = new Simple_statementsContext(Context, State);
		EnterRule(_localctx, 8, RULE_simple_statements);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				pass_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				menu();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121;
				jump();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 122;
				label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 123;
				call();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 124;
				@return();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 125;
				say();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 126;
				assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(RenpyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(NEWLINE);
			State = 130;
			Match(INDENT);
			State = 131;
			statements();
			State = 132;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MenuContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENU() { return GetToken(RenpyParser.MENU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RenpyParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RenpyParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SayContext say() {
			return GetRuleContext<SayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext[] menu_item() {
			return GetRuleContexts<Menu_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_itemContext menu_item(int i) {
			return GetRuleContext<Menu_itemContext>(i);
		}
		public MenuContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterMenu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitMenu(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MenuContext menu() {
		MenuContext _localctx = new MenuContext(Context, State);
		EnterRule(_localctx, 12, RULE_menu);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(MENU);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT || _la==NAME) {
				{
				State = 135;
				label_name();
				}
			}

			State = 138;
			Match(COLON);
			State = 139;
			Match(NEWLINE);
			State = 140;
			Match(INDENT);
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 141;
				say();
				State = 142;
				Match(NEWLINE);
				}
				break;
			}
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 146;
				menu_item();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			State = 151;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Menu_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterMenu_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitMenu_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_itemContext menu_item() {
		Menu_itemContext _localctx = new Menu_itemContext(Context, State);
		EnterRule(_localctx, 14, RULE_menu_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(STRING);
			State = 154;
			Match(COLON);
			State = 155;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pass_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(RenpyParser.PASS, 0); }
		public Pass_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pass_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPass_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPass_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPass_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pass_statementContext pass_statement() {
		Pass_statementContext _localctx = new Pass_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_pass_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(PASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(RenpyParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 18, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(LABEL);
			State = 160;
			label_name();
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 161;
				Match(LPAR);
				{
				State = 162;
				parameters();
				}
				State = 163;
				Match(RPAR);
				}
			}

			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 167;
				Match(COLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		public Label_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterLabel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitLabel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_nameContext label_name() {
		Label_nameContext _localctx = new Label_nameContext(Context, State);
		EnterRule(_localctx, 20, RULE_label_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 170;
				Match(DOT);
				}
			}

			State = 173;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Jump_constantContext jump_constant() {
			return GetRuleContext<Jump_constantContext>(0);
		}
		public JumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitJump(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpContext jump() {
		JumpContext _localctx = new JumpContext(Context, State);
		EnterRule(_localctx, 22, RULE_jump);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			jump_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(RenpyParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Jump_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterJump_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitJump_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_constantContext jump_constant() {
		Jump_constantContext _localctx = new Jump_constantContext(Context, State);
		EnterRule(_localctx, 24, RULE_jump_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(JUMP);
			State = 178;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(RenpyParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 26, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(CALL);
			State = 181;
			label_name();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 182;
				Match(LPAR);
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7918853120L) != 0)) {
					{
					State = 183;
					arguments();
					}
				}

				State = 186;
				Match(RPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_simpleContext return_simple() {
			return GetRuleContext<Return_simpleContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 28, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			return_simple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_simpleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(RenpyParser.RETURN, 0); }
		public Return_simpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_simple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterReturn_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitReturn_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_simple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_simpleContext return_simple() {
		Return_simpleContext _localctx = new Return_simpleContext(Context, State);
		EnterRule(_localctx, 30, RULE_return_simple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		public SayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_say; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SayContext say() {
		SayContext _localctx = new SayContext(Context, State);
		EnterRule(_localctx, 32, RULE_say);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				Match(NAME);
				State = 194;
				Match(STRING);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			single_target();
			State = 199;
			Match(EQUALS);
			State = 200;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext[] param_with_default() {
			return GetRuleContexts<Param_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext param_with_default(int i) {
			return GetRuleContext<Param_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwdsContext kwds() {
			return GetRuleContext<KwdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(RenpyParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext[] param_no_default() {
			return GetRuleContexts<Param_no_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default(int i) {
			return GetRuleContext<Param_no_defaultContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameters);
		int _la;
		try {
			int _alt;
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 224;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						{
						State = 203;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 202;
								param_no_default();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 205;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 210;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NAME) {
							{
							{
							State = 207;
							param_with_default();
							}
							}
							State = 212;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						break;
					case 2:
						{
						{
						State = 216;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 213;
								param_no_default();
								}
								} 
							}
							State = 218;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
						}
						State = 220;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 219;
							param_with_default();
							}
							}
							State = 222;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==NAME );
						}
						}
						break;
					}
					{
					State = 226;
					Match(SLASH);
					State = 227;
					Match(COMMA);
					}
					}
					break;
				}
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 231;
						param_with_default();
						}
						} 
					}
					State = 236;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 237;
						Match(STAR);
						State = 238;
						Match(COMMA);
						}
					}

					State = 242;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 241;
						param_with_default();
						}
						}
						State = 244;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					}
				}

				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 248;
					kwds();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 251;
						param_no_default();
						}
						}
						State = 254;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					{
					State = 256;
					Match(SLASH);
					State = 257;
					Match(COMMA);
					}
					}
					break;
				}
				State = 264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 261;
						param_no_default();
						}
						} 
					}
					State = 266;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				}
				State = 270;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 267;
						param_with_default();
						}
						} 
					}
					State = 272;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 273;
						Match(STAR);
						State = 274;
						Match(COMMA);
						}
					}

					State = 278;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 277;
						param_with_default();
						}
						}
						State = 280;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					}
				}

				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 284;
					kwds();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 295;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 288;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 287;
						param_no_default();
						}
						}
						State = 290;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==NAME );
					{
					State = 292;
					Match(SLASH);
					State = 293;
					Match(COMMA);
					}
					}
					break;
				}
				State = 300;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 297;
						param_no_default();
						}
						} 
					}
					State = 302;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				}
				State = 331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==NAME) {
					{
					State = 305;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STAR) {
						{
						State = 303;
						Match(STAR);
						State = 304;
						Match(COMMA);
						}
					}

					State = 329;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
					case 1:
						{
						{
						State = 308;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 307;
								param_no_default();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 310;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 315;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NAME) {
							{
							{
							State = 312;
							param_with_default();
							}
							}
							State = 317;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						break;
					case 2:
						{
						{
						State = 321;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 318;
								param_no_default();
								}
								} 
							}
							State = 323;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
						}
						State = 325;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 324;
							param_with_default();
							}
							}
							State = 327;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==NAME );
						}
						}
						break;
					}
					}
				}

				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 333;
					kwds();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default() {
			return GetRuleContext<Param_no_defaultContext>(0);
		}
		public KwdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwdsContext kwds() {
		KwdsContext _localctx = new KwdsContext(Context, State);
		EnterRule(_localctx, 38, RULE_kwds);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(DOUBLESTAR);
			State = 339;
			param_no_default();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_no_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_commentContext type_comment() {
			return GetRuleContext<Type_commentContext>(0);
		}
		public Param_no_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_no_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_no_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_no_defaultContext param_no_default() {
		Param_no_defaultContext _localctx = new Param_no_defaultContext(Context, State);
		EnterRule(_localctx, 40, RULE_param_no_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			param();
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 342;
				Match(COMMA);
				}
			}

			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 345;
				type_comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_assignmentContext default_assignment() {
			return GetRuleContext<Default_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_commentContext type_comment() {
			return GetRuleContext<Type_commentContext>(0);
		}
		public Param_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_with_defaultContext param_with_default() {
		Param_with_defaultContext _localctx = new Param_with_defaultContext(Context, State);
		EnterRule(_localctx, 42, RULE_param_with_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			param();
			State = 349;
			default_assignment();
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 350;
				Match(COMMA);
				}
			}

			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 353;
				type_comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 44, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			Match(NAME);
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 357;
				annotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RenpyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 46, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(COLON);
			State = 361;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_assignmentContext default_assignment() {
		Default_assignmentContext _localctx = new Default_assignmentContext(Context, State);
		EnterRule(_localctx, 48, RULE_default_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(EQUALS);
			State = 364;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(RenpyParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Type_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterType_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitType_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_commentContext type_comment() {
		Type_commentContext _localctx = new Type_commentContext(Context, State);
		EnterRule(_localctx, 50, RULE_type_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(ARROW);
			State = 367;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Star_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_expressionContext star_expression() {
		Star_expressionContext _localctx = new Star_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_star_expression);
		try {
			State = 372;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369;
				Match(STAR);
				State = 370;
				sum(0);
				}
				break;
			case TRUE:
			case FALSE:
			case NONE:
			case NAME:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 371;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			sum(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RenpyParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(RenpyParser.MINUS, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		return sum(0);
	}

	private SumContext sum(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumContext _localctx = new SumContext(Context, _parentState);
		SumContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_sum, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 377;
			primary(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 384;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sum);
					State = 379;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 380;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 381;
					primary(0);
					}
					} 
				}
				State = 386;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		return primary(0);
	}

	private PrimaryContext primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryContext _localctx = new PrimaryContext(Context, _parentState);
		PrimaryContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 388;
			atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 406;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primary);
					State = 390;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 402;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
						{
						State = 391;
						Match(DOT);
						State = 392;
						Match(NAME);
						}
						break;
					case LPAR:
						{
						State = 393;
						Match(LPAR);
						State = 395;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7918853120L) != 0)) {
							{
							State = 394;
							arguments();
							}
						}

						State = 397;
						Match(RPAR);
						}
						break;
					case LSQB:
						{
						State = 398;
						Match(LSQB);
						State = 399;
						slices();
						State = 400;
						Match(RSQB);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 408;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(RenpyParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(RenpyParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(RenpyParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RenpyParser.NUMBER, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 60, RULE_atom);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 409;
				strings();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 410;
				Match(NAME);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 411;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 412;
				Match(FALSE);
				}
				break;
			case NONE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 413;
				Match(NONE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 414;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RenpyParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RenpyParser.STRING, i);
		}
		public StringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringsContext strings() {
		StringsContext _localctx = new StringsContext(Context, State);
		EnterRule(_localctx, 62, RULE_strings);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 417;
					Match(STRING);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
			return GetRuleContext<Single_subscript_attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		public Single_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_targetContext single_target() {
		Single_targetContext _localctx = new Single_targetContext(Context, State);
		EnterRule(_localctx, 64, RULE_single_target);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422;
				single_subscript_attribute_target();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423;
				Match(NAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 424;
				Match(LPAR);
				State = 425;
				single_target();
				State = 426;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_subscript_attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		public Single_subscript_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_subscript_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_subscript_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
		Single_subscript_attribute_targetContext _localctx = new Single_subscript_attribute_targetContext(Context, State);
		EnterRule(_localctx, 66, RULE_single_subscript_attribute_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			t_primary(0);
			State = 437;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				{
				State = 431;
				Match(DOT);
				State = 432;
				Match(NAME);
				}
				break;
			case LSQB:
				{
				State = 433;
				Match(LSQB);
				State = 434;
				slices();
				State = 435;
				Match(RSQB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class T_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RenpyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenexpContext genexp() {
			return GetRuleContext<GenexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(RenpyParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(RenpyParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public T_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitT_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public T_primaryContext t_primary() {
		return t_primary(0);
	}

	private T_primaryContext t_primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		T_primaryContext _localctx = new T_primaryContext(Context, _parentState);
		T_primaryContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_t_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 440;
			Match(NAME);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 459;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new T_primaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_t_primary);
					State = 442;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 455;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						State = 443;
						Match(DOT);
						State = 444;
						Match(NAME);
						}
						break;
					case 2:
						{
						State = 445;
						genexp();
						}
						break;
					case 3:
						{
						State = 446;
						Match(LPAR);
						State = 448;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7918853120L) != 0)) {
							{
							State = 447;
							arguments();
							}
						}

						State = 450;
						Match(RPAR);
						}
						break;
					case 4:
						{
						State = 451;
						Match(LSQB);
						State = 452;
						slices();
						State = 453;
						Match(RSQB);
						}
						break;
					}
					}
					} 
				}
				State = 461;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GenexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(RenpyParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(RenpyParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GenexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenexpContext genexp() {
		GenexpContext _localctx = new GenexpContext(Context, State);
		EnterRule(_localctx, 70, RULE_genexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			Match(LPAR);
			State = 465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 463;
				assignment_expression();
				}
				break;
			case 2:
				{
				State = 464;
				expression();
				}
				break;
			}
			State = 467;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(RenpyParser.COMMA, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 72, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			args();
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 470;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext[] starred_expression() {
			return GetRuleContexts<Starred_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression(int i) {
			return GetRuleContext<Starred_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwargsContext kwargs() {
			return GetRuleContext<KwargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext[] assignment_expression() {
			return GetRuleContexts<Assignment_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression(int i) {
			return GetRuleContext<Assignment_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 74, RULE_args);
		try {
			int _alt;
			State = 498;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 473;
					starred_expression();
					}
					break;
				case TRUE:
				case FALSE:
				case NONE:
				case NAME:
				case STRING:
				case NUMBER:
					{
					State = 476;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
					case 1:
						{
						State = 474;
						assignment_expression();
						}
						break;
					case 2:
						{
						State = 475;
						expression();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 490;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 480;
						Match(COMMA);
						State = 486;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STAR:
							{
							State = 481;
							starred_expression();
							}
							break;
						case TRUE:
						case FALSE:
						case NONE:
						case NAME:
						case STRING:
						case NUMBER:
							{
							State = 484;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
							case 1:
								{
								State = 482;
								assignment_expression();
								}
								break;
							case 2:
								{
								State = 483;
								expression();
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 492;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				}
				State = 495;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 493;
					Match(COMMA);
					State = 494;
					kwargs();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 497;
				kwargs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext[] kwarg_or_starred() {
			return GetRuleContexts<Kwarg_or_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext kwarg_or_starred(int i) {
			return GetRuleContext<Kwarg_or_starredContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RenpyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RenpyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext[] kwarg_or_double_starred() {
			return GetRuleContexts<Kwarg_or_double_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext kwarg_or_double_starred(int i) {
			return GetRuleContext<Kwarg_or_double_starredContext>(i);
		}
		public KwargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwargsContext kwargs() {
		KwargsContext _localctx = new KwargsContext(Context, State);
		EnterRule(_localctx, 76, RULE_kwargs);
		try {
			int _alt;
			State = 527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 500;
				kwarg_or_starred();
				State = 505;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 501;
						Match(COMMA);
						State = 502;
						kwarg_or_starred();
						}
						} 
					}
					State = 507;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				}
				State = 517;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 508;
					Match(COMMA);
					State = 509;
					kwarg_or_double_starred();
					State = 514;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 510;
							Match(COMMA);
							State = 511;
							kwarg_or_double_starred();
							}
							} 
						}
						State = 516;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519;
				kwarg_or_double_starred();
				State = 524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 520;
						Match(COMMA);
						State = 521;
						kwarg_or_double_starred();
						}
						} 
					}
					State = 526;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Starred_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(RenpyParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Starred_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_starred_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStarred_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Starred_expressionContext starred_expression() {
		Starred_expressionContext _localctx = new Starred_expressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_starred_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			Match(STAR);
			State = 530;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_double_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(RenpyParser.DOUBLESTAR, 0); }
		public Kwarg_or_double_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_double_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_double_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_double_starredContext kwarg_or_double_starred() {
		Kwarg_or_double_starredContext _localctx = new Kwarg_or_double_starredContext(Context, State);
		EnterRule(_localctx, 80, RULE_kwarg_or_double_starred);
		try {
			State = 537;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 532;
				Match(NAME);
				State = 533;
				Match(EQUALS);
				State = 534;
				expression();
				}
				break;
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535;
				Match(DOUBLESTAR);
				State = 536;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(RenpyParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression() {
			return GetRuleContext<Starred_expressionContext>(0);
		}
		public Kwarg_or_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_starredContext kwarg_or_starred() {
		Kwarg_or_starredContext _localctx = new Kwarg_or_starredContext(Context, State);
		EnterRule(_localctx, 82, RULE_kwarg_or_starred);
		try {
			State = 543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 539;
				Match(NAME);
				State = 540;
				Match(EQUALS);
				State = 541;
				expression();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 542;
				starred_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RenpyParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONEQUAL() { return GetToken(RenpyParser.COLONEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(NAME);
			State = 546;
			Match(COLONEQUAL);
			State = 547;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public SlicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlicesContext slices() {
		SlicesContext _localctx = new SlicesContext(Context, State);
		EnterRule(_localctx, 86, RULE_slices);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			named_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.EnterNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyParserListener typedListener = listener as IRenpyParserListener;
			if (typedListener != null) typedListener.ExitNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyParserVisitor<TResult> typedVisitor = visitor as IRenpyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_expressionContext named_expression() {
		Named_expressionContext _localctx = new Named_expressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_named_expression);
		try {
			State = 553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551;
				assignment_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 28: return sum_sempred((SumContext)_localctx, predIndex);
		case 29: return primary_sempred((PrimaryContext)_localctx, predIndex);
		case 34: return t_primary_sempred((T_primaryContext)_localctx, predIndex);
		}
		return true;
	}
	private bool sum_sempred(SumContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool t_primary_sempred(T_primaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,37,556,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,1,0,3,0,92,8,0,1,0,5,0,95,8,0,10,0,12,0,98,9,0,1,0,
		1,0,1,1,4,1,103,8,1,11,1,12,1,104,1,2,1,2,1,2,1,2,3,2,111,8,2,1,3,1,3,
		1,3,1,3,1,3,3,3,118,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,128,8,4,1,
		5,1,5,1,5,1,5,1,5,1,6,1,6,3,6,137,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,145,
		8,6,1,6,4,6,148,8,6,11,6,12,6,149,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,
		1,9,1,9,1,9,1,9,1,9,3,9,166,8,9,1,9,3,9,169,8,9,1,10,3,10,172,8,10,1,10,
		1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,185,8,13,1,13,3,
		13,188,8,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,3,16,197,8,16,1,17,1,17,
		1,17,1,17,1,18,4,18,204,8,18,11,18,12,18,205,1,18,5,18,209,8,18,10,18,
		12,18,212,9,18,1,18,5,18,215,8,18,10,18,12,18,218,9,18,1,18,4,18,221,8,
		18,11,18,12,18,222,3,18,225,8,18,1,18,1,18,1,18,3,18,230,8,18,1,18,5,18,
		233,8,18,10,18,12,18,236,9,18,1,18,1,18,3,18,240,8,18,1,18,4,18,243,8,
		18,11,18,12,18,244,3,18,247,8,18,1,18,3,18,250,8,18,1,18,4,18,253,8,18,
		11,18,12,18,254,1,18,1,18,1,18,3,18,260,8,18,1,18,5,18,263,8,18,10,18,
		12,18,266,9,18,1,18,5,18,269,8,18,10,18,12,18,272,9,18,1,18,1,18,3,18,
		276,8,18,1,18,4,18,279,8,18,11,18,12,18,280,3,18,283,8,18,1,18,3,18,286,
		8,18,1,18,4,18,289,8,18,11,18,12,18,290,1,18,1,18,1,18,3,18,296,8,18,1,
		18,5,18,299,8,18,10,18,12,18,302,9,18,1,18,1,18,3,18,306,8,18,1,18,4,18,
		309,8,18,11,18,12,18,310,1,18,5,18,314,8,18,10,18,12,18,317,9,18,1,18,
		5,18,320,8,18,10,18,12,18,323,9,18,1,18,4,18,326,8,18,11,18,12,18,327,
		3,18,330,8,18,3,18,332,8,18,1,18,3,18,335,8,18,3,18,337,8,18,1,19,1,19,
		1,19,1,20,1,20,3,20,344,8,20,1,20,3,20,347,8,20,1,21,1,21,1,21,3,21,352,
		8,21,1,21,3,21,355,8,21,1,22,1,22,3,22,359,8,22,1,23,1,23,1,23,1,24,1,
		24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,3,26,373,8,26,1,27,1,27,1,28,1,28,
		1,28,1,28,1,28,1,28,5,28,383,8,28,10,28,12,28,386,9,28,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,3,29,396,8,29,1,29,1,29,1,29,1,29,1,29,3,29,403,
		8,29,5,29,405,8,29,10,29,12,29,408,9,29,1,30,1,30,1,30,1,30,1,30,1,30,
		3,30,416,8,30,1,31,4,31,419,8,31,11,31,12,31,420,1,32,1,32,1,32,1,32,1,
		32,1,32,3,32,429,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,438,8,33,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,449,8,34,1,34,1,34,1,
		34,1,34,1,34,3,34,456,8,34,5,34,458,8,34,10,34,12,34,461,9,34,1,35,1,35,
		1,35,3,35,466,8,35,1,35,1,35,1,36,1,36,3,36,472,8,36,1,37,1,37,1,37,3,
		37,477,8,37,3,37,479,8,37,1,37,1,37,1,37,1,37,3,37,485,8,37,3,37,487,8,
		37,5,37,489,8,37,10,37,12,37,492,9,37,1,37,1,37,3,37,496,8,37,1,37,3,37,
		499,8,37,1,38,1,38,1,38,5,38,504,8,38,10,38,12,38,507,9,38,1,38,1,38,1,
		38,1,38,5,38,513,8,38,10,38,12,38,516,9,38,3,38,518,8,38,1,38,1,38,1,38,
		5,38,523,8,38,10,38,12,38,526,9,38,3,38,528,8,38,1,39,1,39,1,39,1,40,1,
		40,1,40,1,40,1,40,3,40,538,8,40,1,41,1,41,1,41,1,41,3,41,544,8,41,1,42,
		1,42,1,42,1,42,1,43,1,43,1,44,1,44,3,44,554,8,44,1,44,0,3,56,58,68,45,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,0,1,1,0,19,
		20,605,0,91,1,0,0,0,2,102,1,0,0,0,4,110,1,0,0,0,6,117,1,0,0,0,8,127,1,
		0,0,0,10,129,1,0,0,0,12,134,1,0,0,0,14,153,1,0,0,0,16,157,1,0,0,0,18,159,
		1,0,0,0,20,171,1,0,0,0,22,175,1,0,0,0,24,177,1,0,0,0,26,180,1,0,0,0,28,
		189,1,0,0,0,30,191,1,0,0,0,32,196,1,0,0,0,34,198,1,0,0,0,36,336,1,0,0,
		0,38,338,1,0,0,0,40,341,1,0,0,0,42,348,1,0,0,0,44,356,1,0,0,0,46,360,1,
		0,0,0,48,363,1,0,0,0,50,366,1,0,0,0,52,372,1,0,0,0,54,374,1,0,0,0,56,376,
		1,0,0,0,58,387,1,0,0,0,60,415,1,0,0,0,62,418,1,0,0,0,64,428,1,0,0,0,66,
		430,1,0,0,0,68,439,1,0,0,0,70,462,1,0,0,0,72,469,1,0,0,0,74,498,1,0,0,
		0,76,527,1,0,0,0,78,529,1,0,0,0,80,537,1,0,0,0,82,543,1,0,0,0,84,545,1,
		0,0,0,86,549,1,0,0,0,88,553,1,0,0,0,90,92,3,2,1,0,91,90,1,0,0,0,91,92,
		1,0,0,0,92,96,1,0,0,0,93,95,5,33,0,0,94,93,1,0,0,0,95,98,1,0,0,0,96,94,
		1,0,0,0,96,97,1,0,0,0,97,99,1,0,0,0,98,96,1,0,0,0,99,100,5,0,0,1,100,1,
		1,0,0,0,101,103,3,4,2,0,102,101,1,0,0,0,103,104,1,0,0,0,104,102,1,0,0,
		0,104,105,1,0,0,0,105,3,1,0,0,0,106,107,3,8,4,0,107,108,5,33,0,0,108,111,
		1,0,0,0,109,111,3,6,3,0,110,106,1,0,0,0,110,109,1,0,0,0,111,5,1,0,0,0,
		112,118,3,12,6,0,113,114,3,18,9,0,114,115,5,24,0,0,115,116,3,10,5,0,116,
		118,1,0,0,0,117,112,1,0,0,0,117,113,1,0,0,0,118,7,1,0,0,0,119,128,3,16,
		8,0,120,128,3,12,6,0,121,128,3,22,11,0,122,128,3,18,9,0,123,128,3,26,13,
		0,124,128,3,28,14,0,125,128,3,32,16,0,126,128,3,34,17,0,127,119,1,0,0,
		0,127,120,1,0,0,0,127,121,1,0,0,0,127,122,1,0,0,0,127,123,1,0,0,0,127,
		124,1,0,0,0,127,125,1,0,0,0,127,126,1,0,0,0,128,9,1,0,0,0,129,130,5,33,
		0,0,130,131,5,1,0,0,131,132,3,2,1,0,132,133,5,2,0,0,133,11,1,0,0,0,134,
		136,5,9,0,0,135,137,3,20,10,0,136,135,1,0,0,0,136,137,1,0,0,0,137,138,
		1,0,0,0,138,139,5,24,0,0,139,140,5,33,0,0,140,144,5,1,0,0,141,142,3,32,
		16,0,142,143,5,33,0,0,143,145,1,0,0,0,144,141,1,0,0,0,144,145,1,0,0,0,
		145,147,1,0,0,0,146,148,3,14,7,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,
		1,0,0,0,149,150,1,0,0,0,150,151,1,0,0,0,151,152,5,2,0,0,152,13,1,0,0,0,
		153,154,5,31,0,0,154,155,5,24,0,0,155,156,3,10,5,0,156,15,1,0,0,0,157,
		158,5,6,0,0,158,17,1,0,0,0,159,160,5,3,0,0,160,165,3,20,10,0,161,162,5,
		13,0,0,162,163,3,36,18,0,163,164,5,16,0,0,164,166,1,0,0,0,165,161,1,0,
		0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,169,5,24,0,0,168,167,1,0,0,0,168,
		169,1,0,0,0,169,19,1,0,0,0,170,172,5,23,0,0,171,170,1,0,0,0,171,172,1,
		0,0,0,172,173,1,0,0,0,173,174,5,30,0,0,174,21,1,0,0,0,175,176,3,24,12,
		0,176,23,1,0,0,0,177,178,5,4,0,0,178,179,3,54,27,0,179,25,1,0,0,0,180,
		181,5,5,0,0,181,187,3,20,10,0,182,184,5,13,0,0,183,185,3,72,36,0,184,183,
		1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,188,5,16,0,0,187,182,1,0,0,
		0,187,188,1,0,0,0,188,27,1,0,0,0,189,190,3,30,15,0,190,29,1,0,0,0,191,
		192,5,7,0,0,192,31,1,0,0,0,193,194,5,30,0,0,194,197,5,31,0,0,195,197,5,
		31,0,0,196,193,1,0,0,0,196,195,1,0,0,0,197,33,1,0,0,0,198,199,3,64,32,
		0,199,200,5,25,0,0,200,201,3,54,27,0,201,35,1,0,0,0,202,204,3,40,20,0,
		203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,210,
		1,0,0,0,207,209,3,42,21,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,
		0,0,210,211,1,0,0,0,211,225,1,0,0,0,212,210,1,0,0,0,213,215,3,40,20,0,
		214,213,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,220,
		1,0,0,0,218,216,1,0,0,0,219,221,3,42,21,0,220,219,1,0,0,0,221,222,1,0,
		0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,203,1,0,0,0,224,
		216,1,0,0,0,225,226,1,0,0,0,226,227,5,22,0,0,227,228,5,26,0,0,228,230,
		1,0,0,0,229,224,1,0,0,0,229,230,1,0,0,0,230,234,1,0,0,0,231,233,3,42,21,
		0,232,231,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,
		246,1,0,0,0,236,234,1,0,0,0,237,238,5,27,0,0,238,240,5,26,0,0,239,237,
		1,0,0,0,239,240,1,0,0,0,240,242,1,0,0,0,241,243,3,42,21,0,242,241,1,0,
		0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,246,
		239,1,0,0,0,246,247,1,0,0,0,247,249,1,0,0,0,248,250,3,38,19,0,249,248,
		1,0,0,0,249,250,1,0,0,0,250,337,1,0,0,0,251,253,3,40,20,0,252,251,1,0,
		0,0,253,254,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,
		257,5,22,0,0,257,258,5,26,0,0,258,260,1,0,0,0,259,252,1,0,0,0,259,260,
		1,0,0,0,260,264,1,0,0,0,261,263,3,40,20,0,262,261,1,0,0,0,263,266,1,0,
		0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,270,1,0,0,0,266,264,1,0,0,0,267,
		269,3,42,21,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,
		1,0,0,0,271,282,1,0,0,0,272,270,1,0,0,0,273,274,5,27,0,0,274,276,5,26,
		0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,279,3,42,21,0,
		278,277,1,0,0,0,279,280,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,283,
		1,0,0,0,282,275,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,286,3,38,19,
		0,285,284,1,0,0,0,285,286,1,0,0,0,286,337,1,0,0,0,287,289,3,40,20,0,288,
		287,1,0,0,0,289,290,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,292,1,
		0,0,0,292,293,5,22,0,0,293,294,5,26,0,0,294,296,1,0,0,0,295,288,1,0,0,
		0,295,296,1,0,0,0,296,300,1,0,0,0,297,299,3,40,20,0,298,297,1,0,0,0,299,
		302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,331,1,0,0,0,302,300,1,
		0,0,0,303,304,5,27,0,0,304,306,5,26,0,0,305,303,1,0,0,0,305,306,1,0,0,
		0,306,329,1,0,0,0,307,309,3,40,20,0,308,307,1,0,0,0,309,310,1,0,0,0,310,
		308,1,0,0,0,310,311,1,0,0,0,311,315,1,0,0,0,312,314,3,42,21,0,313,312,
		1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,330,1,0,0,
		0,317,315,1,0,0,0,318,320,3,40,20,0,319,318,1,0,0,0,320,323,1,0,0,0,321,
		319,1,0,0,0,321,322,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,324,326,3,
		42,21,0,325,324,1,0,0,0,326,327,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,
		0,328,330,1,0,0,0,329,308,1,0,0,0,329,321,1,0,0,0,330,332,1,0,0,0,331,
		305,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,335,3,38,19,0,334,333,
		1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,229,1,0,0,0,336,259,1,0,0,
		0,336,295,1,0,0,0,337,37,1,0,0,0,338,339,5,28,0,0,339,340,3,40,20,0,340,
		39,1,0,0,0,341,343,3,44,22,0,342,344,5,26,0,0,343,342,1,0,0,0,343,344,
		1,0,0,0,344,346,1,0,0,0,345,347,3,50,25,0,346,345,1,0,0,0,346,347,1,0,
		0,0,347,41,1,0,0,0,348,349,3,44,22,0,349,351,3,48,24,0,350,352,5,26,0,
		0,351,350,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,355,3,50,25,0,354,
		353,1,0,0,0,354,355,1,0,0,0,355,43,1,0,0,0,356,358,5,30,0,0,357,359,3,
		46,23,0,358,357,1,0,0,0,358,359,1,0,0,0,359,45,1,0,0,0,360,361,5,24,0,
		0,361,362,3,54,27,0,362,47,1,0,0,0,363,364,5,25,0,0,364,365,3,54,27,0,
		365,49,1,0,0,0,366,367,5,21,0,0,367,368,3,54,27,0,368,51,1,0,0,0,369,370,
		5,27,0,0,370,373,3,56,28,0,371,373,3,54,27,0,372,369,1,0,0,0,372,371,1,
		0,0,0,373,53,1,0,0,0,374,375,3,56,28,0,375,55,1,0,0,0,376,377,6,28,-1,
		0,377,378,3,58,29,0,378,384,1,0,0,0,379,380,10,2,0,0,380,381,7,0,0,0,381,
		383,3,58,29,0,382,379,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,
		1,0,0,0,385,57,1,0,0,0,386,384,1,0,0,0,387,388,6,29,-1,0,388,389,3,60,
		30,0,389,406,1,0,0,0,390,402,10,2,0,0,391,392,5,23,0,0,392,403,5,30,0,
		0,393,395,5,13,0,0,394,396,3,72,36,0,395,394,1,0,0,0,395,396,1,0,0,0,396,
		397,1,0,0,0,397,403,5,16,0,0,398,399,5,14,0,0,399,400,3,86,43,0,400,401,
		5,17,0,0,401,403,1,0,0,0,402,391,1,0,0,0,402,393,1,0,0,0,402,398,1,0,0,
		0,403,405,1,0,0,0,404,390,1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,
		407,1,0,0,0,407,59,1,0,0,0,408,406,1,0,0,0,409,416,3,62,31,0,410,416,5,
		30,0,0,411,416,5,10,0,0,412,416,5,11,0,0,413,416,5,12,0,0,414,416,5,32,
		0,0,415,409,1,0,0,0,415,410,1,0,0,0,415,411,1,0,0,0,415,412,1,0,0,0,415,
		413,1,0,0,0,415,414,1,0,0,0,416,61,1,0,0,0,417,419,5,31,0,0,418,417,1,
		0,0,0,419,420,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,63,1,0,0,0,422,
		429,3,66,33,0,423,429,5,30,0,0,424,425,5,13,0,0,425,426,3,64,32,0,426,
		427,5,16,0,0,427,429,1,0,0,0,428,422,1,0,0,0,428,423,1,0,0,0,428,424,1,
		0,0,0,429,65,1,0,0,0,430,437,3,68,34,0,431,432,5,23,0,0,432,438,5,30,0,
		0,433,434,5,14,0,0,434,435,3,86,43,0,435,436,5,17,0,0,436,438,1,0,0,0,
		437,431,1,0,0,0,437,433,1,0,0,0,438,67,1,0,0,0,439,440,6,34,-1,0,440,441,
		5,30,0,0,441,459,1,0,0,0,442,455,10,2,0,0,443,444,5,23,0,0,444,456,5,30,
		0,0,445,456,3,70,35,0,446,448,5,13,0,0,447,449,3,72,36,0,448,447,1,0,0,
		0,448,449,1,0,0,0,449,450,1,0,0,0,450,456,5,16,0,0,451,452,5,14,0,0,452,
		453,3,86,43,0,453,454,5,17,0,0,454,456,1,0,0,0,455,443,1,0,0,0,455,445,
		1,0,0,0,455,446,1,0,0,0,455,451,1,0,0,0,456,458,1,0,0,0,457,442,1,0,0,
		0,458,461,1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,69,1,0,0,0,461,459,
		1,0,0,0,462,465,5,13,0,0,463,466,3,84,42,0,464,466,3,54,27,0,465,463,1,
		0,0,0,465,464,1,0,0,0,466,467,1,0,0,0,467,468,5,16,0,0,468,71,1,0,0,0,
		469,471,3,74,37,0,470,472,5,26,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,
		73,1,0,0,0,473,479,3,78,39,0,474,477,3,84,42,0,475,477,3,54,27,0,476,474,
		1,0,0,0,476,475,1,0,0,0,477,479,1,0,0,0,478,473,1,0,0,0,478,476,1,0,0,
		0,479,490,1,0,0,0,480,486,5,26,0,0,481,487,3,78,39,0,482,485,3,84,42,0,
		483,485,3,54,27,0,484,482,1,0,0,0,484,483,1,0,0,0,485,487,1,0,0,0,486,
		481,1,0,0,0,486,484,1,0,0,0,487,489,1,0,0,0,488,480,1,0,0,0,489,492,1,
		0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,495,1,0,0,0,492,490,1,0,0,0,
		493,494,5,26,0,0,494,496,3,76,38,0,495,493,1,0,0,0,495,496,1,0,0,0,496,
		499,1,0,0,0,497,499,3,76,38,0,498,478,1,0,0,0,498,497,1,0,0,0,499,75,1,
		0,0,0,500,505,3,82,41,0,501,502,5,26,0,0,502,504,3,82,41,0,503,501,1,0,
		0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,517,1,0,0,0,507,
		505,1,0,0,0,508,509,5,26,0,0,509,514,3,80,40,0,510,511,5,26,0,0,511,513,
		3,80,40,0,512,510,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,
		0,0,515,518,1,0,0,0,516,514,1,0,0,0,517,508,1,0,0,0,517,518,1,0,0,0,518,
		528,1,0,0,0,519,524,3,80,40,0,520,521,5,26,0,0,521,523,3,80,40,0,522,520,
		1,0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,528,1,0,0,
		0,526,524,1,0,0,0,527,500,1,0,0,0,527,519,1,0,0,0,528,77,1,0,0,0,529,530,
		5,27,0,0,530,531,3,54,27,0,531,79,1,0,0,0,532,533,5,30,0,0,533,534,5,25,
		0,0,534,538,3,54,27,0,535,536,5,28,0,0,536,538,3,54,27,0,537,532,1,0,0,
		0,537,535,1,0,0,0,538,81,1,0,0,0,539,540,5,30,0,0,540,541,5,25,0,0,541,
		544,3,54,27,0,542,544,3,78,39,0,543,539,1,0,0,0,543,542,1,0,0,0,544,83,
		1,0,0,0,545,546,5,30,0,0,546,547,5,29,0,0,547,548,3,54,27,0,548,85,1,0,
		0,0,549,550,3,88,44,0,550,87,1,0,0,0,551,554,3,84,42,0,552,554,3,54,27,
		0,553,551,1,0,0,0,553,552,1,0,0,0,554,89,1,0,0,0,80,91,96,104,110,117,
		127,136,144,149,165,168,171,184,187,196,205,210,216,222,224,229,234,239,
		244,246,249,254,259,264,270,275,280,282,285,290,295,300,305,310,315,321,
		327,329,331,334,336,343,346,351,354,358,372,384,395,402,406,415,420,428,
		437,448,455,459,465,471,476,478,484,486,490,495,498,505,514,517,524,527,
		537,543,553
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
